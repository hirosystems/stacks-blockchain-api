---
description: Use everytime you interact with the Github CLI (gh in ternminal)
globs: 
alwaysApply: false
---
# GitHub CLI & Git Workflow Rules

## Core Principles
- **🚨 NEVER push to remote repos without user approval - always ask first!**
- Always configure non-interactive pager: `gh config set pager "cat"`
- Keep commit messages under 72 characters for commitlint compliance
- Use `--body-file` for complex PR comments to avoid shell escaping issues
- Use `--force-with-lease` instead of `--force` for safer pushes
- Test locally before pushing (lint, tests, build)
- **Keep PRs slim and targeted - never commit investigation artifacts**

## Push Approval Protocol

### ⚠️ MANDATORY: Always Ask Before Pushing
```bash
# ❌ NEVER do this without asking:
git push
git push --force-with-lease
git push origin branch-name

# ✅ ALWAYS do this instead:
# 1. Prepare commits locally
# 2. Show user what will be pushed: git log --oneline origin/branch..HEAD
# 3. Ask user: "Ready to push these changes to remote?"
# 4. Wait for explicit approval
# 5. Only then execute the push command
```

### Pre-Push Checklist
- [ ] All changes committed locally
- [ ] Tests pass: `npm test`
- [ ] Linting passes: `npm run lint`
- [ ] User has reviewed and approved the push
- [ ] Confirmed target branch and repository

## PR Content Guidelines

### ✅ What to Include
- Core fix/feature code changes only
- Essential test coverage for the changes
- Necessary configuration updates
- Required dependency changes

### ❌ What to NEVER Include
- Investigation logs or memory profiling data
- PR description drafts (`pr-description.md`)
- Temporary notes or documentation artifacts
- Research findings or analysis files
- Comment drafts or communication files
- Development tools or scripts not part of the solution

### PR Cleanup Checklist
```bash
# Before pushing, always check:
git status
git diff --name-only HEAD~1  # Review what you're including
git log --oneline -3         # Check commit messages

# Remove any artifacts:
git rm unwanted-file.md
git commit --amend          # If last commit, or create new cleanup commit
```

## Command Patterns

### Safe PR Commenting
```bash
# For complex comments with special characters, backticks, checkmarks
echo "Comment content" > temp-comment.txt
gh pr comment PR_NUMBER --body-file temp-comment.txt
rm temp-comment.txt
```

### CI Monitoring
```bash
# Check PR status without pager issues
gh pr status
gh pr checks
gh pr view PR_NUMBER --comments
```

### Commit Message Validation
```bash
# Validate commit message length (must be ≤72 chars)
git log --pretty=format:"%h %s" -1 | wc -c
```

- **Keep investigation artifacts LOCAL - never commit them to PRs**

## Review Response Protocol
1. Read all feedback systematically
2. Address each point specifically in code
3. Create single comprehensive response comment
4. Use checkmarks (✅) to show completion status
5. Acknowledge reviewer effort and specific improvements made

## Error Prevention
- Never use inline `--body` with special characters
- Always check CI status before requesting review  
- Validate locally: `npm test && npm run lint`
- Use JSON output for scripting: `--json` flags
- **Always review git diff before pushing to avoid including artifacts**
- **🚨 NEVER push without explicit user approval** 

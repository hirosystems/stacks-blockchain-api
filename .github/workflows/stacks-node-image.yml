name: Publish stacks-node testing image

on:
  workflow_dispatch:
    inputs:
      stacks_blockchain_branch:
        description: 'stacks-blockchain git branch or tag'
        required: true
        type: string

env:
  STACKS_BLOCKCHAIN_BRANCH: ${{ inputs.stacks_blockchain_branch || 'next' }}

jobs:
  build-stacks-node:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Fetch Stacks node repo
        run: |
          mkdir stacks-blockchain-repo && cd stacks-blockchain-repo
          git clone --depth 1 --branch "$STACKS_BLOCKCHAIN_BRANCH" https://github.com/stacks-network/stacks-blockchain.git .
          STACKS_BLOCKCHAIN_COMMIT=$(git rev-parse HEAD)
          echo "stacks-blockchain branch: $STACKS_BLOCKCHAIN_BRANCH, commit: $STACKS_BLOCKCHAIN_COMMIT"
          echo "STACKS_BLOCKCHAIN_COMMIT=$STACKS_BLOCKCHAIN_COMMIT" >> $GITHUB_ENV
          echo "STACKS_BLOCKCHAIN_COMMIT_SHORT=$(head -c 7 <<< $STACKS_BLOCKCHAIN_COMMIT)" >> $GITHUB_ENV
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-gnu,aarch64-unknown-linux-gnu
      - name: Install compilation tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y g++-aarch64-linux-gnu libc6-dev-arm64-cross gcc-aarch64-linux-gnu
      - name: Cargo fetch
        working-directory: stacks-blockchain-repo
        run: |
          cargo fetch --manifest-path testnet/stacks-node/Cargo.toml --target x86_64-unknown-linux-gnu --target aarch64-unknown-linux-gnu
      - name: Build Stacks node
        working-directory: stacks-blockchain-repo
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: true
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
          AR_aarch64_unknown_linux_gnu: aarch64-linux-gnu-ar
        run: |
          cargo build --package stacks-node --bin stacks-node --release --target x86_64-unknown-linux-gnu --target aarch64-unknown-linux-gnu
          mkdir -p ../docker/stacks-blockchain-binaries/x86_64-unknown-linux-gnu
          mkdir -p ../docker/stacks-blockchain-binaries/aarch64-unknown-linux-gnu
          cp target/x86_64-unknown-linux-gnu/release/stacks-node ../docker/stacks-blockchain-binaries/x86_64-unknown-linux-gnu
          cp target/aarch64-unknown-linux-gnu/release/stacks-node ../docker/stacks-blockchain-binaries/aarch64-unknown-linux-gnu
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: hirosystems/${{ github.event.repository.name }}-test-node
          tags: |
            type=raw,value=latest,enable=false
            type=raw,value=${{ env.STACKS_BLOCKCHAIN_COMMIT_SHORT }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          file: docker/stacks-test-node.Dockerfile
          context: ./docker
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=hirosystems/${{ github.event.repository.name }}-test-node
          cache-to: type=inline

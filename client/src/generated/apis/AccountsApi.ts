/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccountDataResponse,
    AccountDataResponseFromJSON,
    AccountDataResponseToJSON,
    AddressAssetsListResponse,
    AddressAssetsListResponseFromJSON,
    AddressAssetsListResponseToJSON,
    AddressBalanceResponse,
    AddressBalanceResponseFromJSON,
    AddressBalanceResponseToJSON,
    AddressNftListResponse,
    AddressNftListResponseFromJSON,
    AddressNftListResponseToJSON,
    AddressNonces,
    AddressNoncesFromJSON,
    AddressNoncesToJSON,
    AddressStxInboundListResponse,
    AddressStxInboundListResponseFromJSON,
    AddressStxInboundListResponseToJSON,
    AddressTransactionWithTransfers,
    AddressTransactionWithTransfersFromJSON,
    AddressTransactionWithTransfersToJSON,
    AddressTransactionsListResponse,
    AddressTransactionsListResponseFromJSON,
    AddressTransactionsListResponseToJSON,
    AddressTransactionsWithTransfersListResponse,
    AddressTransactionsWithTransfersListResponseFromJSON,
    AddressTransactionsWithTransfersListResponseToJSON,
} from '../models';

export interface GetAccountAssetsRequest {
    principal: string;
    limit?: number;
    offset?: number;
    unanchored?: boolean;
    untilBlock?: string;
}

export interface GetAccountBalanceRequest {
    principal: string;
    unanchored?: boolean;
    untilBlock?: string;
}

export interface GetAccountInboundRequest {
    principal: string;
    limit?: number;
    offset?: number;
    height?: number;
    unanchored?: boolean;
    untilBlock?: string;
}

export interface GetAccountInfoRequest {
    principal: string;
    proof?: number;
    tip?: string;
}

export interface GetAccountNftRequest {
    principal: string;
    limit?: number;
    offset?: number;
    unanchored?: boolean;
    untilBlock?: string;
}

export interface GetAccountNoncesRequest {
    principal: string;
    blockHeight?: number;
    blockHash?: string;
}

export interface GetAccountStxBalanceRequest {
    principal: string;
    unanchored?: boolean;
    untilBlock?: string;
}

export interface GetAccountTransactionsRequest {
    principal: string;
    limit?: number;
    offset?: number;
    height?: number;
    unanchored?: boolean;
    untilBlock?: string;
}

export interface GetAccountTransactionsWithTransfersRequest {
    principal: string;
    limit?: number;
    offset?: number;
    height?: number;
    unanchored?: boolean;
    untilBlock?: string;
}

export interface GetSingleTransactionWithTransfersRequest {
    principal: string;
    txId: string;
}

/**
 * AccountsApi - interface
 * 
 * @export
 * @interface AccountsApiInterface
 */
export interface AccountsApiInterface {
    /**
     * Retrieves a list of all assets events associated with an account or a Contract Identifier. This includes Transfers, Mints.
     * @summary Get account assets
     * @param {string} principal Stacks address or a Contract identifier
     * @param {number} [limit] max number of account assets to fetch
     * @param {number} [offset] index of first account assets to fetch
     * @param {boolean} [unanchored] Include transaction data from unanchored (i.e. unconfirmed) microblocks
     * @param {string} [untilBlock] returned data representing the state at that point in time, rather than the current block. Note - Use either of the query parameters but not both at a time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountAssetsRaw(requestParameters: GetAccountAssetsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AddressAssetsListResponse>>;

    /**
     * Retrieves a list of all assets events associated with an account or a Contract Identifier. This includes Transfers, Mints.
     * Get account assets
     */
    getAccountAssets(requestParameters: GetAccountAssetsRequest, initOverrides?: RequestInit): Promise<AddressAssetsListResponse>;

    /**
     * Retrieves total account balance information for a given Address or Contract Identifier. This includes the balances of  STX Tokens, Fungible Tokens and Non-Fungible Tokens for the account.
     * @summary Get account balances
     * @param {string} principal Stacks address or a Contract identifier
     * @param {boolean} [unanchored] Include transaction data from unanchored (i.e. unconfirmed) microblocks
     * @param {string} [untilBlock] returned data representing the state up until that point in time, rather than the current block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountBalanceRaw(requestParameters: GetAccountBalanceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AddressBalanceResponse>>;

    /**
     * Retrieves total account balance information for a given Address or Contract Identifier. This includes the balances of  STX Tokens, Fungible Tokens and Non-Fungible Tokens for the account.
     * Get account balances
     */
    getAccountBalance(requestParameters: GetAccountBalanceRequest, initOverrides?: RequestInit): Promise<AddressBalanceResponse>;

    /**
     * Retrieves a list of STX transfers with memos to the given principal. This includes regular transfers from a stx-transfer transaction type, and transfers from contract-call transactions a the `send-many-memo` bulk sending contract. 
     * @summary Get inbound STX transfers
     * @param {string} principal Stacks address or a Contract identifier
     * @param {number} [limit] number of items to return
     * @param {number} [offset] number of items to skip
     * @param {number} [height] Filter for transfers only at this given block height
     * @param {boolean} [unanchored] Include transaction data from unanchored (i.e. unconfirmed) microblocks
     * @param {string} [untilBlock] returned data representing the state up until that point in time, rather than the current block. Note - Use either of the query parameters but not both at a time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountInboundRaw(requestParameters: GetAccountInboundRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AddressStxInboundListResponse>>;

    /**
     * Retrieves a list of STX transfers with memos to the given principal. This includes regular transfers from a stx-transfer transaction type, and transfers from contract-call transactions a the `send-many-memo` bulk sending contract. 
     * Get inbound STX transfers
     */
    getAccountInbound(requestParameters: GetAccountInboundRequest, initOverrides?: RequestInit): Promise<AddressStxInboundListResponse>;

    /**
     * Retrieves the account data for a given Account or a Contract Identifier  Where balance is the hex encoding of a unsigned 128-bit integer (big-endian), nonce is an unsigned 64-bit integer, and the proofs are provided as hex strings.  For non-existent accounts, this does not return a 404 error, rather it returns an object with balance and nonce of 0. 
     * @summary Get account info
     * @param {string} principal Stacks address or a Contract identifier
     * @param {number} [proof] Returns object without the proof field if set to 0
     * @param {string} [tip] The Stacks chain tip to query from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountInfoRaw(requestParameters: GetAccountInfoRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AccountDataResponse>>;

    /**
     * Retrieves the account data for a given Account or a Contract Identifier  Where balance is the hex encoding of a unsigned 128-bit integer (big-endian), nonce is an unsigned 64-bit integer, and the proofs are provided as hex strings.  For non-existent accounts, this does not return a 404 error, rather it returns an object with balance and nonce of 0. 
     * Get account info
     */
    getAccountInfo(requestParameters: GetAccountInfoRequest, initOverrides?: RequestInit): Promise<AccountDataResponse>;

    /**
     * **NOTE:** This endpoint is deprecated in favor of [Non-Fungible Token holdings](#operation/get_nft_holdings).  Retrieves a list of all nfts owned by an address, contains the clarity value of the identifier of the nft. 
     * @summary Get nft events
     * @param {string} principal Stacks address or a Contract identifier
     * @param {number} [limit] number of items to return
     * @param {number} [offset] number of items to skip
     * @param {boolean} [unanchored] Include transaction data from unanchored (i.e. unconfirmed) microblocks
     * @param {string} [untilBlock] returned data representing the state up until that point in time, rather than the current block. Note - Use either of the query parameters but not both at a time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountNftRaw(requestParameters: GetAccountNftRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AddressNftListResponse>>;

    /**
     * **NOTE:** This endpoint is deprecated in favor of [Non-Fungible Token holdings](#operation/get_nft_holdings).  Retrieves a list of all nfts owned by an address, contains the clarity value of the identifier of the nft. 
     * Get nft events
     */
    getAccountNft(requestParameters: GetAccountNftRequest, initOverrides?: RequestInit): Promise<AddressNftListResponse>;

    /**
     * Retrieves the latest nonce values used by an account by inspecting the mempool, microblock transactions, and anchored transactions.
     * @summary Get the latest nonce used by an account
     * @param {string} principal Stacks address
     * @param {number} [blockHeight] Optionally get the nonce at a given block height.
     * @param {string} [blockHash] Optionally get the nonce at a given block hash. Note - Use either of the query parameters but not both at a time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountNoncesRaw(requestParameters: GetAccountNoncesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AddressNonces>>;

    /**
     * Retrieves the latest nonce values used by an account by inspecting the mempool, microblock transactions, and anchored transactions.
     * Get the latest nonce used by an account
     */
    getAccountNonces(requestParameters: GetAccountNoncesRequest, initOverrides?: RequestInit): Promise<AddressNonces>;

    /**
     * Retrieves STX token balance for a given Address or Contract Identifier.
     * @summary Get account STX balance
     * @param {string} principal Stacks address or a Contract identifier.
     * @param {boolean} [unanchored] Include transaction data from unanchored (i.e. unconfirmed) microblocks.
     * @param {string} [untilBlock] returned data representing the state up until that point in time, rather than the current block. Note - Use either of the query parameters but not both at a time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountStxBalanceRaw(requestParameters: GetAccountStxBalanceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>>;

    /**
     * Retrieves STX token balance for a given Address or Contract Identifier.
     * Get account STX balance
     */
    getAccountStxBalance(requestParameters: GetAccountStxBalanceRequest, initOverrides?: RequestInit): Promise<object>;

    /**
     * Retrieves a list of all Transactions for a given Address or Contract Identifier. More information on Transaction types can be found [here](https://docs.stacks.co/understand-stacks/transactions#types).  If you need to actively monitor new transactions for an address or contract id, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates. 
     * @summary Get account transactions
     * @param {string} principal Stacks address or a Contract identifier
     * @param {number} [limit] max number of account transactions to fetch
     * @param {number} [offset] index of first account transaction to fetch
     * @param {number} [height] Filter for transactions only at this given block height
     * @param {boolean} [unanchored] Include transaction data from unanchored (i.e. unconfirmed) microblocks
     * @param {string} [untilBlock] returned data representing the state up until that point in time, rather than the current block. Note - Use either of the query parameters but not both at a time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountTransactionsRaw(requestParameters: GetAccountTransactionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AddressTransactionsListResponse>>;

    /**
     * Retrieves a list of all Transactions for a given Address or Contract Identifier. More information on Transaction types can be found [here](https://docs.stacks.co/understand-stacks/transactions#types).  If you need to actively monitor new transactions for an address or contract id, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates. 
     * Get account transactions
     */
    getAccountTransactions(requestParameters: GetAccountTransactionsRequest, initOverrides?: RequestInit): Promise<AddressTransactionsListResponse>;

    /**
     * Retrieve all transactions for an account or contract identifier including STX transfers for each transaction.
     * @summary Get account transactions including STX transfers for each transaction.
     * @param {string} principal Stacks address or a Contract identifier
     * @param {number} [limit] max number of account transactions to fetch
     * @param {number} [offset] index of first account transaction to fetch
     * @param {number} [height] Filter for transactions only at this given block height
     * @param {boolean} [unanchored] Include transaction data from unanchored (i.e. unconfirmed) microblocks
     * @param {string} [untilBlock] returned data representing the state up until that point in time, rather than the current block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountTransactionsWithTransfersRaw(requestParameters: GetAccountTransactionsWithTransfersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AddressTransactionsWithTransfersListResponse>>;

    /**
     * Retrieve all transactions for an account or contract identifier including STX transfers for each transaction.
     * Get account transactions including STX transfers for each transaction.
     */
    getAccountTransactionsWithTransfers(requestParameters: GetAccountTransactionsWithTransfersRequest, initOverrides?: RequestInit): Promise<AddressTransactionsWithTransfersListResponse>;

    /**
     * Retrieves transaction details for a given Transaction Id `tx_id`, for a given account or contract Identifier.
     * @summary Get account transaction information for specific transaction
     * @param {string} principal Stacks address or a contract identifier
     * @param {string} txId Transaction id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getSingleTransactionWithTransfersRaw(requestParameters: GetSingleTransactionWithTransfersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AddressTransactionWithTransfers>>;

    /**
     * Retrieves transaction details for a given Transaction Id `tx_id`, for a given account or contract Identifier.
     * Get account transaction information for specific transaction
     */
    getSingleTransactionWithTransfers(requestParameters: GetSingleTransactionWithTransfersRequest, initOverrides?: RequestInit): Promise<AddressTransactionWithTransfers>;

}

/**
 * 
 */
export class AccountsApi extends runtime.BaseAPI implements AccountsApiInterface {

    /**
     * Retrieves a list of all assets events associated with an account or a Contract Identifier. This includes Transfers, Mints.
     * Get account assets
     */
    async getAccountAssetsRaw(requestParameters: GetAccountAssetsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AddressAssetsListResponse>> {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal','Required parameter requestParameters.principal was null or undefined when calling getAccountAssets.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.unanchored !== undefined) {
            queryParameters['unanchored'] = requestParameters.unanchored;
        }

        if (requestParameters.untilBlock !== undefined) {
            queryParameters['until_block'] = requestParameters.untilBlock;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/address/{principal}/assets`.replace(`{${"principal"}}`, encodeURIComponent(String(requestParameters.principal))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressAssetsListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of all assets events associated with an account or a Contract Identifier. This includes Transfers, Mints.
     * Get account assets
     */
    async getAccountAssets(requestParameters: GetAccountAssetsRequest, initOverrides?: RequestInit): Promise<AddressAssetsListResponse> {
        const response = await this.getAccountAssetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves total account balance information for a given Address or Contract Identifier. This includes the balances of  STX Tokens, Fungible Tokens and Non-Fungible Tokens for the account.
     * Get account balances
     */
    async getAccountBalanceRaw(requestParameters: GetAccountBalanceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AddressBalanceResponse>> {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal','Required parameter requestParameters.principal was null or undefined when calling getAccountBalance.');
        }

        const queryParameters: any = {};

        if (requestParameters.unanchored !== undefined) {
            queryParameters['unanchored'] = requestParameters.unanchored;
        }

        if (requestParameters.untilBlock !== undefined) {
            queryParameters['until_block'] = requestParameters.untilBlock;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/address/{principal}/balances`.replace(`{${"principal"}}`, encodeURIComponent(String(requestParameters.principal))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressBalanceResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves total account balance information for a given Address or Contract Identifier. This includes the balances of  STX Tokens, Fungible Tokens and Non-Fungible Tokens for the account.
     * Get account balances
     */
    async getAccountBalance(requestParameters: GetAccountBalanceRequest, initOverrides?: RequestInit): Promise<AddressBalanceResponse> {
        const response = await this.getAccountBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of STX transfers with memos to the given principal. This includes regular transfers from a stx-transfer transaction type, and transfers from contract-call transactions a the `send-many-memo` bulk sending contract. 
     * Get inbound STX transfers
     */
    async getAccountInboundRaw(requestParameters: GetAccountInboundRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AddressStxInboundListResponse>> {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal','Required parameter requestParameters.principal was null or undefined when calling getAccountInbound.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.unanchored !== undefined) {
            queryParameters['unanchored'] = requestParameters.unanchored;
        }

        if (requestParameters.untilBlock !== undefined) {
            queryParameters['until_block'] = requestParameters.untilBlock;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/address/{principal}/stx_inbound`.replace(`{${"principal"}}`, encodeURIComponent(String(requestParameters.principal))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressStxInboundListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of STX transfers with memos to the given principal. This includes regular transfers from a stx-transfer transaction type, and transfers from contract-call transactions a the `send-many-memo` bulk sending contract. 
     * Get inbound STX transfers
     */
    async getAccountInbound(requestParameters: GetAccountInboundRequest, initOverrides?: RequestInit): Promise<AddressStxInboundListResponse> {
        const response = await this.getAccountInboundRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the account data for a given Account or a Contract Identifier  Where balance is the hex encoding of a unsigned 128-bit integer (big-endian), nonce is an unsigned 64-bit integer, and the proofs are provided as hex strings.  For non-existent accounts, this does not return a 404 error, rather it returns an object with balance and nonce of 0. 
     * Get account info
     */
    async getAccountInfoRaw(requestParameters: GetAccountInfoRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AccountDataResponse>> {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal','Required parameter requestParameters.principal was null or undefined when calling getAccountInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.proof !== undefined) {
            queryParameters['proof'] = requestParameters.proof;
        }

        if (requestParameters.tip !== undefined) {
            queryParameters['tip'] = requestParameters.tip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/accounts/{principal}`.replace(`{${"principal"}}`, encodeURIComponent(String(requestParameters.principal))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountDataResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the account data for a given Account or a Contract Identifier  Where balance is the hex encoding of a unsigned 128-bit integer (big-endian), nonce is an unsigned 64-bit integer, and the proofs are provided as hex strings.  For non-existent accounts, this does not return a 404 error, rather it returns an object with balance and nonce of 0. 
     * Get account info
     */
    async getAccountInfo(requestParameters: GetAccountInfoRequest, initOverrides?: RequestInit): Promise<AccountDataResponse> {
        const response = await this.getAccountInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * **NOTE:** This endpoint is deprecated in favor of [Non-Fungible Token holdings](#operation/get_nft_holdings).  Retrieves a list of all nfts owned by an address, contains the clarity value of the identifier of the nft. 
     * Get nft events
     */
    async getAccountNftRaw(requestParameters: GetAccountNftRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AddressNftListResponse>> {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal','Required parameter requestParameters.principal was null or undefined when calling getAccountNft.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.unanchored !== undefined) {
            queryParameters['unanchored'] = requestParameters.unanchored;
        }

        if (requestParameters.untilBlock !== undefined) {
            queryParameters['until_block'] = requestParameters.untilBlock;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/address/{principal}/nft_events`.replace(`{${"principal"}}`, encodeURIComponent(String(requestParameters.principal))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressNftListResponseFromJSON(jsonValue));
    }

    /**
     * **NOTE:** This endpoint is deprecated in favor of [Non-Fungible Token holdings](#operation/get_nft_holdings).  Retrieves a list of all nfts owned by an address, contains the clarity value of the identifier of the nft. 
     * Get nft events
     */
    async getAccountNft(requestParameters: GetAccountNftRequest, initOverrides?: RequestInit): Promise<AddressNftListResponse> {
        const response = await this.getAccountNftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the latest nonce values used by an account by inspecting the mempool, microblock transactions, and anchored transactions.
     * Get the latest nonce used by an account
     */
    async getAccountNoncesRaw(requestParameters: GetAccountNoncesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AddressNonces>> {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal','Required parameter requestParameters.principal was null or undefined when calling getAccountNonces.');
        }

        const queryParameters: any = {};

        if (requestParameters.blockHeight !== undefined) {
            queryParameters['block_height'] = requestParameters.blockHeight;
        }

        if (requestParameters.blockHash !== undefined) {
            queryParameters['block_hash'] = requestParameters.blockHash;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/address/{principal}/nonces`.replace(`{${"principal"}}`, encodeURIComponent(String(requestParameters.principal))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressNoncesFromJSON(jsonValue));
    }

    /**
     * Retrieves the latest nonce values used by an account by inspecting the mempool, microblock transactions, and anchored transactions.
     * Get the latest nonce used by an account
     */
    async getAccountNonces(requestParameters: GetAccountNoncesRequest, initOverrides?: RequestInit): Promise<AddressNonces> {
        const response = await this.getAccountNoncesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves STX token balance for a given Address or Contract Identifier.
     * Get account STX balance
     */
    async getAccountStxBalanceRaw(requestParameters: GetAccountStxBalanceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal','Required parameter requestParameters.principal was null or undefined when calling getAccountStxBalance.');
        }

        const queryParameters: any = {};

        if (requestParameters.unanchored !== undefined) {
            queryParameters['unanchored'] = requestParameters.unanchored;
        }

        if (requestParameters.untilBlock !== undefined) {
            queryParameters['until_block'] = requestParameters.untilBlock;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/address/{principal}/stx`.replace(`{${"principal"}}`, encodeURIComponent(String(requestParameters.principal))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieves STX token balance for a given Address or Contract Identifier.
     * Get account STX balance
     */
    async getAccountStxBalance(requestParameters: GetAccountStxBalanceRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.getAccountStxBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of all Transactions for a given Address or Contract Identifier. More information on Transaction types can be found [here](https://docs.stacks.co/understand-stacks/transactions#types).  If you need to actively monitor new transactions for an address or contract id, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates. 
     * Get account transactions
     */
    async getAccountTransactionsRaw(requestParameters: GetAccountTransactionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AddressTransactionsListResponse>> {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal','Required parameter requestParameters.principal was null or undefined when calling getAccountTransactions.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.unanchored !== undefined) {
            queryParameters['unanchored'] = requestParameters.unanchored;
        }

        if (requestParameters.untilBlock !== undefined) {
            queryParameters['until_block'] = requestParameters.untilBlock;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/address/{principal}/transactions`.replace(`{${"principal"}}`, encodeURIComponent(String(requestParameters.principal))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressTransactionsListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of all Transactions for a given Address or Contract Identifier. More information on Transaction types can be found [here](https://docs.stacks.co/understand-stacks/transactions#types).  If you need to actively monitor new transactions for an address or contract id, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates. 
     * Get account transactions
     */
    async getAccountTransactions(requestParameters: GetAccountTransactionsRequest, initOverrides?: RequestInit): Promise<AddressTransactionsListResponse> {
        const response = await this.getAccountTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all transactions for an account or contract identifier including STX transfers for each transaction.
     * Get account transactions including STX transfers for each transaction.
     */
    async getAccountTransactionsWithTransfersRaw(requestParameters: GetAccountTransactionsWithTransfersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AddressTransactionsWithTransfersListResponse>> {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal','Required parameter requestParameters.principal was null or undefined when calling getAccountTransactionsWithTransfers.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.unanchored !== undefined) {
            queryParameters['unanchored'] = requestParameters.unanchored;
        }

        if (requestParameters.untilBlock !== undefined) {
            queryParameters['until_block'] = requestParameters.untilBlock;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/address/{principal}/transactions_with_transfers`.replace(`{${"principal"}}`, encodeURIComponent(String(requestParameters.principal))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressTransactionsWithTransfersListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all transactions for an account or contract identifier including STX transfers for each transaction.
     * Get account transactions including STX transfers for each transaction.
     */
    async getAccountTransactionsWithTransfers(requestParameters: GetAccountTransactionsWithTransfersRequest, initOverrides?: RequestInit): Promise<AddressTransactionsWithTransfersListResponse> {
        const response = await this.getAccountTransactionsWithTransfersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves transaction details for a given Transaction Id `tx_id`, for a given account or contract Identifier.
     * Get account transaction information for specific transaction
     */
    async getSingleTransactionWithTransfersRaw(requestParameters: GetSingleTransactionWithTransfersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AddressTransactionWithTransfers>> {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal','Required parameter requestParameters.principal was null or undefined when calling getSingleTransactionWithTransfers.');
        }

        if (requestParameters.txId === null || requestParameters.txId === undefined) {
            throw new runtime.RequiredError('txId','Required parameter requestParameters.txId was null or undefined when calling getSingleTransactionWithTransfers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/address/{principal}/{tx_id}/with_transfers`.replace(`{${"principal"}}`, encodeURIComponent(String(requestParameters.principal))).replace(`{${"tx_id"}}`, encodeURIComponent(String(requestParameters.txId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressTransactionWithTransfersFromJSON(jsonValue));
    }

    /**
     * Retrieves transaction details for a given Transaction Id `tx_id`, for a given account or contract Identifier.
     * Get account transaction information for specific transaction
     */
    async getSingleTransactionWithTransfers(requestParameters: GetSingleTransactionWithTransfersRequest, initOverrides?: RequestInit): Promise<AddressTransactionWithTransfers> {
        const response = await this.getSingleTransactionWithTransfersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

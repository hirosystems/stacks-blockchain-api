/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BurnBlock,
    BurnBlockFromJSON,
    BurnBlockToJSON,
    BurnBlockListResponse,
    BurnBlockListResponseFromJSON,
    BurnBlockListResponseToJSON,
} from '../models';

export interface GetBurnBlockRequest {
    heightOrHash: number | string;
}

export interface GetBurnBlocksRequest {
    limit?: number;
    offset?: number;
}

/**
 * BurnBlocksApi - interface
 * 
 * @export
 * @interface BurnBlocksApiInterface
 */
export interface BurnBlocksApiInterface {
    /**
     * Retrieves a single burn block
     * @summary Get burn block
     * @param {number | string} heightOrHash filter by burn block height, hash, or the constant &#x60;latest&#x60; to filter for the most recent burn block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BurnBlocksApiInterface
     */
    getBurnBlockRaw(requestParameters: GetBurnBlockRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BurnBlock>>;

    /**
     * Retrieves a single burn block
     * Get burn block
     */
    getBurnBlock(requestParameters: GetBurnBlockRequest, initOverrides?: RequestInit): Promise<BurnBlock>;

    /**
     * Retrieves a list of recent burn blocks 
     * @summary Get burn blocks
     * @param {number} [limit] max number of burn blocks to fetch
     * @param {number} [offset] index of first burn block to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BurnBlocksApiInterface
     */
    getBurnBlocksRaw(requestParameters: GetBurnBlocksRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BurnBlockListResponse>>;

    /**
     * Retrieves a list of recent burn blocks 
     * Get burn blocks
     */
    getBurnBlocks(requestParameters: GetBurnBlocksRequest, initOverrides?: RequestInit): Promise<BurnBlockListResponse>;

}

/**
 * 
 */
export class BurnBlocksApi extends runtime.BaseAPI implements BurnBlocksApiInterface {

    /**
     * Retrieves a single burn block
     * Get burn block
     */
    async getBurnBlockRaw(requestParameters: GetBurnBlockRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BurnBlock>> {
        if (requestParameters.heightOrHash === null || requestParameters.heightOrHash === undefined) {
            throw new runtime.RequiredError('heightOrHash','Required parameter requestParameters.heightOrHash was null or undefined when calling getBurnBlock.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v2/burn-blocks/{height_or_hash}`.replace(`{${"height_or_hash"}}`, encodeURIComponent(String(requestParameters.heightOrHash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BurnBlockFromJSON(jsonValue));
    }

    /**
     * Retrieves a single burn block
     * Get burn block
     */
    async getBurnBlock(requestParameters: GetBurnBlockRequest, initOverrides?: RequestInit): Promise<BurnBlock> {
        const response = await this.getBurnBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of recent burn blocks 
     * Get burn blocks
     */
    async getBurnBlocksRaw(requestParameters: GetBurnBlocksRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BurnBlockListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v2/burn-blocks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BurnBlockListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of recent burn blocks 
     * Get burn blocks
     */
    async getBurnBlocks(requestParameters: GetBurnBlocksRequest, initOverrides?: RequestInit): Promise<BurnBlockListResponse> {
        const response = await this.getBurnBlocksRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

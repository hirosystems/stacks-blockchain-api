/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FeeRate,
    FeeRateFromJSON,
    FeeRateToJSON,
    FeeRateRequest,
    FeeRateRequestFromJSON,
    FeeRateRequestToJSON,
    TransactionFeeEstimateRequest,
    TransactionFeeEstimateRequestFromJSON,
    TransactionFeeEstimateRequestToJSON,
    TransactionFeeEstimateResponse,
    TransactionFeeEstimateResponseFromJSON,
    TransactionFeeEstimateResponseToJSON,
} from '../models';

export interface FetchFeeRateRequest {
    feeRateRequest: FeeRateRequest;
}

export interface PostFeeTransactionRequest {
    transactionFeeEstimateRequest?: TransactionFeeEstimateRequest;
}

/**
 * FeesApi - interface
 * 
 * @export
 * @interface FeesApiInterface
 */
export interface FeesApiInterface {
    /**
     * **NOTE:** This endpoint is deprecated in favor of [Get approximate fees for a given transaction](#operation/post_fee_transaction).  Retrieves estimated fee rate. 
     * @summary Fetch fee rate
     * @param {FeeRateRequest} feeRateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeesApiInterface
     */
    fetchFeeRateRaw(requestParameters: FetchFeeRateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FeeRate>>;

    /**
     * **NOTE:** This endpoint is deprecated in favor of [Get approximate fees for a given transaction](#operation/post_fee_transaction).  Retrieves estimated fee rate. 
     * Fetch fee rate
     */
    fetchFeeRate(requestParameters: FetchFeeRateRequest, initOverrides?: RequestInit): Promise<FeeRate>;

    /**
     * Retrieves an estimated fee rate for STX transfer transactions. This a a fee rate / byte, and is returned as a JSON integer
     * @summary Get estimated fee
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeesApiInterface
     */
    getFeeTransferRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>>;

    /**
     * Retrieves an estimated fee rate for STX transfer transactions. This a a fee rate / byte, and is returned as a JSON integer
     * Get estimated fee
     */
    getFeeTransfer(initOverrides?: RequestInit): Promise<object>;

    /**
     * Get an estimated fee for the supplied transaction.  This estimates the execution cost of the transaction, the current fee rate of the network, and returns estimates for fee amounts. * `transaction_payload` is a hex-encoded serialization of   the TransactionPayload for the transaction. * `estimated_len` is an optional argument that provides the   endpoint with an estimation of the final length (in bytes)   of the transaction, including any post-conditions and   signatures If the node cannot provide an estimate for the transaction (e.g., if the node has never seen a contract-call for the given contract and function) or if estimation is not configured on this node, a 400 response is returned. The 400 response will be a JSON error containing a `reason` field which can be one of the following: * `DatabaseError` - this Stacks node has had an internal   database error while trying to estimate the costs of the   supplied transaction. * `NoEstimateAvailable` - this Stacks node has not seen this   kind of contract-call before, and it cannot provide an   estimate yet. * `CostEstimationDisabled` - this Stacks node does not perform   fee or cost estimation, and it cannot respond on this   endpoint. The 200 response contains the following data: * `estimated_cost` - the estimated multi-dimensional cost of   executing the Clarity VM on the provided transaction. * `estimated_cost_scalar` - a unitless integer that the Stacks   node uses to compare how much of the block limit is consumed   by different transactions. This value incorporates the   estimated length of the transaction and the estimated   execution cost of the transaction. The range of this integer   may vary between different Stacks nodes. In order to compute   an estimate of total fee amount for the transaction, this   value is multiplied by the same Stacks node\'s estimated fee   rate. * `cost_scalar_change_by_byte` - a float value that indicates how   much the `estimated_cost_scalar` value would increase for every   additional byte in the final transaction. * `estimations` - an array of estimated fee rates and total fees to   pay in microSTX for the transaction. This array provides a range of   estimates (default: 3) that may be used. Each element of the array   contains the following fields:     * `fee_rate` - the estimated value for the current fee       rates in the network     * `fee` - the estimated value for the total fee in       microSTX that the given transaction should pay. These       values are the result of computing:       `fee_rate` x `estimated_cost_scalar`.       If the estimated fees are less than the minimum relay       fee `(1 ustx x estimated_len)`, then that minimum relay       fee will be returned here instead. Note: If the final transaction\'s byte size is larger than supplied to `estimated_len`, then applications should increase this fee amount by:   `fee_rate` x `cost_scalar_change_by_byte` x (`final_size` - `estimated_size`) 
     * @summary Get approximate fees for a given transaction
     * @param {TransactionFeeEstimateRequest} [transactionFeeEstimateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeesApiInterface
     */
    postFeeTransactionRaw(requestParameters: PostFeeTransactionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TransactionFeeEstimateResponse>>;

    /**
     * Get an estimated fee for the supplied transaction.  This estimates the execution cost of the transaction, the current fee rate of the network, and returns estimates for fee amounts. * `transaction_payload` is a hex-encoded serialization of   the TransactionPayload for the transaction. * `estimated_len` is an optional argument that provides the   endpoint with an estimation of the final length (in bytes)   of the transaction, including any post-conditions and   signatures If the node cannot provide an estimate for the transaction (e.g., if the node has never seen a contract-call for the given contract and function) or if estimation is not configured on this node, a 400 response is returned. The 400 response will be a JSON error containing a `reason` field which can be one of the following: * `DatabaseError` - this Stacks node has had an internal   database error while trying to estimate the costs of the   supplied transaction. * `NoEstimateAvailable` - this Stacks node has not seen this   kind of contract-call before, and it cannot provide an   estimate yet. * `CostEstimationDisabled` - this Stacks node does not perform   fee or cost estimation, and it cannot respond on this   endpoint. The 200 response contains the following data: * `estimated_cost` - the estimated multi-dimensional cost of   executing the Clarity VM on the provided transaction. * `estimated_cost_scalar` - a unitless integer that the Stacks   node uses to compare how much of the block limit is consumed   by different transactions. This value incorporates the   estimated length of the transaction and the estimated   execution cost of the transaction. The range of this integer   may vary between different Stacks nodes. In order to compute   an estimate of total fee amount for the transaction, this   value is multiplied by the same Stacks node\'s estimated fee   rate. * `cost_scalar_change_by_byte` - a float value that indicates how   much the `estimated_cost_scalar` value would increase for every   additional byte in the final transaction. * `estimations` - an array of estimated fee rates and total fees to   pay in microSTX for the transaction. This array provides a range of   estimates (default: 3) that may be used. Each element of the array   contains the following fields:     * `fee_rate` - the estimated value for the current fee       rates in the network     * `fee` - the estimated value for the total fee in       microSTX that the given transaction should pay. These       values are the result of computing:       `fee_rate` x `estimated_cost_scalar`.       If the estimated fees are less than the minimum relay       fee `(1 ustx x estimated_len)`, then that minimum relay       fee will be returned here instead. Note: If the final transaction\'s byte size is larger than supplied to `estimated_len`, then applications should increase this fee amount by:   `fee_rate` x `cost_scalar_change_by_byte` x (`final_size` - `estimated_size`) 
     * Get approximate fees for a given transaction
     */
    postFeeTransaction(requestParameters: PostFeeTransactionRequest, initOverrides?: RequestInit): Promise<TransactionFeeEstimateResponse>;

}

/**
 * 
 */
export class FeesApi extends runtime.BaseAPI implements FeesApiInterface {

    /**
     * **NOTE:** This endpoint is deprecated in favor of [Get approximate fees for a given transaction](#operation/post_fee_transaction).  Retrieves estimated fee rate. 
     * Fetch fee rate
     */
    async fetchFeeRateRaw(requestParameters: FetchFeeRateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FeeRate>> {
        if (requestParameters.feeRateRequest === null || requestParameters.feeRateRequest === undefined) {
            throw new runtime.RequiredError('feeRateRequest','Required parameter requestParameters.feeRateRequest was null or undefined when calling fetchFeeRate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/extended/v1/fee_rate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FeeRateRequestToJSON(requestParameters.feeRateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeeRateFromJSON(jsonValue));
    }

    /**
     * **NOTE:** This endpoint is deprecated in favor of [Get approximate fees for a given transaction](#operation/post_fee_transaction).  Retrieves estimated fee rate. 
     * Fetch fee rate
     */
    async fetchFeeRate(requestParameters: FetchFeeRateRequest, initOverrides?: RequestInit): Promise<FeeRate> {
        const response = await this.fetchFeeRateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves an estimated fee rate for STX transfer transactions. This a a fee rate / byte, and is returned as a JSON integer
     * Get estimated fee
     */
    async getFeeTransferRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/fees/transfer`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieves an estimated fee rate for STX transfer transactions. This a a fee rate / byte, and is returned as a JSON integer
     * Get estimated fee
     */
    async getFeeTransfer(initOverrides?: RequestInit): Promise<object> {
        const response = await this.getFeeTransferRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get an estimated fee for the supplied transaction.  This estimates the execution cost of the transaction, the current fee rate of the network, and returns estimates for fee amounts. * `transaction_payload` is a hex-encoded serialization of   the TransactionPayload for the transaction. * `estimated_len` is an optional argument that provides the   endpoint with an estimation of the final length (in bytes)   of the transaction, including any post-conditions and   signatures If the node cannot provide an estimate for the transaction (e.g., if the node has never seen a contract-call for the given contract and function) or if estimation is not configured on this node, a 400 response is returned. The 400 response will be a JSON error containing a `reason` field which can be one of the following: * `DatabaseError` - this Stacks node has had an internal   database error while trying to estimate the costs of the   supplied transaction. * `NoEstimateAvailable` - this Stacks node has not seen this   kind of contract-call before, and it cannot provide an   estimate yet. * `CostEstimationDisabled` - this Stacks node does not perform   fee or cost estimation, and it cannot respond on this   endpoint. The 200 response contains the following data: * `estimated_cost` - the estimated multi-dimensional cost of   executing the Clarity VM on the provided transaction. * `estimated_cost_scalar` - a unitless integer that the Stacks   node uses to compare how much of the block limit is consumed   by different transactions. This value incorporates the   estimated length of the transaction and the estimated   execution cost of the transaction. The range of this integer   may vary between different Stacks nodes. In order to compute   an estimate of total fee amount for the transaction, this   value is multiplied by the same Stacks node\'s estimated fee   rate. * `cost_scalar_change_by_byte` - a float value that indicates how   much the `estimated_cost_scalar` value would increase for every   additional byte in the final transaction. * `estimations` - an array of estimated fee rates and total fees to   pay in microSTX for the transaction. This array provides a range of   estimates (default: 3) that may be used. Each element of the array   contains the following fields:     * `fee_rate` - the estimated value for the current fee       rates in the network     * `fee` - the estimated value for the total fee in       microSTX that the given transaction should pay. These       values are the result of computing:       `fee_rate` x `estimated_cost_scalar`.       If the estimated fees are less than the minimum relay       fee `(1 ustx x estimated_len)`, then that minimum relay       fee will be returned here instead. Note: If the final transaction\'s byte size is larger than supplied to `estimated_len`, then applications should increase this fee amount by:   `fee_rate` x `cost_scalar_change_by_byte` x (`final_size` - `estimated_size`) 
     * Get approximate fees for a given transaction
     */
    async postFeeTransactionRaw(requestParameters: PostFeeTransactionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TransactionFeeEstimateResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/fees/transaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionFeeEstimateRequestToJSON(requestParameters.transactionFeeEstimateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionFeeEstimateResponseFromJSON(jsonValue));
    }

    /**
     * Get an estimated fee for the supplied transaction.  This estimates the execution cost of the transaction, the current fee rate of the network, and returns estimates for fee amounts. * `transaction_payload` is a hex-encoded serialization of   the TransactionPayload for the transaction. * `estimated_len` is an optional argument that provides the   endpoint with an estimation of the final length (in bytes)   of the transaction, including any post-conditions and   signatures If the node cannot provide an estimate for the transaction (e.g., if the node has never seen a contract-call for the given contract and function) or if estimation is not configured on this node, a 400 response is returned. The 400 response will be a JSON error containing a `reason` field which can be one of the following: * `DatabaseError` - this Stacks node has had an internal   database error while trying to estimate the costs of the   supplied transaction. * `NoEstimateAvailable` - this Stacks node has not seen this   kind of contract-call before, and it cannot provide an   estimate yet. * `CostEstimationDisabled` - this Stacks node does not perform   fee or cost estimation, and it cannot respond on this   endpoint. The 200 response contains the following data: * `estimated_cost` - the estimated multi-dimensional cost of   executing the Clarity VM on the provided transaction. * `estimated_cost_scalar` - a unitless integer that the Stacks   node uses to compare how much of the block limit is consumed   by different transactions. This value incorporates the   estimated length of the transaction and the estimated   execution cost of the transaction. The range of this integer   may vary between different Stacks nodes. In order to compute   an estimate of total fee amount for the transaction, this   value is multiplied by the same Stacks node\'s estimated fee   rate. * `cost_scalar_change_by_byte` - a float value that indicates how   much the `estimated_cost_scalar` value would increase for every   additional byte in the final transaction. * `estimations` - an array of estimated fee rates and total fees to   pay in microSTX for the transaction. This array provides a range of   estimates (default: 3) that may be used. Each element of the array   contains the following fields:     * `fee_rate` - the estimated value for the current fee       rates in the network     * `fee` - the estimated value for the total fee in       microSTX that the given transaction should pay. These       values are the result of computing:       `fee_rate` x `estimated_cost_scalar`.       If the estimated fees are less than the minimum relay       fee `(1 ustx x estimated_len)`, then that minimum relay       fee will be returned here instead. Note: If the final transaction\'s byte size is larger than supplied to `estimated_len`, then applications should increase this fee amount by:   `fee_rate` x `cost_scalar_change_by_byte` x (`final_size` - `estimated_size`) 
     * Get approximate fees for a given transaction
     */
    async postFeeTransaction(requestParameters: PostFeeTransactionRequest, initOverrides?: RequestInit): Promise<TransactionFeeEstimateResponse> {
        const response = await this.postFeeTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

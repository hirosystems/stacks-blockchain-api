/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FungibleTokenMetadata,
    FungibleTokenMetadataFromJSON,
    FungibleTokenMetadataToJSON,
    FungibleTokensMetadataList,
    FungibleTokensMetadataListFromJSON,
    FungibleTokensMetadataListToJSON,
} from '../models';

export interface GetContractFtMetadataRequest {
    contractId: string;
}

export interface GetFtMetadataListRequest {
    limit?: number;
    offset?: number;
}

/**
 * FungibleTokensApi - interface
 * 
 * @export
 * @interface FungibleTokensApiInterface
 */
export interface FungibleTokensApiInterface {
    /**
     * **NOTE:** This endpoint is deprecated in favor of the [Token Metadata Service](https://github.com/hirosystems/token-metadata-service).  Retrieves the metadata for fungible tokens for a given contract id 
     * @summary Fungible tokens metadata for contract id
     * @param {string} contractId token\&#39;s contract id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FungibleTokensApiInterface
     */
    getContractFtMetadataRaw(requestParameters: GetContractFtMetadataRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FungibleTokenMetadata>>;

    /**
     * **NOTE:** This endpoint is deprecated in favor of the [Token Metadata Service](https://github.com/hirosystems/token-metadata-service).  Retrieves the metadata for fungible tokens for a given contract id 
     * Fungible tokens metadata for contract id
     */
    getContractFtMetadata(requestParameters: GetContractFtMetadataRequest, initOverrides?: RequestInit): Promise<FungibleTokenMetadata>;

    /**
     * **NOTE:** This endpoint is deprecated in favor of the [Token Metadata Service](https://github.com/hirosystems/token-metadata-service).  Retrieves list of fungible tokens with their metadata. More information on Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#fungible-tokens). 
     * @summary Fungible tokens metadata list
     * @param {number} [limit] max number of tokens to fetch.
     * @param {number} [offset] index of first tokens to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FungibleTokensApiInterface
     */
    getFtMetadataListRaw(requestParameters: GetFtMetadataListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FungibleTokensMetadataList>>;

    /**
     * **NOTE:** This endpoint is deprecated in favor of the [Token Metadata Service](https://github.com/hirosystems/token-metadata-service).  Retrieves list of fungible tokens with their metadata. More information on Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#fungible-tokens). 
     * Fungible tokens metadata list
     */
    getFtMetadataList(requestParameters: GetFtMetadataListRequest, initOverrides?: RequestInit): Promise<FungibleTokensMetadataList>;

}

/**
 * 
 */
export class FungibleTokensApi extends runtime.BaseAPI implements FungibleTokensApiInterface {

    /**
     * **NOTE:** This endpoint is deprecated in favor of the [Token Metadata Service](https://github.com/hirosystems/token-metadata-service).  Retrieves the metadata for fungible tokens for a given contract id 
     * Fungible tokens metadata for contract id
     */
    async getContractFtMetadataRaw(requestParameters: GetContractFtMetadataRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FungibleTokenMetadata>> {
        if (requestParameters.contractId === null || requestParameters.contractId === undefined) {
            throw new runtime.RequiredError('contractId','Required parameter requestParameters.contractId was null or undefined when calling getContractFtMetadata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/tokens/{contractId}/ft/metadata`.replace(`{${"contractId"}}`, encodeURIComponent(String(requestParameters.contractId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FungibleTokenMetadataFromJSON(jsonValue));
    }

    /**
     * **NOTE:** This endpoint is deprecated in favor of the [Token Metadata Service](https://github.com/hirosystems/token-metadata-service).  Retrieves the metadata for fungible tokens for a given contract id 
     * Fungible tokens metadata for contract id
     */
    async getContractFtMetadata(requestParameters: GetContractFtMetadataRequest, initOverrides?: RequestInit): Promise<FungibleTokenMetadata> {
        const response = await this.getContractFtMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * **NOTE:** This endpoint is deprecated in favor of the [Token Metadata Service](https://github.com/hirosystems/token-metadata-service).  Retrieves list of fungible tokens with their metadata. More information on Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#fungible-tokens). 
     * Fungible tokens metadata list
     */
    async getFtMetadataListRaw(requestParameters: GetFtMetadataListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FungibleTokensMetadataList>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/tokens/ft/metadata`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FungibleTokensMetadataListFromJSON(jsonValue));
    }

    /**
     * **NOTE:** This endpoint is deprecated in favor of the [Token Metadata Service](https://github.com/hirosystems/token-metadata-service).  Retrieves list of fungible tokens with their metadata. More information on Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#fungible-tokens). 
     * Fungible tokens metadata list
     */
    async getFtMetadataList(requestParameters: GetFtMetadataListRequest, initOverrides?: RequestInit): Promise<FungibleTokensMetadataList> {
        const response = await this.getFtMetadataListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CoreNodeInfoResponse,
    CoreNodeInfoResponseFromJSON,
    CoreNodeInfoResponseToJSON,
    CoreNodePoxResponse,
    CoreNodePoxResponseFromJSON,
    CoreNodePoxResponseToJSON,
    GetStxSupplyLegacyFormatResponse,
    GetStxSupplyLegacyFormatResponseFromJSON,
    GetStxSupplyLegacyFormatResponseToJSON,
    GetStxSupplyResponse,
    GetStxSupplyResponseFromJSON,
    GetStxSupplyResponseToJSON,
    NetworkBlockTimeResponse,
    NetworkBlockTimeResponseFromJSON,
    NetworkBlockTimeResponseToJSON,
    NetworkBlockTimesResponse,
    NetworkBlockTimesResponseFromJSON,
    NetworkBlockTimesResponseToJSON,
    ServerStatusResponse,
    ServerStatusResponseFromJSON,
    ServerStatusResponseToJSON,
} from '../models';

export interface GetNetworkBlockTimeByNetworkRequest {
    network: GetNetworkBlockTimeByNetworkNetworkEnum;
}

export interface GetStxSupplyRequest {
    height?: number;
}

export interface GetTotalStxSupplyLegacyFormatRequest {
    height?: number;
}

/**
 * InfoApi - interface
 * 
 * @export
 * @interface InfoApiInterface
 */
export interface InfoApiInterface {
    /**
     * Retrieves information about the Core API including the server version
     * @summary Get Core API info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    getCoreApiInfoRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<CoreNodeInfoResponse>>;

    /**
     * Retrieves information about the Core API including the server version
     * Get Core API info
     */
    getCoreApiInfo(initOverrides?: RequestInit): Promise<CoreNodeInfoResponse>;

    /**
     * Retrieves the target block time for a given network. The network can be mainnet or testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
     * @summary Get a given network\'s target block time
     * @param {'testnet' | 'mainnet'} network the target block time for a given network (testnet, mainnet).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    getNetworkBlockTimeByNetworkRaw(requestParameters: GetNetworkBlockTimeByNetworkRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NetworkBlockTimeResponse>>;

    /**
     * Retrieves the target block time for a given network. The network can be mainnet or testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
     * Get a given network\'s target block time
     */
    getNetworkBlockTimeByNetwork(requestParameters: GetNetworkBlockTimeByNetworkRequest, initOverrides?: RequestInit): Promise<NetworkBlockTimeResponse>;

    /**
     * Retrieves the target block times for mainnet and testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
     * @summary Get the network target block time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    getNetworkBlockTimesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<NetworkBlockTimesResponse>>;

    /**
     * Retrieves the target block times for mainnet and testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
     * Get the network target block time
     */
    getNetworkBlockTimes(initOverrides?: RequestInit): Promise<NetworkBlockTimesResponse>;

    /**
     * Retrieves Proof-of-Transfer (PoX) information. Can be used for Stacking.
     * @summary Get Proof-of-Transfer details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    getPoxInfoRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<CoreNodePoxResponse>>;

    /**
     * Retrieves Proof-of-Transfer (PoX) information. Can be used for Stacking.
     * Get Proof-of-Transfer details
     */
    getPoxInfo(initOverrides?: RequestInit): Promise<CoreNodePoxResponse>;

    /**
     * Retrieves the running status of the Stacks Blockchain API, including the server version and current chain tip information.
     * @summary API status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    getStatusRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<ServerStatusResponse>>;

    /**
     * Retrieves the running status of the Stacks Blockchain API, including the server version and current chain tip information.
     * API status
     */
    getStatus(initOverrides?: RequestInit): Promise<ServerStatusResponse>;

    /**
     * Retrieves the total and unlocked STX supply. More information on Stacking can be found [here] (https://docs.stacks.co/understand-stacks/stacking). **Note:** This uses the estimated future total supply for the year 2050. 
     * @summary Get total and unlocked STX supply
     * @param {number} [height] Supply details are queried from specified block height. If the block height is not specified, the latest block height is taken as default value. Note that the &#x60;block height&#x60; is referred to the stacks blockchain.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    getStxSupplyRaw(requestParameters: GetStxSupplyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetStxSupplyResponse>>;

    /**
     * Retrieves the total and unlocked STX supply. More information on Stacking can be found [here] (https://docs.stacks.co/understand-stacks/stacking). **Note:** This uses the estimated future total supply for the year 2050. 
     * Get total and unlocked STX supply
     */
    getStxSupply(requestParameters: GetStxSupplyRequest, initOverrides?: RequestInit): Promise<GetStxSupplyResponse>;

    /**
     * Retrieves the STX tokens currently in circulation that have been unlocked as plain text.
     * @summary Get circulating STX supply in plain text format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    getStxSupplyCirculatingPlainRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>>;

    /**
     * Retrieves the STX tokens currently in circulation that have been unlocked as plain text.
     * Get circulating STX supply in plain text format
     */
    getStxSupplyCirculatingPlain(initOverrides?: RequestInit): Promise<string>;

    /**
     * Retrieves the total supply for STX tokens as plain text. **Note:** this uses the estimated future total supply for the year 2050. 
     * @summary Get total STX supply in plain text format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    getStxSupplyTotalSupplyPlainRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>>;

    /**
     * Retrieves the total supply for STX tokens as plain text. **Note:** this uses the estimated future total supply for the year 2050. 
     * Get total STX supply in plain text format
     */
    getStxSupplyTotalSupplyPlain(initOverrides?: RequestInit): Promise<string>;

    /**
     * Retrieves total supply of STX tokens including those currently in circulation that have been unlocked. **Note:** this uses the estimated future total supply for the year 2050. 
     * @summary Get total and unlocked STX supply (results formatted the same as the legacy 1.0 API)
     * @param {number} [height] Supply details are queried from specified block height. If the block height is not specified, the latest block height is taken as default value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    getTotalStxSupplyLegacyFormatRaw(requestParameters: GetTotalStxSupplyLegacyFormatRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetStxSupplyLegacyFormatResponse>>;

    /**
     * Retrieves total supply of STX tokens including those currently in circulation that have been unlocked. **Note:** this uses the estimated future total supply for the year 2050. 
     * Get total and unlocked STX supply (results formatted the same as the legacy 1.0 API)
     */
    getTotalStxSupplyLegacyFormat(requestParameters: GetTotalStxSupplyLegacyFormatRequest, initOverrides?: RequestInit): Promise<GetStxSupplyLegacyFormatResponse>;

}

/**
 * 
 */
export class InfoApi extends runtime.BaseAPI implements InfoApiInterface {

    /**
     * Retrieves information about the Core API including the server version
     * Get Core API info
     */
    async getCoreApiInfoRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<CoreNodeInfoResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreNodeInfoResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves information about the Core API including the server version
     * Get Core API info
     */
    async getCoreApiInfo(initOverrides?: RequestInit): Promise<CoreNodeInfoResponse> {
        const response = await this.getCoreApiInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the target block time for a given network. The network can be mainnet or testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
     * Get a given network\'s target block time
     */
    async getNetworkBlockTimeByNetworkRaw(requestParameters: GetNetworkBlockTimeByNetworkRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NetworkBlockTimeResponse>> {
        if (requestParameters.network === null || requestParameters.network === undefined) {
            throw new runtime.RequiredError('network','Required parameter requestParameters.network was null or undefined when calling getNetworkBlockTimeByNetwork.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/info/network_block_time/{network}`.replace(`{${"network"}}`, encodeURIComponent(String(requestParameters.network))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NetworkBlockTimeResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the target block time for a given network. The network can be mainnet or testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
     * Get a given network\'s target block time
     */
    async getNetworkBlockTimeByNetwork(requestParameters: GetNetworkBlockTimeByNetworkRequest, initOverrides?: RequestInit): Promise<NetworkBlockTimeResponse> {
        const response = await this.getNetworkBlockTimeByNetworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the target block times for mainnet and testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
     * Get the network target block time
     */
    async getNetworkBlockTimesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<NetworkBlockTimesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/info/network_block_times`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NetworkBlockTimesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the target block times for mainnet and testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
     * Get the network target block time
     */
    async getNetworkBlockTimes(initOverrides?: RequestInit): Promise<NetworkBlockTimesResponse> {
        const response = await this.getNetworkBlockTimesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves Proof-of-Transfer (PoX) information. Can be used for Stacking.
     * Get Proof-of-Transfer details
     */
    async getPoxInfoRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<CoreNodePoxResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/pox`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreNodePoxResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves Proof-of-Transfer (PoX) information. Can be used for Stacking.
     * Get Proof-of-Transfer details
     */
    async getPoxInfo(initOverrides?: RequestInit): Promise<CoreNodePoxResponse> {
        const response = await this.getPoxInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the running status of the Stacks Blockchain API, including the server version and current chain tip information.
     * API status
     */
    async getStatusRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<ServerStatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServerStatusResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the running status of the Stacks Blockchain API, including the server version and current chain tip information.
     * API status
     */
    async getStatus(initOverrides?: RequestInit): Promise<ServerStatusResponse> {
        const response = await this.getStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the total and unlocked STX supply. More information on Stacking can be found [here] (https://docs.stacks.co/understand-stacks/stacking). **Note:** This uses the estimated future total supply for the year 2050. 
     * Get total and unlocked STX supply
     */
    async getStxSupplyRaw(requestParameters: GetStxSupplyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetStxSupplyResponse>> {
        const queryParameters: any = {};

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/stx_supply`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStxSupplyResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the total and unlocked STX supply. More information on Stacking can be found [here] (https://docs.stacks.co/understand-stacks/stacking). **Note:** This uses the estimated future total supply for the year 2050. 
     * Get total and unlocked STX supply
     */
    async getStxSupply(requestParameters: GetStxSupplyRequest, initOverrides?: RequestInit): Promise<GetStxSupplyResponse> {
        const response = await this.getStxSupplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the STX tokens currently in circulation that have been unlocked as plain text.
     * Get circulating STX supply in plain text format
     */
    async getStxSupplyCirculatingPlainRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/stx_supply/circulating/plain`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Retrieves the STX tokens currently in circulation that have been unlocked as plain text.
     * Get circulating STX supply in plain text format
     */
    async getStxSupplyCirculatingPlain(initOverrides?: RequestInit): Promise<string> {
        const response = await this.getStxSupplyCirculatingPlainRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the total supply for STX tokens as plain text. **Note:** this uses the estimated future total supply for the year 2050. 
     * Get total STX supply in plain text format
     */
    async getStxSupplyTotalSupplyPlainRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/stx_supply/total/plain`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Retrieves the total supply for STX tokens as plain text. **Note:** this uses the estimated future total supply for the year 2050. 
     * Get total STX supply in plain text format
     */
    async getStxSupplyTotalSupplyPlain(initOverrides?: RequestInit): Promise<string> {
        const response = await this.getStxSupplyTotalSupplyPlainRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves total supply of STX tokens including those currently in circulation that have been unlocked. **Note:** this uses the estimated future total supply for the year 2050. 
     * Get total and unlocked STX supply (results formatted the same as the legacy 1.0 API)
     */
    async getTotalStxSupplyLegacyFormatRaw(requestParameters: GetTotalStxSupplyLegacyFormatRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetStxSupplyLegacyFormatResponse>> {
        const queryParameters: any = {};

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/stx_supply/legacy_format`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStxSupplyLegacyFormatResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves total supply of STX tokens including those currently in circulation that have been unlocked. **Note:** this uses the estimated future total supply for the year 2050. 
     * Get total and unlocked STX supply (results formatted the same as the legacy 1.0 API)
     */
    async getTotalStxSupplyLegacyFormat(requestParameters: GetTotalStxSupplyLegacyFormatRequest, initOverrides?: RequestInit): Promise<GetStxSupplyLegacyFormatResponse> {
        const response = await this.getTotalStxSupplyLegacyFormatRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetNetworkBlockTimeByNetworkNetworkEnum {
    testnet = 'testnet',
    mainnet = 'mainnet'
}

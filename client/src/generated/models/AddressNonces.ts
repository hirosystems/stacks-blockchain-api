/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The latest nonce values used by an account by inspecting the mempool, microblock transactions, and anchored transactions
 * @export
 * @interface AddressNonces
 */
export interface AddressNonces {
    /**
     * The latest nonce found within mempool transactions sent by this address. Will be null if there are no current mempool transactions for this address.
     * @type {number}
     * @memberof AddressNonces
     */
    last_mempool_tx_nonce: number | null;
    /**
     * The latest nonce found within transactions sent by this address, including unanchored microblock transactions. Will be null if there are no current transactions for this address.
     * @type {number}
     * @memberof AddressNonces
     */
    last_executed_tx_nonce: number | null;
    /**
     * The likely nonce required for creating the next transaction, based on the last nonces seen by the API. This can be incorrect if the API's mempool or transactions aren't fully synchronized, even by a small amount, or if a previous transaction is still propagating through the Stacks blockchain network when this endpoint is called.
     * @type {number}
     * @memberof AddressNonces
     */
    possible_next_nonce: number;
    /**
     * Nonces that appear to be missing and likely causing a mempool transaction to be stuck.
     * @type {Array<number>}
     * @memberof AddressNonces
     */
    detected_missing_nonces: Array<number>;
    /**
     * Nonces currently in mempool for this address.
     * @type {Array<number>}
     * @memberof AddressNonces
     */
    detected_mempool_nonces?: Array<number>;
}

export function AddressNoncesFromJSON(json: any): AddressNonces {
    return AddressNoncesFromJSONTyped(json, false);
}

export function AddressNoncesFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddressNonces {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'last_mempool_tx_nonce': json['last_mempool_tx_nonce'],
        'last_executed_tx_nonce': json['last_executed_tx_nonce'],
        'possible_next_nonce': json['possible_next_nonce'],
        'detected_missing_nonces': json['detected_missing_nonces'],
        'detected_mempool_nonces': !exists(json, 'detected_mempool_nonces') ? undefined : json['detected_mempool_nonces'],
    };
}

export function AddressNoncesToJSON(value?: AddressNonces | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'last_mempool_tx_nonce': value.last_mempool_tx_nonce,
        'last_executed_tx_nonce': value.last_executed_tx_nonce,
        'possible_next_nonce': value.possible_next_nonce,
        'detected_missing_nonces': value.detected_missing_nonces,
        'detected_mempool_nonces': value.detected_mempool_nonces,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AddressTransactionWithTransfersFtTransfers,
    AddressTransactionWithTransfersFtTransfersFromJSON,
    AddressTransactionWithTransfersFtTransfersFromJSONTyped,
    AddressTransactionWithTransfersFtTransfersToJSON,
    AddressTransactionWithTransfersNftTransfers,
    AddressTransactionWithTransfersNftTransfersFromJSON,
    AddressTransactionWithTransfersNftTransfersFromJSONTyped,
    AddressTransactionWithTransfersNftTransfersToJSON,
    AddressTransactionWithTransfersStxTransfers,
    AddressTransactionWithTransfersStxTransfersFromJSON,
    AddressTransactionWithTransfersStxTransfersFromJSONTyped,
    AddressTransactionWithTransfersStxTransfersToJSON,
} from './';

/**
 * Transaction with STX transfers for a given address
 * @export
 * @interface AddressTransactionWithTransfers
 */
export interface AddressTransactionWithTransfers {
    /**
     * Describes all transaction types on Stacks 2.0 blockchain
     * @type {object}
     * @memberof AddressTransactionWithTransfers
     */
    tx: object;
    /**
     * Total sent from the given address, including the tx fee, in micro-STX as an integer string.
     * @type {string}
     * @memberof AddressTransactionWithTransfers
     */
    stx_sent: string;
    /**
     * Total received by the given address in micro-STX as an integer string.
     * @type {string}
     * @memberof AddressTransactionWithTransfers
     */
    stx_received: string;
    /**
     * 
     * @type {Array<AddressTransactionWithTransfersStxTransfers>}
     * @memberof AddressTransactionWithTransfers
     */
    stx_transfers: Array<AddressTransactionWithTransfersStxTransfers>;
    /**
     * 
     * @type {Array<AddressTransactionWithTransfersFtTransfers>}
     * @memberof AddressTransactionWithTransfers
     */
    ft_transfers?: Array<AddressTransactionWithTransfersFtTransfers>;
    /**
     * 
     * @type {Array<AddressTransactionWithTransfersNftTransfers>}
     * @memberof AddressTransactionWithTransfers
     */
    nft_transfers?: Array<AddressTransactionWithTransfersNftTransfers>;
}

export function AddressTransactionWithTransfersFromJSON(json: any): AddressTransactionWithTransfers {
    return AddressTransactionWithTransfersFromJSONTyped(json, false);
}

export function AddressTransactionWithTransfersFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddressTransactionWithTransfers {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'tx': json['tx'],
        'stx_sent': json['stx_sent'],
        'stx_received': json['stx_received'],
        'stx_transfers': ((json['stx_transfers'] as Array<any>).map(AddressTransactionWithTransfersStxTransfersFromJSON)),
        'ft_transfers': !exists(json, 'ft_transfers') ? undefined : ((json['ft_transfers'] as Array<any>).map(AddressTransactionWithTransfersFtTransfersFromJSON)),
        'nft_transfers': !exists(json, 'nft_transfers') ? undefined : ((json['nft_transfers'] as Array<any>).map(AddressTransactionWithTransfersNftTransfersFromJSON)),
    };
}

export function AddressTransactionWithTransfersToJSON(value?: AddressTransactionWithTransfers | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'tx': value.tx,
        'stx_sent': value.stx_sent,
        'stx_received': value.stx_received,
        'stx_transfers': ((value.stx_transfers as Array<any>).map(AddressTransactionWithTransfersStxTransfersToJSON)),
        'ft_transfers': value.ft_transfers === undefined ? undefined : ((value.ft_transfers as Array<any>).map(AddressTransactionWithTransfersFtTransfersToJSON)),
        'nft_transfers': value.nft_transfers === undefined ? undefined : ((value.nft_transfers as Array<any>).map(AddressTransactionWithTransfersNftTransfersToJSON)),
    };
}


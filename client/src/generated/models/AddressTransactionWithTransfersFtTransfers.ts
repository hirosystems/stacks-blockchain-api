/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AddressTransactionWithTransfersFtTransfers
 */
export interface AddressTransactionWithTransfersFtTransfers {
    /**
     * Fungible Token asset identifier.
     * @type {string}
     * @memberof AddressTransactionWithTransfersFtTransfers
     */
    asset_identifier: string;
    /**
     * Amount transferred as an integer string. This balance does not factor in possible SIP-010 decimals.
     * @type {string}
     * @memberof AddressTransactionWithTransfersFtTransfers
     */
    amount: string;
    /**
     * Principal that sent the asset.
     * @type {string}
     * @memberof AddressTransactionWithTransfersFtTransfers
     */
    sender?: string;
    /**
     * Principal that received the asset.
     * @type {string}
     * @memberof AddressTransactionWithTransfersFtTransfers
     */
    recipient?: string;
}

export function AddressTransactionWithTransfersFtTransfersFromJSON(json: any): AddressTransactionWithTransfersFtTransfers {
    return AddressTransactionWithTransfersFtTransfersFromJSONTyped(json, false);
}

export function AddressTransactionWithTransfersFtTransfersFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddressTransactionWithTransfersFtTransfers {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'asset_identifier': json['asset_identifier'],
        'amount': json['amount'],
        'sender': !exists(json, 'sender') ? undefined : json['sender'],
        'recipient': !exists(json, 'recipient') ? undefined : json['recipient'],
    };
}

export function AddressTransactionWithTransfersFtTransfersToJSON(value?: AddressTransactionWithTransfersFtTransfers | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'asset_identifier': value.asset_identifier,
        'amount': value.amount,
        'sender': value.sender,
        'recipient': value.recipient,
    };
}


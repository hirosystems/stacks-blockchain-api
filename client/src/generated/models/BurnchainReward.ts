/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Reward payment made on the burnchain
 * @export
 * @interface BurnchainReward
 */
export interface BurnchainReward {
    /**
     * Set to `true` if block corresponds to the canonical burchchain tip
     * @type {boolean}
     * @memberof BurnchainReward
     */
    canonical: boolean;
    /**
     * The hash representing the burnchain block
     * @type {string}
     * @memberof BurnchainReward
     */
    burn_block_hash: string;
    /**
     * Height of the burnchain block
     * @type {number}
     * @memberof BurnchainReward
     */
    burn_block_height: number;
    /**
     * The total amount of burnchain tokens burned for this burnchain block, in the smallest unit (e.g. satoshis for Bitcoin)
     * @type {string}
     * @memberof BurnchainReward
     */
    burn_amount: string;
    /**
     * The recipient address that received the burnchain rewards, in the format native to the burnchain (e.g. B58 encoded for Bitcoin)
     * @type {string}
     * @memberof BurnchainReward
     */
    reward_recipient: string;
    /**
     * The amount of burnchain tokens rewarded to the recipient, in the smallest unit (e.g. satoshis for Bitcoin)
     * @type {string}
     * @memberof BurnchainReward
     */
    reward_amount: string;
    /**
     * The index position of the reward entry, useful for ordering when there's more than one recipient per burnchain block
     * @type {number}
     * @memberof BurnchainReward
     */
    reward_index: number;
}

export function BurnchainRewardFromJSON(json: any): BurnchainReward {
    return BurnchainRewardFromJSONTyped(json, false);
}

export function BurnchainRewardFromJSONTyped(json: any, ignoreDiscriminator: boolean): BurnchainReward {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'canonical': json['canonical'],
        'burn_block_hash': json['burn_block_hash'],
        'burn_block_height': json['burn_block_height'],
        'burn_amount': json['burn_amount'],
        'reward_recipient': json['reward_recipient'],
        'reward_amount': json['reward_amount'],
        'reward_index': json['reward_index'],
    };
}

export function BurnchainRewardToJSON(value?: BurnchainReward | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'canonical': value.canonical,
        'burn_block_hash': value.burn_block_hash,
        'burn_block_height': value.burn_block_height,
        'burn_amount': value.burn_amount,
        'reward_recipient': value.reward_recipient,
        'reward_amount': value.reward_amount,
        'reward_index': value.reward_index,
    };
}


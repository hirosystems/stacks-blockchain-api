/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A inbound STX transfer with a memo
 * @export
 * @interface InboundStxTransfer
 */
export interface InboundStxTransfer {
    /**
     * Principal that sent this transfer
     * @type {string}
     * @memberof InboundStxTransfer
     */
    sender: string;
    /**
     * Transfer amount in micro-STX as integer string
     * @type {string}
     * @memberof InboundStxTransfer
     */
    amount: string;
    /**
     * Hex encoded memo bytes associated with the transfer
     * @type {string}
     * @memberof InboundStxTransfer
     */
    memo: string;
    /**
     * Block height at which this transfer occurred
     * @type {number}
     * @memberof InboundStxTransfer
     */
    block_height: number;
    /**
     * The transaction ID in which this transfer occurred
     * @type {string}
     * @memberof InboundStxTransfer
     */
    tx_id: string;
    /**
     * Indicates if the transfer is from a stx-transfer transaction or a contract-call transaction
     * @type {string}
     * @memberof InboundStxTransfer
     */
    transfer_type: InboundStxTransferTransferTypeEnum;
    /**
     * Index of the transaction within a block
     * @type {number}
     * @memberof InboundStxTransfer
     */
    tx_index: number;
}

/**
* @export
* @enum {string}
*/
export enum InboundStxTransferTransferTypeEnum {
    bulk_send = 'bulk-send',
    stx_transfer = 'stx-transfer',
    stx_transfer_memo = 'stx-transfer-memo'
}

export function InboundStxTransferFromJSON(json: any): InboundStxTransfer {
    return InboundStxTransferFromJSONTyped(json, false);
}

export function InboundStxTransferFromJSONTyped(json: any, ignoreDiscriminator: boolean): InboundStxTransfer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sender': json['sender'],
        'amount': json['amount'],
        'memo': json['memo'],
        'block_height': json['block_height'],
        'tx_id': json['tx_id'],
        'transfer_type': json['transfer_type'],
        'tx_index': json['tx_index'],
    };
}

export function InboundStxTransferToJSON(value?: InboundStxTransfer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sender': value.sender,
        'amount': value.amount,
        'memo': value.memo,
        'block_height': value.block_height,
        'tx_id': value.tx_id,
        'transfer_type': value.transfer_type,
        'tx_index': value.tx_index,
    };
}


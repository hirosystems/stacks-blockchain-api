/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A microblock
 * @export
 * @interface Microblock
 */
export interface Microblock {
    /**
     * Set to `true` if the microblock corresponds to the canonical chain tip.
     * @type {boolean}
     * @memberof Microblock
     */
    canonical: boolean;
    /**
     * Set to `true` if the microblock was not orphaned in a following anchor block. Defaults to `true` if the following anchor block has not yet been created.
     * @type {boolean}
     * @memberof Microblock
     */
    microblock_canonical: boolean;
    /**
     * The SHA512/256 hash of this microblock.
     * @type {string}
     * @memberof Microblock
     */
    microblock_hash: string;
    /**
     * A hint to describe how to order a set of microblocks. Starts at 0.
     * @type {number}
     * @memberof Microblock
     */
    microblock_sequence: number;
    /**
     * The SHA512/256 hash of the previous signed microblock in this stream.
     * @type {string}
     * @memberof Microblock
     */
    microblock_parent_hash: string;
    /**
     * The anchor block height that confirmed this microblock.
     * @type {number}
     * @memberof Microblock
     */
    block_height: number;
    /**
     * The height of the anchor block that preceded this microblock.
     * @type {number}
     * @memberof Microblock
     */
    parent_block_height: number;
    /**
     * The hash of the anchor block that preceded this microblock.
     * @type {string}
     * @memberof Microblock
     */
    parent_block_hash: string;
    /**
     * The hash of the Bitcoin block that preceded this microblock.
     * @type {string}
     * @memberof Microblock
     */
    parent_burn_block_hash: string;
    /**
     * The block timestamp of the Bitcoin block that preceded this microblock.
     * @type {number}
     * @memberof Microblock
     */
    parent_burn_block_time: number;
    /**
     * The ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) formatted block time of the bitcoin block that preceded this microblock.
     * @type {string}
     * @memberof Microblock
     */
    parent_burn_block_time_iso: string;
    /**
     * The height of the Bitcoin block that preceded this microblock.
     * @type {number}
     * @memberof Microblock
     */
    parent_burn_block_height: number;
    /**
     * The hash of the anchor block that confirmed this microblock. This wil be empty for unanchored microblocks
     * @type {string}
     * @memberof Microblock
     */
    block_hash: string | null;
    /**
     * List of transactions included in the microblock
     * @type {Array<string>}
     * @memberof Microblock
     */
    txs: Array<string>;
}

export function MicroblockFromJSON(json: any): Microblock {
    return MicroblockFromJSONTyped(json, false);
}

export function MicroblockFromJSONTyped(json: any, ignoreDiscriminator: boolean): Microblock {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'canonical': json['canonical'],
        'microblock_canonical': json['microblock_canonical'],
        'microblock_hash': json['microblock_hash'],
        'microblock_sequence': json['microblock_sequence'],
        'microblock_parent_hash': json['microblock_parent_hash'],
        'block_height': json['block_height'],
        'parent_block_height': json['parent_block_height'],
        'parent_block_hash': json['parent_block_hash'],
        'parent_burn_block_hash': json['parent_burn_block_hash'],
        'parent_burn_block_time': json['parent_burn_block_time'],
        'parent_burn_block_time_iso': json['parent_burn_block_time_iso'],
        'parent_burn_block_height': json['parent_burn_block_height'],
        'block_hash': json['block_hash'],
        'txs': json['txs'],
    };
}

export function MicroblockToJSON(value?: Microblock | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'canonical': value.canonical,
        'microblock_canonical': value.microblock_canonical,
        'microblock_hash': value.microblock_hash,
        'microblock_sequence': value.microblock_sequence,
        'microblock_parent_hash': value.microblock_parent_hash,
        'block_height': value.block_height,
        'parent_block_height': value.parent_block_height,
        'parent_block_hash': value.parent_block_hash,
        'parent_burn_block_hash': value.parent_burn_block_hash,
        'parent_burn_block_time': value.parent_burn_block_time,
        'parent_burn_block_time_iso': value.parent_burn_block_time_iso,
        'parent_burn_block_height': value.parent_burn_block_height,
        'block_hash': value.block_hash,
        'txs': value.txs,
    };
}


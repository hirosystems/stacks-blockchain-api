/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Currency is composed of a canonical Symbol and Decimals. This Decimals value is used to convert an Amount.Value from atomic units (Satoshis) to standard units (Bitcoins).
 * @export
 * @interface RosettaCurrency
 */
export interface RosettaCurrency {
    /**
     * Canonical symbol associated with a currency.
     * @type {string}
     * @memberof RosettaCurrency
     */
    symbol: string;
    /**
     * Number of decimal places in the standard unit representation of the amount. For example, BTC has 8 decimals. Note that it is not possible to represent the value of some currency in atomic units that is not base 10.
     * @type {number}
     * @memberof RosettaCurrency
     */
    decimals: number;
    /**
     * Any additional information related to the currency itself. For example, it would be useful to populate this object with the contract address of an ERC-20 token.
     * @type {object}
     * @memberof RosettaCurrency
     */
    metadata?: object;
}

export function RosettaCurrencyFromJSON(json: any): RosettaCurrency {
    return RosettaCurrencyFromJSONTyped(json, false);
}

export function RosettaCurrencyFromJSONTyped(json: any, ignoreDiscriminator: boolean): RosettaCurrency {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'symbol': json['symbol'],
        'decimals': json['decimals'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
    };
}

export function RosettaCurrencyToJSON(value?: RosettaCurrency | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'symbol': value.symbol,
        'decimals': value.decimals,
        'metadata': value.metadata,
    };
}


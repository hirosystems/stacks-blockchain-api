/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    RosettaErrorDetails,
    RosettaErrorDetailsFromJSON,
    RosettaErrorDetailsFromJSONTyped,
    RosettaErrorDetailsToJSON,
} from './';

/**
 * Instead of utilizing HTTP status codes to describe node errors (which often do not have a good analog), rich errors are returned using this object. Both the code and message fields can be individually used to correctly identify an error. Implementations MUST use unique values for both fields.
 * @export
 * @interface RosettaError
 */
export interface RosettaError {
    /**
     * Code is a network-specific error code. If desired, this code can be equivalent to an HTTP status code.
     * @type {number}
     * @memberof RosettaError
     */
    code: number;
    /**
     * Message is a network-specific error message. The message MUST NOT change for a given code. In particular, this means that any contextual information should be included in the details field.
     * @type {string}
     * @memberof RosettaError
     */
    message: string;
    /**
     * An error is retriable if the same request may succeed if submitted again.
     * @type {boolean}
     * @memberof RosettaError
     */
    retriable: boolean;
    /**
     * 
     * @type {RosettaErrorDetails}
     * @memberof RosettaError
     */
    details?: RosettaErrorDetails;
}

export function RosettaErrorFromJSON(json: any): RosettaError {
    return RosettaErrorFromJSONTyped(json, false);
}

export function RosettaErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): RosettaError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': json['code'],
        'message': json['message'],
        'retriable': json['retriable'],
        'details': !exists(json, 'details') ? undefined : RosettaErrorDetailsFromJSON(json['details']),
    };
}

export function RosettaErrorToJSON(value?: RosettaError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'message': value.message,
        'retriable': value.retriable,
        'details': RosettaErrorDetailsToJSON(value.details),
    };
}


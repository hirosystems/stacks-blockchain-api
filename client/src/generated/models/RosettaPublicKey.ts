/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * PublicKey contains a public key byte array for a particular CurveType encoded in hex. Note that there is no PrivateKey struct as this is NEVER the concern of an implementation.
 * @export
 * @interface RosettaPublicKey
 */
export interface RosettaPublicKey {
    /**
     * Hex-encoded public key bytes in the format specified by the CurveType.
     * @type {string}
     * @memberof RosettaPublicKey
     */
    hex_bytes: string;
    /**
     * CurveType is the type of cryptographic curve associated with a PublicKey.
     * @type {string}
     * @memberof RosettaPublicKey
     */
    curve_type: RosettaPublicKeyCurveTypeEnum;
}

/**
* @export
* @enum {string}
*/
export enum RosettaPublicKeyCurveTypeEnum {
    secp256k1 = 'secp256k1',
    edwards25519 = 'edwards25519'
}

export function RosettaPublicKeyFromJSON(json: any): RosettaPublicKey {
    return RosettaPublicKeyFromJSONTyped(json, false);
}

export function RosettaPublicKeyFromJSONTyped(json: any, ignoreDiscriminator: boolean): RosettaPublicKey {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hex_bytes': json['hex_bytes'],
        'curve_type': json['curve_type'],
    };
}

export function RosettaPublicKeyToJSON(value?: RosettaPublicKey | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hex_bytes': value.hex_bytes,
        'curve_type': value.curve_type,
    };
}


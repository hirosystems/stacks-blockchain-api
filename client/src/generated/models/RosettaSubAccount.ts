/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * An account may have state specific to a contract address (ERC-20 token) and/or a stake (delegated balance). The sub_account_identifier should specify which state (if applicable) an account instantiation refers to.
 * @export
 * @interface RosettaSubAccount
 */
export interface RosettaSubAccount {
    /**
     * The address may be a cryptographic public key (or some encoding of it) or a provided username.
     * @type {string}
     * @memberof RosettaSubAccount
     */
    address: string;
    /**
     * If the SubAccount address is not sufficient to uniquely specify a SubAccount, any other identifying information can be stored here. It is important to note that two SubAccounts with identical addresses but differing metadata will not be considered equal by clients.
     * @type {object}
     * @memberof RosettaSubAccount
     */
    metadata?: object;
}

export function RosettaSubAccountFromJSON(json: any): RosettaSubAccount {
    return RosettaSubAccountFromJSONTyped(json, false);
}

export function RosettaSubAccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): RosettaSubAccount {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': json['address'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
    };
}

export function RosettaSubAccountToJSON(value?: RosettaSubAccount | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': value.address,
        'metadata': value.metadata,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    RosettaAccount,
    RosettaAccountFromJSON,
    RosettaAccountFromJSONTyped,
    RosettaAccountToJSON,
} from './';

/**
 * SigningPayload is signed by the client with the keypair associated with an address using the specified SignatureType. SignatureType can be optionally populated if there is a restriction on the signature scheme that can be used to sign the payload.
 * @export
 * @interface SigningPayload
 */
export interface SigningPayload {
    /**
     * [DEPRECATED by account_identifier in v1.4.4] The network-specific address of the account that should sign the payload.
     * @type {string}
     * @memberof SigningPayload
     */
    address?: string;
    /**
     * 
     * @type {RosettaAccount}
     * @memberof SigningPayload
     */
    account_identifier?: RosettaAccount;
    /**
     * 
     * @type {string}
     * @memberof SigningPayload
     */
    hex_bytes: string;
    /**
     * SignatureType is the type of a cryptographic signature.
     * @type {string}
     * @memberof SigningPayload
     */
    signature_type?: SigningPayloadSignatureTypeEnum;
}

/**
* @export
* @enum {string}
*/
export enum SigningPayloadSignatureTypeEnum {
    ecdsa = 'ecdsa',
    ecdsa_recovery = 'ecdsa_recovery',
    ed25519 = 'ed25519',
    schnorr_1 = 'schnorr_1',
    schnorr_poseidon = 'schnorr_poseidon'
}

export function SigningPayloadFromJSON(json: any): SigningPayload {
    return SigningPayloadFromJSONTyped(json, false);
}

export function SigningPayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): SigningPayload {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': !exists(json, 'address') ? undefined : json['address'],
        'account_identifier': !exists(json, 'account_identifier') ? undefined : RosettaAccountFromJSON(json['account_identifier']),
        'hex_bytes': json['hex_bytes'],
        'signature_type': !exists(json, 'signature_type') ? undefined : json['signature_type'],
    };
}

export function SigningPayloadToJSON(value?: SigningPayload | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': value.address,
        'account_identifier': RosettaAccountToJSON(value.account_identifier),
        'hex_bytes': value.hex_bytes,
        'signature_type': value.signature_type,
    };
}


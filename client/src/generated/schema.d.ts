/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/extended": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * API status
         * @description Retrieves the running status of the Stacks Blockchain API, including the server version and current chain tip information.
         */
        get: operations["get_status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/tx/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recent transactions
         * @description Retrieves all recently mined transactions
         */
        get: operations["get_transaction_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/tx/multiple": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of details for transactions
         * @description Retrieves a list of transactions for a given list of transaction IDs
         */
        get: operations["get_tx_list_details"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/tx/mempool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get mempool transactions
         * @description Retrieves all transactions that have been recently broadcast to the mempool. These are pending transactions awaiting confirmation.
         *
         *             If you need to monitor new transactions, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.
         */
        get: operations["get_mempool_transaction_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/tx/mempool/dropped": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get dropped mempool transactions
         * @description Retrieves all recently-broadcast transactions that have been dropped from the mempool.
         *
         *             Transactions are dropped from the mempool if:
         *              * they were stale and awaiting garbage collection or,
         *              * were expensive, or
         *              * were replaced with a new fee
         */
        get: operations["get_dropped_mempool_transaction_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/tx/mempool/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get statistics for mempool transactions
         * @description Queries for transactions counts, age (by block height), fees (simple average), and size.
         *             All results broken down by transaction type and percentiles (p25, p50, p75, p95).
         */
        get: operations["get_mempool_transaction_stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/tx/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Events
         * @description Retrieves the list of events filtered by principal (STX address or Smart Contract ID), transaction id or event types.
         *             The list of event types is ('smart_contract_log', 'stx_lock', 'stx_asset', 'fungible_token_asset', 'non_fungible_token_asset').
         */
        get: operations["get_filtered_events"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/tx/{tx_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get transaction
         * @description Retrieves transaction details for a given transaction ID
         */
        get: operations["get_transaction_by_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/tx/{tx_id}/raw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get raw transaction
         * @description Retrieves a hex encoded serialized transaction for a given ID
         */
        get: operations["get_raw_transaction_by_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/tx/block/{block_hash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transactions by block hash
         * @deprecated
         * @description **NOTE:** This endpoint is deprecated in favor of [Get transactions by block](/api/get-transactions-by-block).
         *
         *             Retrieves a list of all transactions within a block for a given block hash.
         */
        get: operations["get_transactions_by_block_hash"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/tx/block_height/{height}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transactions by block height
         * @deprecated
         * @description **NOTE:** This endpoint is deprecated in favor of [Get transactions by block](/api/get-transactions-by-block).
         *
         *             Retrieves all transactions within a block at a given height
         */
        get: operations["get_transactions_by_block_height"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/stx_supply/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get total and unlocked STX supply
         * @description Retrieves the total and unlocked STX supply. More information on Stacking can be found [here] (https://docs.stacks.co/understand-stacks/stacking).
         *             **Note:** This uses the estimated future total supply for the year 2050.
         */
        get: operations["get_stx_supply"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/stx_supply/total/plain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get total STX supply in plain text format
         * @description Retrieves the total supply for STX tokens as plain text.
         *             **Note:** this uses the estimated future total supply for the year 2050.
         */
        get: operations["get_stx_supply_total_supply_plain"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/stx_supply/circulating/plain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get circulating STX supply in plain text format
         * @description Retrieves the STX tokens currently in circulation that have been unlocked as plain text.
         */
        get: operations["get_stx_supply_circulating_plain"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/stx_supply/legacy_format": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get total and unlocked STX supply (results formatted the same as the legacy 1.0 API)
         * @description Retrieves total supply of STX tokens including those currently in circulation that have been unlocked.
         *             **Note:** this uses the estimated future total supply for the year 2050.
         */
        get: operations["get_total_stx_supply_legacy_format"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/info/network_block_times": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the network target block time
         * @description Retrieves the target block times for mainnet and testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
         */
        get: operations["get_network_block_times"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/info/network_block_time/{network}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a given network's target block time
         * @description Retrieves the target block time for a given network. The network can be mainnet or testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
         */
        get: operations["get_network_block_time_by_network"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/tokens/nft/holdings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Non-Fungible Token holdings
         * @description Retrieves the list of Non-Fungible Tokens owned by the given principal (STX address or Smart Contract ID).
         *             Results can be filtered by one or more asset identifiers and can include metadata about the transaction that made the principal own each token.
         *
         *             More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts).
         */
        get: operations["get_nft_holdings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/tokens/nft/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Non-Fungible Token history
         * @description Retrieves all events relevant to a Non-Fungible Token. Useful to determine the ownership history of a particular asset.
         *
         *             More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts).
         */
        get: operations["get_nft_history"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/tokens/nft/mints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Non-Fungible Token mints
         * @description Retrieves all mint events for a Non-Fungible Token asset class. Useful to determine which NFTs of a particular collection have been claimed.
         *
         *             More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts).
         */
        get: operations["get_nft_mints"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/tokens/ft/{token}/holders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fungible token holders
         * @description Retrieves the list of Fungible Token holders for a given token ID. Specify `stx` for the `token` parameter to get the list of STX holders.
         */
        get: operations["get_ft_holders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/contract/by_trait": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get contracts by trait
         * @description Retrieves a list of contracts based on the following traits listed in JSON format -  functions, variables, maps, fungible tokens and non-fungible tokens
         */
        get: operations["get_contracts_by_trait"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/contract/{contract_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get contract info
         * @description Retrieves details of a contract with a given `contract_id`
         */
        get: operations["get_contract_by_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/contract/{contract_id}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get contract events
         * @description Retrieves a list of events that have been triggered by a given `contract_id`
         */
        get: operations["get_contract_events_by_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/fee_rate/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Fetch fee rate
         * @deprecated
         * @description **NOTE:** This endpoint is deprecated in favor of [Get approximate fees for a given transaction](/api/get-approximate-fees-for-a-given-transaction).
         *
         *             Retrieves estimated fee rate.
         */
        post: operations["fetch_fee_rate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/microblock/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recent microblocks
         * @description Retrieves a list of microblocks.
         *
         *               If you need to actively monitor new microblocks, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.
         */
        get: operations["get_microblock_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/microblock/{hash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get microblock
         * @description Retrieves a specific microblock by `hash`
         */
        get: operations["get_microblock_by_hash"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/microblock/unanchored/txs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the list of current transactions that belong to unanchored microblocks
         * @description Retrieves transactions that have been streamed in microblocks but not yet accepted or rejected in an anchor block
         */
        get: operations["get_unanchored_txs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/block/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recent blocks
         * @deprecated
         * @description **NOTE:** This endpoint is deprecated in favor of [Get blocks](/api/get-blocks).
         *
         *               Retrieves a list of recently mined blocks
         *
         *               If you need to actively monitor new blocks, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.
         */
        get: operations["get_block_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/block/by_height/{height}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get block by height
         * @deprecated
         * @description **NOTE:** This endpoint is deprecated in favor of [Get block](/api/get-block).
         *
         *             Retrieves block details of a specific block at a given block height
         */
        get: operations["get_block_by_height"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/block/by_burn_block_height/{burn_block_height}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get block by burnchain height
         * @deprecated
         * @description **NOTE:** This endpoint is deprecated in favor of [Get blocks](/api/get-blocks).
         *
         *             Retrieves block details of a specific block for a given burn chain height
         */
        get: operations["get_block_by_burn_block_height"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/block/{hash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get block by hash
         * @deprecated
         * @description **NOTE:** This endpoint is deprecated in favor of [Get block](/api/get-block).
         *
         *             Retrieves block details of a specific block for a given chain height. You can use the hash from your latest block ('get_block_list' API) to get your block details.
         */
        get: operations["get_block_by_hash"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/block/by_burn_block_hash/{burn_block_hash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get block by burnchain block hash
         * @deprecated
         * @description **NOTE:** This endpoint is deprecated in favor of [Get blocks](/api/get-blocks).
         *
         *             Retrieves block details of a specific block for a given burnchain block hash
         */
        get: operations["get_block_by_burn_block_hash"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/burnchain/reward_slot_holders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recent reward slot holders
         * @description Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments.
         */
        get: operations["get_burnchain_reward_slot_holders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/burnchain/reward_slot_holders/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recent reward slot holder entries for the given address
         * @description Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments for a given reward slot holder recipient address.
         */
        get: operations["get_burnchain_reward_slot_holders_by_address"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/burnchain/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recent burnchain reward recipients
         * @description Retrieves a list of recent burnchain (e.g. Bitcoin) reward recipients with the associated amounts and block info
         */
        get: operations["get_burnchain_reward_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/burnchain/rewards/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recent burnchain reward for the given recipient
         * @description Retrieves a list of recent burnchain (e.g. Bitcoin) rewards for the given recipient with the associated amounts and block info
         */
        get: operations["get_burnchain_reward_list_by_address"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/burnchain/rewards/{address}/total": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get total burnchain rewards for the given recipient
         * @description Retrieves the total burnchain (e.g. Bitcoin) rewards for a given recipient `address`
         */
        get: operations["get_burnchain_rewards_total_by_address"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/address/{principal}/stx": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get account STX balance
         * @description Retrieves STX token balance for a given Address or Contract Identifier.
         */
        get: operations["get_account_stx_balance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/address/{principal}/balances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get account balances
         * @description Retrieves total account balance information for a given Address or Contract Identifier. This includes the balances of  STX Tokens, Fungible Tokens and Non-Fungible Tokens for the account.
         */
        get: operations["get_account_balance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/address/{principal}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get account transactions
         * @deprecated
         * @description **NOTE:** This endpoint is deprecated in favor of [Get address transactions](/api/get-address-transactions).
         *
         *             Retrieves a list of all Transactions for a given Address or Contract Identifier. More information on Transaction types can be found [here](https://docs.stacks.co/understand-stacks/transactions#types).
         *
         *             If you need to actively monitor new transactions for an address or contract id, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.
         */
        get: operations["get_account_transactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/address/{principal}/{tx_id}/with_transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get account transaction information for specific transaction
         * @deprecated
         * @description **NOTE:** This endpoint is deprecated in favor of [Get events for an address transaction](/api/get-address-transaction-events).
         *
         *             Retrieves transaction details for a given Transaction Id `tx_id`, for a given account or contract Identifier.
         */
        get: operations["get_single_transaction_with_transfers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/address/{principal}/transactions_with_transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get account transactions including STX transfers for each transaction.
         * @deprecated
         * @description Retrieve all transactions for an account or contract identifier including STX transfers for each transaction.
         */
        get: operations["get_account_transactions_with_transfers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/address/{principal}/assets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get account assets
         * @description Retrieves a list of all assets events associated with an account or a Contract Identifier. This includes Transfers, Mints.
         */
        get: operations["get_account_assets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/address/{principal}/stx_inbound": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get inbound STX transfers
         * @description Retrieves a list of STX transfers with memos to the given principal. This includes regular transfers from a stx-transfer transaction type,
         *             and transfers from contract-call transactions a the `send-many-memo` bulk sending contract.
         */
        get: operations["get_account_inbound"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/address/{principal}/mempool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transactions for address
         * @description Retrieves all transactions for a given address that are currently in mempool
         */
        get: operations["get_address_mempool_transactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/address/{principal}/nonces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the latest nonce used by an account
         * @description Retrieves the latest nonce values used by an account by inspecting the mempool, microblock transactions, and anchored transactions.
         */
        get: operations["get_account_nonces"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/search/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search
         * @description Search blocks, transactions, contracts, or accounts by hash/ID
         */
        get: operations["search_by_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/{pox}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get latest PoX events */
        get: {
            parameters: {
                query?: {
                    /** @description Results per page */
                    limit?: number;
                    /** @description Result offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    pox: "pox2" | "pox3" | "pox4";
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/{pox}/tx/{tx_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get PoX events for a transaction */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    pox: "pox2" | "pox3" | "pox4";
                    tx_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/{pox}/stacker/{principal}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get events for a stacking address */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    pox: "pox2" | "pox3" | "pox4";
                    principal: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/{pox}/{pool_principal}/delegations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stacking pool members
         * @description Retrieves the list of stacking pool members for a given delegator principal.
         */
        get: operations["get_pool_delegations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/faucets/btc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add testnet BTC tokens to address
         * @description Add 1 BTC token to the specified testnet BTC address.
         *
         *             The endpoint returns the transaction ID, which you can use to view the transaction in a testnet Bitcoin block
         *             explorer. The tokens are delivered once the transaction has been included in a block.
         *
         *             **Note:** This is a testnet only endpoint. This endpoint will not work on the mainnet.
         */
        post: operations["run_faucet_btc"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/faucets/btc/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get BTC balance for address */
        get: operations["get_btc_balance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v1/faucets/stx": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get STX testnet tokens
         * @description Add 500 STX tokens to the specified testnet address. Testnet STX addresses begin with `ST`. If the `stacking`
         *             parameter is set to `true`, the faucet will add the required number of tokens for individual stacking to the
         *             specified testnet address.
         *
         *             The endpoint returns the transaction ID, which you can use to view the transaction in the
         *             [Stacks Explorer](https://explorer.hiro.so/?chain=testnet). The tokens are delivered once the transaction has
         *             been included in an anchor block.
         *
         *             A common reason for failed faucet transactions is that the faucet has run out of tokens. If you are experiencing
         *             failed faucet transactions to a testnet address, you can get help in [Discord](https://stacks.chat).
         *
         *             **Note:** This is a testnet only endpoint. This endpoint will not work on the mainnet.
         */
        post: operations["run_faucet_stx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v2/blocks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get blocks
         * @description Retrieves a list of recently mined blocks
         */
        get: operations["get_blocks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v2/blocks/average-times": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get average block times
         * @description Retrieves average block times (in seconds)
         */
        get: operations["get_average_block_times"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v2/blocks/{height_or_hash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get block
         * @description Retrieves a single block
         */
        get: operations["get_block"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v2/blocks/{height_or_hash}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get transactions by block
         * @description Retrieves transactions confirmed in a single block
         */
        get: operations["get_transactions_by_block"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v2/burn-blocks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get burn blocks
         * @description Retrieves a list of recent burn blocks
         */
        get: operations["get_burn_blocks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v2/burn-blocks/{height_or_hash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get burn block
         * @description Retrieves a single burn block
         */
        get: operations["get_burn_block"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v2/burn-blocks/{height_or_hash}/blocks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get blocks by burn block
         * @description Retrieves a list of blocks confirmed by a specific burn block
         */
        get: operations["get_blocks_by_burn_block"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v2/smart-contracts/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get smart contracts status
         * @description Retrieves the deployment status of multiple smart contracts.
         */
        get: operations["get_smart_contracts_status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v2/mempool/fees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get mempool transaction fee priorities
         * @description Returns estimated fee priorities (in micro-STX) for all transactions that are currently in the mempool. Also returns priorities separated by transaction type.
         */
        get: operations["get_mempool_fee_priorities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v2/pox/cycles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get PoX cycles
         * @description Retrieves a list of PoX cycles
         */
        get: operations["get_pox_cycles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v2/pox/cycles/{cycle_number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get PoX cycle
         * @description Retrieves details for a PoX cycle
         */
        get: operations["get_pox_cycle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v2/pox/cycles/{cycle_number}/signers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get signers in PoX cycle
         * @description Retrieves a list of signers in a PoX cycle
         */
        get: operations["get_pox_cycle_signers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v2/pox/cycles/{cycle_number}/signers/{signer_key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get signer in PoX cycle
         * @description Retrieves details for a signer in a PoX cycle
         */
        get: operations["get_pox_cycle_signer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v2/pox/cycles/{cycle_number}/signers/{signer_key}/stackers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get stackers for signer in PoX cycle
         * @description Retrieves a list of stackers for a signer in a PoX cycle
         */
        get: operations["get_pox_cycle_signer_stackers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v2/addresses/{address}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get address transactions
         * @description Retrieves a paginated list of confirmed transactions sent or received by a STX address or Smart Contract ID, alongside the total amount of STX sent or received and the number of STX, FT and NFT transfers contained within each transaction.
         *
         *             More information on Transaction types can be found [here](https://docs.stacks.co/understand-stacks/transactions#types).
         */
        get: operations["get_address_transactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extended/v2/addresses/{address}/transactions/{tx_id}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get events for an address transaction
         * @description Retrieves a paginated list of all STX, FT and NFT events concerning a STX address or Smart Contract ID within a specific transaction.
         */
        get: operations["get_address_transaction_events"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/names/{name}/zonefile/{zoneFileHash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Historical Zone File
         * @description Retrieves the historical zonefile specified by the username and zone hash.
         */
        get: operations["get_historical_zone_file"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/names/{name}/subdomains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Name Subdomains
         * @description Retrieves the list of subdomains for a specific name
         */
        get: operations["fetch_subdomains_list_for_name"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/names/{name}/zonefile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Zone File
         * @description Retrieves a user's raw zone file. This only works for RFC-compliant zone files. This method returns an error for names that have non-standard zone files.
         */
        get: operations["fetch_zone_file"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/names/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Names
         * @description Retrieves a list of all names known to the node.
         */
        get: operations["get_all_names"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/names/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Name Details
         * @description Retrieves details of a given name including the `address`, `status` and last transaction id - `last_txid`.
         */
        get: operations["get_name_info"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/namespaces/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Namespaces
         * @description Retrieves a list of all namespaces known to the node.
         */
        get: operations["get_all_namespaces"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/namespaces/{tld}/names": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Namespace Names
         * @description Retrieves a list of names within a given namespace.
         */
        get: operations["get_namespace_names"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/addresses/{blockchain}/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Names Owned by Address
         * @description Retrieves a list of names owned by the address provided.
         */
        get: operations["get_names_owned_by_address"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/prices/namespaces/{tld}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Namespace Price
         * @description Retrieves the price of a namespace. The `amount` given will be in the smallest possible units of the currency.
         */
        get: operations["get_namespace_price"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/prices/names/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Name Price
         * @description Retrieves the price of a name. The `amount` given will be in the smallest possible units of the currency.
         */
        get: operations["get_name_price"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_status: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description the server version that is currently running */
                        server_version: string;
                        /** @description the current server status */
                        status: string;
                        pox_v1_unlock_height?: number | null;
                        pox_v2_unlock_height?: number | null;
                        pox_v3_unlock_height?: number | null;
                        chain_tip?: {
                            /** @description the current block height */
                            block_height: number;
                            /** @description the current block hash */
                            block_hash: string;
                            /** @description the current index block hash */
                            index_block_hash: string;
                            /** @description the current microblock hash */
                            microblock_hash?: string;
                            /** @description the current microblock sequence number */
                            microblock_sequence?: number;
                            /** @description the current burn chain block height */
                            burn_block_height: number;
                        } | null;
                    };
                };
            };
        };
    };
    get_transaction_list: {
        parameters: {
            query?: {
                /** @description Result offset */
                offset?: number;
                /** @description Results per page */
                limit?: number;
                type?: ("coinbase" | "token_transfer" | "smart_contract" | "contract_call" | "poison_microblock" | "tenure_change")[];
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
                order?: "asc" | "desc";
                /** @description Option to sort results by block height, timestamp, or fee */
                sort_by?: "block_height" | "burn_block_time" | "fee";
                /** @description Option to filter results by sender address */
                from_address?: string;
                /** @description Option to filter results by recipient address */
                to_address?: string;
                /**
                 * @description Filter by transactions after this timestamp (unix timestamp in seconds)
                 * @example 1704067200
                 */
                start_time?: number;
                /**
                 * @description Filter by transactions before this timestamp (unix timestamp in seconds)
                 * @example 1706745599
                 */
                end_time?: number;
                /**
                 * @description Option to filter results by contract ID
                 * @example SP000000000000000000002Q6VF78.pox-4
                 */
                contract_id?: string;
                /**
                 * @description Filter by contract call transactions involving this function name
                 * @example delegate-stx
                 */
                function_name?: string;
                /**
                 * @description Filter by transactions with this nonce
                 * @example 123
                 */
                nonce?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: ({
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "token_transfer";
                            token_transfer: {
                                recipient_address: string;
                                /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                amount: string;
                                /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                memo: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "smart_contract";
                            smart_contract: {
                                clarity_version: number | null;
                                /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                contract_id: string;
                                /** @description Clarity code of the smart contract being deployed */
                                source_code: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "contract_call";
                            contract_call: {
                                /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                contract_id: string;
                                /** @description Name of the Clarity function to be invoked */
                                function_name: string;
                                /** @description Function definition, including function name and type as well as parameter names and types */
                                function_signature: string;
                                function_args?: {
                                    hex: string;
                                    repr: string;
                                    name: string;
                                    type: string;
                                }[];
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "poison_microblock";
                            poison_microblock: {
                                /** @description Hex encoded microblock header */
                                microblock_header_1: string;
                                /** @description Hex encoded microblock header */
                                microblock_header_2: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "coinbase";
                            coinbase_payload: {
                                /** @description Hex encoded 32-byte scratch space for block leader's use */
                                data: string;
                                alt_recipient?: string | null;
                                vrf_proof?: string | null;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "tenure_change";
                            tenure_change_payload: {
                                /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                tenure_consensus_hash: string;
                                /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                prev_tenure_consensus_hash: string;
                                /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                burn_view_consensus_hash: string;
                                /** @description (Hex string) Stacks Block hash */
                                previous_tenure_end: string;
                                /** @description The number of blocks produced in the previous tenure. */
                                previous_tenure_blocks: number;
                                /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                cause: "block_found" | "extended";
                                /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                pubkey_hash: string;
                            };
                        })[];
                    };
                };
            };
        };
    };
    get_tx_list_details: {
        parameters: {
            query: {
                tx_id: string[];
                /** @description Results per page */
                event_limit?: number;
                /** @description Result offset */
                event_offset?: number;
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: {
                            /** @constant */
                            found: true;
                            result: ({
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @constant */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @constant */
                                tx_type: "token_transfer";
                                token_transfer: {
                                    recipient_address: string;
                                    /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                    amount: string;
                                    /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                    memo: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @constant */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @constant */
                                tx_type: "smart_contract";
                                smart_contract: {
                                    clarity_version: number | null;
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Clarity code of the smart contract being deployed */
                                    source_code: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @constant */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @constant */
                                tx_type: "contract_call";
                                contract_call: {
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Name of the Clarity function to be invoked */
                                    function_name: string;
                                    /** @description Function definition, including function name and type as well as parameter names and types */
                                    function_signature: string;
                                    function_args?: {
                                        hex: string;
                                        repr: string;
                                        name: string;
                                        type: string;
                                    }[];
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @constant */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @constant */
                                tx_type: "poison_microblock";
                                poison_microblock: {
                                    /** @description Hex encoded microblock header */
                                    microblock_header_1: string;
                                    /** @description Hex encoded microblock header */
                                    microblock_header_2: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @constant */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @constant */
                                tx_type: "coinbase";
                                coinbase_payload: {
                                    /** @description Hex encoded 32-byte scratch space for block leader's use */
                                    data: string;
                                    alt_recipient?: string | null;
                                    vrf_proof?: string | null;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @constant */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @constant */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @constant */
                                tx_type: "tenure_change";
                                tenure_change_payload: {
                                    /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                    tenure_consensus_hash: string;
                                    /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                    prev_tenure_consensus_hash: string;
                                    /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                    burn_view_consensus_hash: string;
                                    /** @description (Hex string) Stacks Block hash */
                                    previous_tenure_end: string;
                                    /** @description The number of blocks produced in the previous tenure. */
                                    previous_tenure_blocks: number;
                                    /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                    cause: "block_found" | "extended";
                                    /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                    pubkey_hash: string;
                                };
                            }) | ({
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @constant */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Status of the transaction */
                                tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                                /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                                receipt_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                                receipt_time_iso: string;
                                /** @constant */
                                tx_type: "token_transfer";
                                token_transfer: {
                                    recipient_address: string;
                                    /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                    amount: string;
                                    /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                    memo: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @constant */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Status of the transaction */
                                tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                                /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                                receipt_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                                receipt_time_iso: string;
                                /** @constant */
                                tx_type: "smart_contract";
                                smart_contract: {
                                    clarity_version: number | null;
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Clarity code of the smart contract being deployed */
                                    source_code: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @constant */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Status of the transaction */
                                tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                                /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                                receipt_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                                receipt_time_iso: string;
                                /** @constant */
                                tx_type: "contract_call";
                                contract_call: {
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Name of the Clarity function to be invoked */
                                    function_name: string;
                                    /** @description Function definition, including function name and type as well as parameter names and types */
                                    function_signature: string;
                                    function_args?: {
                                        hex: string;
                                        repr: string;
                                        name: string;
                                        type: string;
                                    }[];
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @constant */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Status of the transaction */
                                tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                                /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                                receipt_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                                receipt_time_iso: string;
                                /** @constant */
                                tx_type: "poison_microblock";
                                poison_microblock: {
                                    /** @description Hex encoded microblock header */
                                    microblock_header_1: string;
                                    /** @description Hex encoded microblock header */
                                    microblock_header_2: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @constant */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Status of the transaction */
                                tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                                /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                                receipt_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                                receipt_time_iso: string;
                                /** @constant */
                                tx_type: "coinbase";
                                coinbase_payload: {
                                    /** @description Hex encoded 32-byte scratch space for block leader's use */
                                    data: string;
                                    alt_recipient?: string | null;
                                    vrf_proof?: string | null;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @constant */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @constant */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @constant */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @constant */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @constant */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Status of the transaction */
                                tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                                /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                                receipt_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                                receipt_time_iso: string;
                                /** @constant */
                                tx_type: "tenure_change";
                                tenure_change_payload: {
                                    /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                    tenure_consensus_hash: string;
                                    /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                    prev_tenure_consensus_hash: string;
                                    /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                    burn_view_consensus_hash: string;
                                    /** @description (Hex string) Stacks Block hash */
                                    previous_tenure_end: string;
                                    /** @description The number of blocks produced in the previous tenure. */
                                    previous_tenure_blocks: number;
                                    /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                    cause: "block_found" | "extended";
                                    /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                    pubkey_hash: string;
                                };
                            });
                        } | {
                            /** @constant */
                            found: false;
                            result: {
                                tx_id: string;
                            };
                        };
                    };
                };
            };
        };
    };
    get_mempool_transaction_list: {
        parameters: {
            query?: {
                /**
                 * @description STX Address
                 * @example SP318Q55DEKHRXJK696033DQN5C54D9K2EE6DHRWP
                 */
                sender_address?: string;
                /**
                 * @description STX Address
                 * @example SP318Q55DEKHRXJK696033DQN5C54D9K2EE6DHRWP
                 */
                recipient_address?: string;
                /**
                 * @description STX Address
                 * @example SP318Q55DEKHRXJK696033DQN5C54D9K2EE6DHRWP
                 */
                address?: string;
                /** @description Option to sort results by transaction age, size, or fee rate. */
                order_by?: "age" | "size" | "fee";
                /** @description Results order */
                order?: "asc" | "desc";
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
                /** @description Result offset */
                offset?: number;
                /** @description Results per page */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of mempool transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: ({
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Status of the transaction */
                            tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                            /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                            receipt_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                            receipt_time_iso: string;
                            /** @enum {string} */
                            tx_type: "token_transfer";
                            token_transfer: {
                                recipient_address: string;
                                /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                amount: string;
                                /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                memo: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Status of the transaction */
                            tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                            /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                            receipt_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                            receipt_time_iso: string;
                            /** @enum {string} */
                            tx_type: "smart_contract";
                            smart_contract: {
                                clarity_version: number | null;
                                /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                contract_id: string;
                                /** @description Clarity code of the smart contract being deployed */
                                source_code: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Status of the transaction */
                            tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                            /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                            receipt_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                            receipt_time_iso: string;
                            /** @enum {string} */
                            tx_type: "contract_call";
                            contract_call: {
                                /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                contract_id: string;
                                /** @description Name of the Clarity function to be invoked */
                                function_name: string;
                                /** @description Function definition, including function name and type as well as parameter names and types */
                                function_signature: string;
                                function_args?: {
                                    hex: string;
                                    repr: string;
                                    name: string;
                                    type: string;
                                }[];
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Status of the transaction */
                            tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                            /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                            receipt_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                            receipt_time_iso: string;
                            /** @enum {string} */
                            tx_type: "poison_microblock";
                            poison_microblock: {
                                /** @description Hex encoded microblock header */
                                microblock_header_1: string;
                                /** @description Hex encoded microblock header */
                                microblock_header_2: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Status of the transaction */
                            tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                            /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                            receipt_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                            receipt_time_iso: string;
                            /** @enum {string} */
                            tx_type: "coinbase";
                            coinbase_payload: {
                                /** @description Hex encoded 32-byte scratch space for block leader's use */
                                data: string;
                                alt_recipient?: string | null;
                                vrf_proof?: string | null;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Status of the transaction */
                            tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                            /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                            receipt_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                            receipt_time_iso: string;
                            /** @enum {string} */
                            tx_type: "tenure_change";
                            tenure_change_payload: {
                                /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                tenure_consensus_hash: string;
                                /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                prev_tenure_consensus_hash: string;
                                /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                burn_view_consensus_hash: string;
                                /** @description (Hex string) Stacks Block hash */
                                previous_tenure_end: string;
                                /** @description The number of blocks produced in the previous tenure. */
                                previous_tenure_blocks: number;
                                /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                cause: "block_found" | "extended";
                                /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                pubkey_hash: string;
                            };
                        })[];
                    };
                };
            };
        };
    };
    get_dropped_mempool_transaction_list: {
        parameters: {
            query?: {
                /** @description Result offset */
                offset?: number;
                /** @description Results per page */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of dropped mempool transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: ({
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Status of the transaction */
                            tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                            /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                            receipt_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                            receipt_time_iso: string;
                            /** @enum {string} */
                            tx_type: "token_transfer";
                            token_transfer: {
                                recipient_address: string;
                                /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                amount: string;
                                /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                memo: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Status of the transaction */
                            tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                            /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                            receipt_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                            receipt_time_iso: string;
                            /** @enum {string} */
                            tx_type: "smart_contract";
                            smart_contract: {
                                clarity_version: number | null;
                                /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                contract_id: string;
                                /** @description Clarity code of the smart contract being deployed */
                                source_code: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Status of the transaction */
                            tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                            /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                            receipt_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                            receipt_time_iso: string;
                            /** @enum {string} */
                            tx_type: "contract_call";
                            contract_call: {
                                /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                contract_id: string;
                                /** @description Name of the Clarity function to be invoked */
                                function_name: string;
                                /** @description Function definition, including function name and type as well as parameter names and types */
                                function_signature: string;
                                function_args?: {
                                    hex: string;
                                    repr: string;
                                    name: string;
                                    type: string;
                                }[];
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Status of the transaction */
                            tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                            /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                            receipt_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                            receipt_time_iso: string;
                            /** @enum {string} */
                            tx_type: "poison_microblock";
                            poison_microblock: {
                                /** @description Hex encoded microblock header */
                                microblock_header_1: string;
                                /** @description Hex encoded microblock header */
                                microblock_header_2: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Status of the transaction */
                            tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                            /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                            receipt_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                            receipt_time_iso: string;
                            /** @enum {string} */
                            tx_type: "coinbase";
                            coinbase_payload: {
                                /** @description Hex encoded 32-byte scratch space for block leader's use */
                                data: string;
                                alt_recipient?: string | null;
                                vrf_proof?: string | null;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Status of the transaction */
                            tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                            /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                            receipt_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                            receipt_time_iso: string;
                            /** @enum {string} */
                            tx_type: "tenure_change";
                            tenure_change_payload: {
                                /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                tenure_consensus_hash: string;
                                /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                prev_tenure_consensus_hash: string;
                                /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                burn_view_consensus_hash: string;
                                /** @description (Hex string) Stacks Block hash */
                                previous_tenure_end: string;
                                /** @description The number of blocks produced in the previous tenure. */
                                previous_tenure_blocks: number;
                                /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                cause: "block_found" | "extended";
                                /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                pubkey_hash: string;
                            };
                        })[];
                    };
                };
            };
        };
    };
    get_mempool_transaction_stats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description GET request that returns stats on mempool transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Number of tranasction in the mempool, broken down by transaction type. */
                        tx_type_counts: {
                            [key: string]: number;
                        };
                        /** @description The simple mean (average) transaction fee, broken down by transaction type. Note that this does not factor in actual execution costs. The average fee is not a reliable metric for calculating a fee for a new transaction. */
                        tx_simple_fee_averages: {
                            [key: string]: {
                                p25: number | null;
                                p50: number | null;
                                p75: number | null;
                                p95: number | null;
                            } & {
                                [key: string]: unknown;
                            };
                        };
                        /** @description The average time (in blocks) that transactions have lived in the mempool. The start block height is simply the current chain-tip of when the attached Stacks node receives the transaction. This timing can be different across Stacks nodes / API instances due to propagation timing differences in the p2p network. */
                        tx_ages: {
                            [key: string]: {
                                p25: number | null;
                                p50: number | null;
                                p75: number | null;
                                p95: number | null;
                            } & {
                                [key: string]: unknown;
                            };
                        };
                        /** @description The average byte size of transactions in the mempool, broken down by transaction type. */
                        tx_byte_sizes: {
                            [key: string]: {
                                p25: number | null;
                                p50: number | null;
                                p75: number | null;
                                p95: number | null;
                            } & {
                                [key: string]: unknown;
                            };
                        };
                    };
                };
            };
        };
    };
    get_filtered_events: {
        parameters: {
            query?: {
                /**
                 * @description Transaction ID
                 * @example 0xf6bd5f4a7b26184a3466340b2e99fd003b4962c0e382a7e4b6a13df3dd7a91c6
                 */
                tx_id?: string;
                address?: string;
                type?: ("smart_contract_log" | "stx_lock" | "stx_asset" | "fungible_token_asset" | "non_fungible_token_asset")[];
                /** @description Result offset */
                offset?: number;
                /** @description Results per page */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        events: (({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "smart_contract_log";
                            tx_id: string;
                            contract_log: {
                                contract_id: string;
                                topic: string;
                                value: {
                                    hex: string;
                                    repr: string;
                                };
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "stx_lock";
                            tx_id: string;
                            stx_lock_event: {
                                locked_amount: string;
                                unlock_height: number;
                                locked_address: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "stx_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                sender: string;
                                recipient: string;
                                amount: string;
                                memo?: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "fungible_token_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                asset_id: string;
                                sender: string;
                                recipient: string;
                                amount: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "non_fungible_token_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                asset_id: string;
                                sender: string;
                                recipient: string;
                                value: {
                                    hex: string;
                                    repr: string;
                                };
                            };
                        }))[];
                    };
                };
            };
        };
    };
    get_transaction_by_id: {
        parameters: {
            query?: {
                /** @description Results per page */
                event_limit?: number;
                /** @description Result offset */
                event_offset?: number;
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description Transaction ID
                 * @example 0xf6bd5f4a7b26184a3466340b2e99fd003b4962c0e382a7e4b6a13df3dd7a91c6
                 */
                tx_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @description Transaction ID */
                        tx_id: string;
                        /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                        nonce: number;
                        /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                        fee_rate: string;
                        /** @description Address of the transaction initiator */
                        sender_address: string;
                        sponsor_nonce?: number;
                        /** @description Denotes whether the originating account is the same as the paying account */
                        sponsored: boolean;
                        sponsor_address?: string;
                        post_condition_mode: "allow" | "deny";
                        post_conditions: ({
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "stx";
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "fungible";
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent" | "not_sent";
                            /** @enum {string} */
                            type: "non_fungible";
                            asset_value: {
                                hex: string;
                                repr: string;
                            };
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        })[];
                        /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                        anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                        /** @description Hash of the blocked this transactions was associated with */
                        block_hash: string;
                        /** @description Height of the block this transactions was associated with */
                        block_height: number;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                        block_time_iso: string;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        burn_block_time: number;
                        /** @description Height of the anchor burn block. */
                        burn_block_height: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                        burn_block_time_iso: string;
                        /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                        parent_burn_block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                        parent_burn_block_time_iso: string;
                        /** @description Set to `true` if block corresponds to the canonical chain tip */
                        canonical: boolean;
                        /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                        tx_index: number;
                        /** @description Status of the transaction */
                        tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                        /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                        tx_result: {
                            /** @description Hex string representing the value fo the transaction result */
                            hex: string;
                            /** @description Readable string of the transaction result */
                            repr: string;
                        };
                        /** @description Number of transaction events */
                        event_count: number;
                        /** @description Hash of the previous block. */
                        parent_block_hash: string;
                        /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                        is_unanchored: boolean;
                        /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                        microblock_hash: string;
                        /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                        microblock_sequence: number;
                        /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                        microblock_canonical: boolean;
                        /** @description Execution cost read count. */
                        execution_cost_read_count: number;
                        /** @description Execution cost read length. */
                        execution_cost_read_length: number;
                        /** @description Execution cost runtime. */
                        execution_cost_runtime: number;
                        /** @description Execution cost write count. */
                        execution_cost_write_count: number;
                        /** @description Execution cost write length. */
                        execution_cost_write_length: number;
                        events: (({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "smart_contract_log";
                            tx_id: string;
                            contract_log: {
                                contract_id: string;
                                topic: string;
                                value: {
                                    hex: string;
                                    repr: string;
                                };
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "stx_lock";
                            tx_id: string;
                            stx_lock_event: {
                                locked_amount: string;
                                unlock_height: number;
                                locked_address: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "stx_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                sender: string;
                                recipient: string;
                                amount: string;
                                memo?: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "fungible_token_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                asset_id: string;
                                sender: string;
                                recipient: string;
                                amount: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "non_fungible_token_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                asset_id: string;
                                sender: string;
                                recipient: string;
                                value: {
                                    hex: string;
                                    repr: string;
                                };
                            };
                        }))[];
                        /** @enum {string} */
                        tx_type: "token_transfer";
                        token_transfer: {
                            recipient_address: string;
                            /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                            amount: string;
                            /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                            memo: string;
                        };
                    } | {
                        /** @description Transaction ID */
                        tx_id: string;
                        /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                        nonce: number;
                        /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                        fee_rate: string;
                        /** @description Address of the transaction initiator */
                        sender_address: string;
                        sponsor_nonce?: number;
                        /** @description Denotes whether the originating account is the same as the paying account */
                        sponsored: boolean;
                        sponsor_address?: string;
                        post_condition_mode: "allow" | "deny";
                        post_conditions: ({
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "stx";
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "fungible";
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent" | "not_sent";
                            /** @enum {string} */
                            type: "non_fungible";
                            asset_value: {
                                hex: string;
                                repr: string;
                            };
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        })[];
                        /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                        anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                        /** @description Hash of the blocked this transactions was associated with */
                        block_hash: string;
                        /** @description Height of the block this transactions was associated with */
                        block_height: number;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                        block_time_iso: string;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        burn_block_time: number;
                        /** @description Height of the anchor burn block. */
                        burn_block_height: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                        burn_block_time_iso: string;
                        /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                        parent_burn_block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                        parent_burn_block_time_iso: string;
                        /** @description Set to `true` if block corresponds to the canonical chain tip */
                        canonical: boolean;
                        /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                        tx_index: number;
                        /** @description Status of the transaction */
                        tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                        /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                        tx_result: {
                            /** @description Hex string representing the value fo the transaction result */
                            hex: string;
                            /** @description Readable string of the transaction result */
                            repr: string;
                        };
                        /** @description Number of transaction events */
                        event_count: number;
                        /** @description Hash of the previous block. */
                        parent_block_hash: string;
                        /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                        is_unanchored: boolean;
                        /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                        microblock_hash: string;
                        /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                        microblock_sequence: number;
                        /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                        microblock_canonical: boolean;
                        /** @description Execution cost read count. */
                        execution_cost_read_count: number;
                        /** @description Execution cost read length. */
                        execution_cost_read_length: number;
                        /** @description Execution cost runtime. */
                        execution_cost_runtime: number;
                        /** @description Execution cost write count. */
                        execution_cost_write_count: number;
                        /** @description Execution cost write length. */
                        execution_cost_write_length: number;
                        events: (({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "smart_contract_log";
                            tx_id: string;
                            contract_log: {
                                contract_id: string;
                                topic: string;
                                value: {
                                    hex: string;
                                    repr: string;
                                };
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "stx_lock";
                            tx_id: string;
                            stx_lock_event: {
                                locked_amount: string;
                                unlock_height: number;
                                locked_address: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "stx_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                sender: string;
                                recipient: string;
                                amount: string;
                                memo?: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "fungible_token_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                asset_id: string;
                                sender: string;
                                recipient: string;
                                amount: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "non_fungible_token_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                asset_id: string;
                                sender: string;
                                recipient: string;
                                value: {
                                    hex: string;
                                    repr: string;
                                };
                            };
                        }))[];
                        /** @enum {string} */
                        tx_type: "smart_contract";
                        smart_contract: {
                            clarity_version: number | null;
                            /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                            contract_id: string;
                            /** @description Clarity code of the smart contract being deployed */
                            source_code: string;
                        };
                    } | {
                        /** @description Transaction ID */
                        tx_id: string;
                        /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                        nonce: number;
                        /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                        fee_rate: string;
                        /** @description Address of the transaction initiator */
                        sender_address: string;
                        sponsor_nonce?: number;
                        /** @description Denotes whether the originating account is the same as the paying account */
                        sponsored: boolean;
                        sponsor_address?: string;
                        post_condition_mode: "allow" | "deny";
                        post_conditions: ({
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "stx";
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "fungible";
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent" | "not_sent";
                            /** @enum {string} */
                            type: "non_fungible";
                            asset_value: {
                                hex: string;
                                repr: string;
                            };
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        })[];
                        /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                        anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                        /** @description Hash of the blocked this transactions was associated with */
                        block_hash: string;
                        /** @description Height of the block this transactions was associated with */
                        block_height: number;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                        block_time_iso: string;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        burn_block_time: number;
                        /** @description Height of the anchor burn block. */
                        burn_block_height: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                        burn_block_time_iso: string;
                        /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                        parent_burn_block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                        parent_burn_block_time_iso: string;
                        /** @description Set to `true` if block corresponds to the canonical chain tip */
                        canonical: boolean;
                        /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                        tx_index: number;
                        /** @description Status of the transaction */
                        tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                        /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                        tx_result: {
                            /** @description Hex string representing the value fo the transaction result */
                            hex: string;
                            /** @description Readable string of the transaction result */
                            repr: string;
                        };
                        /** @description Number of transaction events */
                        event_count: number;
                        /** @description Hash of the previous block. */
                        parent_block_hash: string;
                        /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                        is_unanchored: boolean;
                        /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                        microblock_hash: string;
                        /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                        microblock_sequence: number;
                        /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                        microblock_canonical: boolean;
                        /** @description Execution cost read count. */
                        execution_cost_read_count: number;
                        /** @description Execution cost read length. */
                        execution_cost_read_length: number;
                        /** @description Execution cost runtime. */
                        execution_cost_runtime: number;
                        /** @description Execution cost write count. */
                        execution_cost_write_count: number;
                        /** @description Execution cost write length. */
                        execution_cost_write_length: number;
                        events: (({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "smart_contract_log";
                            tx_id: string;
                            contract_log: {
                                contract_id: string;
                                topic: string;
                                value: {
                                    hex: string;
                                    repr: string;
                                };
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "stx_lock";
                            tx_id: string;
                            stx_lock_event: {
                                locked_amount: string;
                                unlock_height: number;
                                locked_address: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "stx_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                sender: string;
                                recipient: string;
                                amount: string;
                                memo?: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "fungible_token_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                asset_id: string;
                                sender: string;
                                recipient: string;
                                amount: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "non_fungible_token_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                asset_id: string;
                                sender: string;
                                recipient: string;
                                value: {
                                    hex: string;
                                    repr: string;
                                };
                            };
                        }))[];
                        /** @enum {string} */
                        tx_type: "contract_call";
                        contract_call: {
                            /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                            contract_id: string;
                            /** @description Name of the Clarity function to be invoked */
                            function_name: string;
                            /** @description Function definition, including function name and type as well as parameter names and types */
                            function_signature: string;
                            function_args?: {
                                hex: string;
                                repr: string;
                                name: string;
                                type: string;
                            }[];
                        };
                    } | {
                        /** @description Transaction ID */
                        tx_id: string;
                        /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                        nonce: number;
                        /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                        fee_rate: string;
                        /** @description Address of the transaction initiator */
                        sender_address: string;
                        sponsor_nonce?: number;
                        /** @description Denotes whether the originating account is the same as the paying account */
                        sponsored: boolean;
                        sponsor_address?: string;
                        post_condition_mode: "allow" | "deny";
                        post_conditions: ({
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "stx";
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "fungible";
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent" | "not_sent";
                            /** @enum {string} */
                            type: "non_fungible";
                            asset_value: {
                                hex: string;
                                repr: string;
                            };
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        })[];
                        /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                        anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                        /** @description Hash of the blocked this transactions was associated with */
                        block_hash: string;
                        /** @description Height of the block this transactions was associated with */
                        block_height: number;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                        block_time_iso: string;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        burn_block_time: number;
                        /** @description Height of the anchor burn block. */
                        burn_block_height: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                        burn_block_time_iso: string;
                        /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                        parent_burn_block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                        parent_burn_block_time_iso: string;
                        /** @description Set to `true` if block corresponds to the canonical chain tip */
                        canonical: boolean;
                        /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                        tx_index: number;
                        /** @description Status of the transaction */
                        tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                        /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                        tx_result: {
                            /** @description Hex string representing the value fo the transaction result */
                            hex: string;
                            /** @description Readable string of the transaction result */
                            repr: string;
                        };
                        /** @description Number of transaction events */
                        event_count: number;
                        /** @description Hash of the previous block. */
                        parent_block_hash: string;
                        /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                        is_unanchored: boolean;
                        /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                        microblock_hash: string;
                        /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                        microblock_sequence: number;
                        /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                        microblock_canonical: boolean;
                        /** @description Execution cost read count. */
                        execution_cost_read_count: number;
                        /** @description Execution cost read length. */
                        execution_cost_read_length: number;
                        /** @description Execution cost runtime. */
                        execution_cost_runtime: number;
                        /** @description Execution cost write count. */
                        execution_cost_write_count: number;
                        /** @description Execution cost write length. */
                        execution_cost_write_length: number;
                        events: (({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "smart_contract_log";
                            tx_id: string;
                            contract_log: {
                                contract_id: string;
                                topic: string;
                                value: {
                                    hex: string;
                                    repr: string;
                                };
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "stx_lock";
                            tx_id: string;
                            stx_lock_event: {
                                locked_amount: string;
                                unlock_height: number;
                                locked_address: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "stx_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                sender: string;
                                recipient: string;
                                amount: string;
                                memo?: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "fungible_token_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                asset_id: string;
                                sender: string;
                                recipient: string;
                                amount: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "non_fungible_token_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                asset_id: string;
                                sender: string;
                                recipient: string;
                                value: {
                                    hex: string;
                                    repr: string;
                                };
                            };
                        }))[];
                        /** @enum {string} */
                        tx_type: "poison_microblock";
                        poison_microblock: {
                            /** @description Hex encoded microblock header */
                            microblock_header_1: string;
                            /** @description Hex encoded microblock header */
                            microblock_header_2: string;
                        };
                    } | {
                        /** @description Transaction ID */
                        tx_id: string;
                        /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                        nonce: number;
                        /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                        fee_rate: string;
                        /** @description Address of the transaction initiator */
                        sender_address: string;
                        sponsor_nonce?: number;
                        /** @description Denotes whether the originating account is the same as the paying account */
                        sponsored: boolean;
                        sponsor_address?: string;
                        post_condition_mode: "allow" | "deny";
                        post_conditions: ({
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "stx";
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "fungible";
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent" | "not_sent";
                            /** @enum {string} */
                            type: "non_fungible";
                            asset_value: {
                                hex: string;
                                repr: string;
                            };
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        })[];
                        /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                        anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                        /** @description Hash of the blocked this transactions was associated with */
                        block_hash: string;
                        /** @description Height of the block this transactions was associated with */
                        block_height: number;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                        block_time_iso: string;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        burn_block_time: number;
                        /** @description Height of the anchor burn block. */
                        burn_block_height: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                        burn_block_time_iso: string;
                        /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                        parent_burn_block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                        parent_burn_block_time_iso: string;
                        /** @description Set to `true` if block corresponds to the canonical chain tip */
                        canonical: boolean;
                        /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                        tx_index: number;
                        /** @description Status of the transaction */
                        tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                        /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                        tx_result: {
                            /** @description Hex string representing the value fo the transaction result */
                            hex: string;
                            /** @description Readable string of the transaction result */
                            repr: string;
                        };
                        /** @description Number of transaction events */
                        event_count: number;
                        /** @description Hash of the previous block. */
                        parent_block_hash: string;
                        /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                        is_unanchored: boolean;
                        /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                        microblock_hash: string;
                        /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                        microblock_sequence: number;
                        /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                        microblock_canonical: boolean;
                        /** @description Execution cost read count. */
                        execution_cost_read_count: number;
                        /** @description Execution cost read length. */
                        execution_cost_read_length: number;
                        /** @description Execution cost runtime. */
                        execution_cost_runtime: number;
                        /** @description Execution cost write count. */
                        execution_cost_write_count: number;
                        /** @description Execution cost write length. */
                        execution_cost_write_length: number;
                        events: (({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "smart_contract_log";
                            tx_id: string;
                            contract_log: {
                                contract_id: string;
                                topic: string;
                                value: {
                                    hex: string;
                                    repr: string;
                                };
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "stx_lock";
                            tx_id: string;
                            stx_lock_event: {
                                locked_amount: string;
                                unlock_height: number;
                                locked_address: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "stx_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                sender: string;
                                recipient: string;
                                amount: string;
                                memo?: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "fungible_token_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                asset_id: string;
                                sender: string;
                                recipient: string;
                                amount: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "non_fungible_token_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                asset_id: string;
                                sender: string;
                                recipient: string;
                                value: {
                                    hex: string;
                                    repr: string;
                                };
                            };
                        }))[];
                        /** @enum {string} */
                        tx_type: "coinbase";
                        coinbase_payload: {
                            /** @description Hex encoded 32-byte scratch space for block leader's use */
                            data: string;
                            alt_recipient?: string | null;
                            vrf_proof?: string | null;
                        };
                    } | {
                        /** @description Transaction ID */
                        tx_id: string;
                        /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                        nonce: number;
                        /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                        fee_rate: string;
                        /** @description Address of the transaction initiator */
                        sender_address: string;
                        sponsor_nonce?: number;
                        /** @description Denotes whether the originating account is the same as the paying account */
                        sponsored: boolean;
                        sponsor_address?: string;
                        post_condition_mode: "allow" | "deny";
                        post_conditions: ({
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "stx";
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "fungible";
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent" | "not_sent";
                            /** @enum {string} */
                            type: "non_fungible";
                            asset_value: {
                                hex: string;
                                repr: string;
                            };
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        })[];
                        /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                        anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                        /** @description Hash of the blocked this transactions was associated with */
                        block_hash: string;
                        /** @description Height of the block this transactions was associated with */
                        block_height: number;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                        block_time_iso: string;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        burn_block_time: number;
                        /** @description Height of the anchor burn block. */
                        burn_block_height: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                        burn_block_time_iso: string;
                        /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                        parent_burn_block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                        parent_burn_block_time_iso: string;
                        /** @description Set to `true` if block corresponds to the canonical chain tip */
                        canonical: boolean;
                        /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                        tx_index: number;
                        /** @description Status of the transaction */
                        tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                        /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                        tx_result: {
                            /** @description Hex string representing the value fo the transaction result */
                            hex: string;
                            /** @description Readable string of the transaction result */
                            repr: string;
                        };
                        /** @description Number of transaction events */
                        event_count: number;
                        /** @description Hash of the previous block. */
                        parent_block_hash: string;
                        /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                        is_unanchored: boolean;
                        /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                        microblock_hash: string;
                        /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                        microblock_sequence: number;
                        /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                        microblock_canonical: boolean;
                        /** @description Execution cost read count. */
                        execution_cost_read_count: number;
                        /** @description Execution cost read length. */
                        execution_cost_read_length: number;
                        /** @description Execution cost runtime. */
                        execution_cost_runtime: number;
                        /** @description Execution cost write count. */
                        execution_cost_write_count: number;
                        /** @description Execution cost write length. */
                        execution_cost_write_length: number;
                        events: (({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "smart_contract_log";
                            tx_id: string;
                            contract_log: {
                                contract_id: string;
                                topic: string;
                                value: {
                                    hex: string;
                                    repr: string;
                                };
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "stx_lock";
                            tx_id: string;
                            stx_lock_event: {
                                locked_amount: string;
                                unlock_height: number;
                                locked_address: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "stx_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                sender: string;
                                recipient: string;
                                amount: string;
                                memo?: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "fungible_token_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                asset_id: string;
                                sender: string;
                                recipient: string;
                                amount: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "non_fungible_token_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                asset_id: string;
                                sender: string;
                                recipient: string;
                                value: {
                                    hex: string;
                                    repr: string;
                                };
                            };
                        }))[];
                        /** @enum {string} */
                        tx_type: "tenure_change";
                        tenure_change_payload: {
                            /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                            tenure_consensus_hash: string;
                            /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                            prev_tenure_consensus_hash: string;
                            /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                            burn_view_consensus_hash: string;
                            /** @description (Hex string) Stacks Block hash */
                            previous_tenure_end: string;
                            /** @description The number of blocks produced in the previous tenure. */
                            previous_tenure_blocks: number;
                            /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                            cause: "block_found" | "extended";
                            /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                            pubkey_hash: string;
                        };
                    }) | ({
                        /** @description Transaction ID */
                        tx_id: string;
                        /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                        nonce: number;
                        /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                        fee_rate: string;
                        /** @description Address of the transaction initiator */
                        sender_address: string;
                        sponsor_nonce?: number;
                        /** @description Denotes whether the originating account is the same as the paying account */
                        sponsored: boolean;
                        sponsor_address?: string;
                        post_condition_mode: "allow" | "deny";
                        post_conditions: ({
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "stx";
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "fungible";
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent" | "not_sent";
                            /** @enum {string} */
                            type: "non_fungible";
                            asset_value: {
                                hex: string;
                                repr: string;
                            };
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        })[];
                        /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                        anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                        /** @description Status of the transaction */
                        tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                        /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                        receipt_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                        receipt_time_iso: string;
                        /** @enum {string} */
                        tx_type: "token_transfer";
                        token_transfer: {
                            recipient_address: string;
                            /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                            amount: string;
                            /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                            memo: string;
                        };
                    } | {
                        /** @description Transaction ID */
                        tx_id: string;
                        /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                        nonce: number;
                        /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                        fee_rate: string;
                        /** @description Address of the transaction initiator */
                        sender_address: string;
                        sponsor_nonce?: number;
                        /** @description Denotes whether the originating account is the same as the paying account */
                        sponsored: boolean;
                        sponsor_address?: string;
                        post_condition_mode: "allow" | "deny";
                        post_conditions: ({
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "stx";
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "fungible";
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent" | "not_sent";
                            /** @enum {string} */
                            type: "non_fungible";
                            asset_value: {
                                hex: string;
                                repr: string;
                            };
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        })[];
                        /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                        anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                        /** @description Status of the transaction */
                        tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                        /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                        receipt_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                        receipt_time_iso: string;
                        /** @enum {string} */
                        tx_type: "smart_contract";
                        smart_contract: {
                            clarity_version: number | null;
                            /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                            contract_id: string;
                            /** @description Clarity code of the smart contract being deployed */
                            source_code: string;
                        };
                    } | {
                        /** @description Transaction ID */
                        tx_id: string;
                        /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                        nonce: number;
                        /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                        fee_rate: string;
                        /** @description Address of the transaction initiator */
                        sender_address: string;
                        sponsor_nonce?: number;
                        /** @description Denotes whether the originating account is the same as the paying account */
                        sponsored: boolean;
                        sponsor_address?: string;
                        post_condition_mode: "allow" | "deny";
                        post_conditions: ({
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "stx";
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "fungible";
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent" | "not_sent";
                            /** @enum {string} */
                            type: "non_fungible";
                            asset_value: {
                                hex: string;
                                repr: string;
                            };
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        })[];
                        /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                        anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                        /** @description Status of the transaction */
                        tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                        /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                        receipt_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                        receipt_time_iso: string;
                        /** @enum {string} */
                        tx_type: "contract_call";
                        contract_call: {
                            /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                            contract_id: string;
                            /** @description Name of the Clarity function to be invoked */
                            function_name: string;
                            /** @description Function definition, including function name and type as well as parameter names and types */
                            function_signature: string;
                            function_args?: {
                                hex: string;
                                repr: string;
                                name: string;
                                type: string;
                            }[];
                        };
                    } | {
                        /** @description Transaction ID */
                        tx_id: string;
                        /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                        nonce: number;
                        /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                        fee_rate: string;
                        /** @description Address of the transaction initiator */
                        sender_address: string;
                        sponsor_nonce?: number;
                        /** @description Denotes whether the originating account is the same as the paying account */
                        sponsored: boolean;
                        sponsor_address?: string;
                        post_condition_mode: "allow" | "deny";
                        post_conditions: ({
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "stx";
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "fungible";
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent" | "not_sent";
                            /** @enum {string} */
                            type: "non_fungible";
                            asset_value: {
                                hex: string;
                                repr: string;
                            };
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        })[];
                        /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                        anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                        /** @description Status of the transaction */
                        tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                        /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                        receipt_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                        receipt_time_iso: string;
                        /** @enum {string} */
                        tx_type: "poison_microblock";
                        poison_microblock: {
                            /** @description Hex encoded microblock header */
                            microblock_header_1: string;
                            /** @description Hex encoded microblock header */
                            microblock_header_2: string;
                        };
                    } | {
                        /** @description Transaction ID */
                        tx_id: string;
                        /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                        nonce: number;
                        /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                        fee_rate: string;
                        /** @description Address of the transaction initiator */
                        sender_address: string;
                        sponsor_nonce?: number;
                        /** @description Denotes whether the originating account is the same as the paying account */
                        sponsored: boolean;
                        sponsor_address?: string;
                        post_condition_mode: "allow" | "deny";
                        post_conditions: ({
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "stx";
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "fungible";
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent" | "not_sent";
                            /** @enum {string} */
                            type: "non_fungible";
                            asset_value: {
                                hex: string;
                                repr: string;
                            };
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        })[];
                        /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                        anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                        /** @description Status of the transaction */
                        tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                        /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                        receipt_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                        receipt_time_iso: string;
                        /** @enum {string} */
                        tx_type: "coinbase";
                        coinbase_payload: {
                            /** @description Hex encoded 32-byte scratch space for block leader's use */
                            data: string;
                            alt_recipient?: string | null;
                            vrf_proof?: string | null;
                        };
                    } | {
                        /** @description Transaction ID */
                        tx_id: string;
                        /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                        nonce: number;
                        /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                        fee_rate: string;
                        /** @description Address of the transaction initiator */
                        sender_address: string;
                        sponsor_nonce?: number;
                        /** @description Denotes whether the originating account is the same as the paying account */
                        sponsored: boolean;
                        sponsor_address?: string;
                        post_condition_mode: "allow" | "deny";
                        post_conditions: ({
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "stx";
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                            amount: string;
                            /** @enum {string} */
                            type: "fungible";
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        } | {
                            principal: {
                                /** @enum {string} */
                                type_id: "principal_origin";
                            } | {
                                /** @enum {string} */
                                type_id: "principal_standard";
                                address: string;
                            } | {
                                /** @enum {string} */
                                type_id: "principal_contract";
                                address: string;
                                contract_name: string;
                            };
                            condition_code: "sent" | "not_sent";
                            /** @enum {string} */
                            type: "non_fungible";
                            asset_value: {
                                hex: string;
                                repr: string;
                            };
                            asset: {
                                asset_name: string;
                                contract_address: string;
                                contract_name: string;
                            };
                        })[];
                        /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                        anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                        /** @description Status of the transaction */
                        tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                        /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                        receipt_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                        receipt_time_iso: string;
                        /** @enum {string} */
                        tx_type: "tenure_change";
                        tenure_change_payload: {
                            /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                            tenure_consensus_hash: string;
                            /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                            prev_tenure_consensus_hash: string;
                            /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                            burn_view_consensus_hash: string;
                            /** @description (Hex string) Stacks Block hash */
                            previous_tenure_end: string;
                            /** @description The number of blocks produced in the previous tenure. */
                            previous_tenure_blocks: number;
                            /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                            cause: "block_found" | "extended";
                            /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                            pubkey_hash: string;
                        };
                    });
                };
            };
        };
    };
    get_raw_transaction_by_id: {
        parameters: {
            query?: {
                /** @description Results per page */
                event_limit?: number;
                /** @description Result offset */
                event_offset?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Transaction ID
                 * @example 0xf6bd5f4a7b26184a3466340b2e99fd003b4962c0e382a7e4b6a13df3dd7a91c6
                 */
                tx_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description GET raw transaction */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        raw_tx: string;
                    };
                };
            };
        };
    };
    get_transactions_by_block_hash: {
        parameters: {
            query?: {
                /** @description Result offset */
                offset?: number;
                /** @description Results per page */
                limit?: number;
            };
            header?: never;
            path: {
                block_hash: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: ({
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "token_transfer";
                            token_transfer: {
                                recipient_address: string;
                                /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                amount: string;
                                /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                memo: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "smart_contract";
                            smart_contract: {
                                clarity_version: number | null;
                                /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                contract_id: string;
                                /** @description Clarity code of the smart contract being deployed */
                                source_code: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "contract_call";
                            contract_call: {
                                /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                contract_id: string;
                                /** @description Name of the Clarity function to be invoked */
                                function_name: string;
                                /** @description Function definition, including function name and type as well as parameter names and types */
                                function_signature: string;
                                function_args?: {
                                    hex: string;
                                    repr: string;
                                    name: string;
                                    type: string;
                                }[];
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "poison_microblock";
                            poison_microblock: {
                                /** @description Hex encoded microblock header */
                                microblock_header_1: string;
                                /** @description Hex encoded microblock header */
                                microblock_header_2: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "coinbase";
                            coinbase_payload: {
                                /** @description Hex encoded 32-byte scratch space for block leader's use */
                                data: string;
                                alt_recipient?: string | null;
                                vrf_proof?: string | null;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "tenure_change";
                            tenure_change_payload: {
                                /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                tenure_consensus_hash: string;
                                /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                prev_tenure_consensus_hash: string;
                                /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                burn_view_consensus_hash: string;
                                /** @description (Hex string) Stacks Block hash */
                                previous_tenure_end: string;
                                /** @description The number of blocks produced in the previous tenure. */
                                previous_tenure_blocks: number;
                                /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                cause: "block_found" | "extended";
                                /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                pubkey_hash: string;
                            };
                        })[];
                    };
                };
            };
        };
    };
    get_transactions_by_block_height: {
        parameters: {
            query?: {
                /** @description Result offset */
                offset?: number;
                /** @description Results per page */
                limit?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Block height
                 * @example 777678
                 */
                height: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: ({
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "token_transfer";
                            token_transfer: {
                                recipient_address: string;
                                /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                amount: string;
                                /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                memo: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "smart_contract";
                            smart_contract: {
                                clarity_version: number | null;
                                /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                contract_id: string;
                                /** @description Clarity code of the smart contract being deployed */
                                source_code: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "contract_call";
                            contract_call: {
                                /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                contract_id: string;
                                /** @description Name of the Clarity function to be invoked */
                                function_name: string;
                                /** @description Function definition, including function name and type as well as parameter names and types */
                                function_signature: string;
                                function_args?: {
                                    hex: string;
                                    repr: string;
                                    name: string;
                                    type: string;
                                }[];
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "poison_microblock";
                            poison_microblock: {
                                /** @description Hex encoded microblock header */
                                microblock_header_1: string;
                                /** @description Hex encoded microblock header */
                                microblock_header_2: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "coinbase";
                            coinbase_payload: {
                                /** @description Hex encoded 32-byte scratch space for block leader's use */
                                data: string;
                                alt_recipient?: string | null;
                                vrf_proof?: string | null;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "tenure_change";
                            tenure_change_payload: {
                                /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                tenure_consensus_hash: string;
                                /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                prev_tenure_consensus_hash: string;
                                /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                burn_view_consensus_hash: string;
                                /** @description (Hex string) Stacks Block hash */
                                previous_tenure_end: string;
                                /** @description The number of blocks produced in the previous tenure. */
                                previous_tenure_blocks: number;
                                /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                cause: "block_found" | "extended";
                                /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                pubkey_hash: string;
                            };
                        })[];
                    };
                };
            };
        };
    };
    get_stx_supply: {
        parameters: {
            query?: {
                /**
                 * @description Supply details are queried from specified block height. If the block height is not specified, the latest block height is taken as default value. Note that the `block height` is referred to the stacks blockchain.
                 * @example 777678
                 */
                height?: number;
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description GET request that returns network target block times */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description String quoted decimal number of the percentage of STX that have unlocked */
                        unlocked_percent: string;
                        /** @description String quoted decimal number of the total possible number of STX */
                        total_stx: string;
                        /** @description String quoted decimal number of the STX that have been mined or unlocked */
                        unlocked_stx: string;
                        /** @description The block height at which this information was queried */
                        block_height: number;
                    };
                };
            };
        };
    };
    get_stx_supply_total_supply_plain: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        content?: unknown;
                    };
                };
            };
        };
    };
    get_stx_supply_circulating_plain: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        content?: unknown;
                    };
                };
            };
        };
    };
    get_total_stx_supply_legacy_format: {
        parameters: {
            query?: {
                /**
                 * @description Supply details are queried from specified block height. If the block height is not specified, the latest block height is taken as default value. Note that the `block height` is referred to the stacks blockchain.
                 * @example 777678
                 */
                height?: number;
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description GET request that returns network target block times */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description String quoted decimal number of the percentage of STX that have unlocked */
                        unlockedPercent: string;
                        /** @description String quoted decimal number of the total possible number of STX */
                        totalStacks: string;
                        /** @description Same as `totalStacks` but formatted with comma thousands separators */
                        totalStacksFormatted: string;
                        /** @description String quoted decimal number of the STX that have been mined or unlocked */
                        unlockedSupply: string;
                        /** @description Same as `unlockedSupply` but formatted with comma thousands separators */
                        unlockedSupplyFormatted: string;
                        /** @description The block height at which this information was queried */
                        blockHeight: string;
                    };
                };
            };
        };
    };
    get_network_block_times: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description GET request that returns network target block times */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        mainnet: {
                            target_block_time: number;
                        };
                        testnet: {
                            target_block_time: number;
                        };
                    };
                };
            };
        };
    };
    get_network_block_time_by_network: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                network: "testnet" | "mainnet";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description GET request that target block time for a given network */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        target_block_time: number;
                    };
                };
            };
        };
    };
    get_nft_holdings: {
        parameters: {
            query: {
                /**
                 * @description token owner's STX address or Smart Contract ID
                 * @example SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.marketplace-v3
                 */
                principal: string;
                asset_identifiers?: string[];
                /** @description max number of tokens to fetch */
                limit?: number;
                /** @description index of first tokens to fetch */
                offset?: number;
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
                /** @description whether or not to include the complete transaction metadata instead of just `tx_id`. Enabling this option can affect performance and response times. */
                tx_metadata: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Non-Fungible Token holdings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: ({
                            asset_identifier: string;
                            /** @description Non-Fungible Token value */
                            value: {
                                /** @description Hex string representing the identifier of the Non-Fungible Token */
                                hex: string;
                                /** @description Readable string of the Non-Fungible Token identifier */
                                repr: string;
                            };
                            block_height: number;
                            tx_id: string;
                        } | {
                            asset_identifier: string;
                            /** @description Non-Fungible Token value */
                            value: {
                                /** @description Hex string representing the identifier of the Non-Fungible Token */
                                hex: string;
                                /** @description Readable string of the Non-Fungible Token identifier */
                                repr: string;
                            };
                            block_height: number;
                            tx: {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "token_transfer";
                                token_transfer: {
                                    recipient_address: string;
                                    /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                    amount: string;
                                    /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                    memo: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "smart_contract";
                                smart_contract: {
                                    clarity_version: number | null;
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Clarity code of the smart contract being deployed */
                                    source_code: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "contract_call";
                                contract_call: {
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Name of the Clarity function to be invoked */
                                    function_name: string;
                                    /** @description Function definition, including function name and type as well as parameter names and types */
                                    function_signature: string;
                                    function_args?: {
                                        hex: string;
                                        repr: string;
                                        name: string;
                                        type: string;
                                    }[];
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "poison_microblock";
                                poison_microblock: {
                                    /** @description Hex encoded microblock header */
                                    microblock_header_1: string;
                                    /** @description Hex encoded microblock header */
                                    microblock_header_2: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "coinbase";
                                coinbase_payload: {
                                    /** @description Hex encoded 32-byte scratch space for block leader's use */
                                    data: string;
                                    alt_recipient?: string | null;
                                    vrf_proof?: string | null;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "tenure_change";
                                tenure_change_payload: {
                                    /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                    tenure_consensus_hash: string;
                                    /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                    prev_tenure_consensus_hash: string;
                                    /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                    burn_view_consensus_hash: string;
                                    /** @description (Hex string) Stacks Block hash */
                                    previous_tenure_end: string;
                                    /** @description The number of blocks produced in the previous tenure. */
                                    previous_tenure_blocks: number;
                                    /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                    cause: "block_found" | "extended";
                                    /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                    pubkey_hash: string;
                                };
                            };
                        })[];
                    };
                };
            };
        };
    };
    get_nft_history: {
        parameters: {
            query: {
                /**
                 * @description asset class identifier
                 * @example SP2X0TZ59D5SZ8ACQ6YMCHHNR2ZN51Z32E2CJ173.the-explorer-guild::The-Explorer-Guild
                 */
                asset_identifier: string;
                /**
                 * @description hex representation of the token's unique value
                 * @example 0x0100000000000000000000000000000803
                 */
                value: string;
                /** @description max number of events to fetch */
                limit?: number;
                /** @description index of first event to fetch */
                offset?: number;
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
                /** @description whether or not to include the complete transaction metadata instead of just `tx_id`. Enabling this option can affect performance and response times. */
                tx_metadata: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Non-Fungible Token history events */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: ({
                            sender?: string | null;
                            recipient?: string;
                            event_index: number;
                            asset_event_type: string;
                            tx_id: string;
                        } | {
                            sender?: string | null;
                            recipient?: string;
                            event_index: number;
                            asset_event_type: string;
                            tx: {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "token_transfer";
                                token_transfer: {
                                    recipient_address: string;
                                    /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                    amount: string;
                                    /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                    memo: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "smart_contract";
                                smart_contract: {
                                    clarity_version: number | null;
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Clarity code of the smart contract being deployed */
                                    source_code: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "contract_call";
                                contract_call: {
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Name of the Clarity function to be invoked */
                                    function_name: string;
                                    /** @description Function definition, including function name and type as well as parameter names and types */
                                    function_signature: string;
                                    function_args?: {
                                        hex: string;
                                        repr: string;
                                        name: string;
                                        type: string;
                                    }[];
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "poison_microblock";
                                poison_microblock: {
                                    /** @description Hex encoded microblock header */
                                    microblock_header_1: string;
                                    /** @description Hex encoded microblock header */
                                    microblock_header_2: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "coinbase";
                                coinbase_payload: {
                                    /** @description Hex encoded 32-byte scratch space for block leader's use */
                                    data: string;
                                    alt_recipient?: string | null;
                                    vrf_proof?: string | null;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "tenure_change";
                                tenure_change_payload: {
                                    /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                    tenure_consensus_hash: string;
                                    /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                    prev_tenure_consensus_hash: string;
                                    /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                    burn_view_consensus_hash: string;
                                    /** @description (Hex string) Stacks Block hash */
                                    previous_tenure_end: string;
                                    /** @description The number of blocks produced in the previous tenure. */
                                    previous_tenure_blocks: number;
                                    /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                    cause: "block_found" | "extended";
                                    /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                    pubkey_hash: string;
                                };
                            };
                        })[];
                    };
                };
            };
        };
    };
    get_nft_mints: {
        parameters: {
            query: {
                /**
                 * @description asset class identifier
                 * @example SP2X0TZ59D5SZ8ACQ6YMCHHNR2ZN51Z32E2CJ173.the-explorer-guild::The-Explorer-Guild
                 */
                asset_identifier: string;
                /** @description max number of events to fetch */
                limit?: number;
                /** @description index of first event to fetch */
                offset?: number;
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
                /** @description whether or not to include the complete transaction metadata instead of just `tx_id`. Enabling this option can affect performance and response times. */
                tx_metadata: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Non-Fungible Token mint events for an asset identifier */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: ({
                            recipient?: string;
                            event_index: number;
                            /** @description Non-Fungible Token value */
                            value: {
                                /** @description Hex string representing the identifier of the Non-Fungible Token */
                                hex: string;
                                /** @description Readable string of the Non-Fungible Token identifier */
                                repr: string;
                            };
                            tx_id: string;
                        } | {
                            recipient?: string;
                            event_index: number;
                            /** @description Non-Fungible Token value */
                            value: {
                                /** @description Hex string representing the identifier of the Non-Fungible Token */
                                hex: string;
                                /** @description Readable string of the Non-Fungible Token identifier */
                                repr: string;
                            };
                            tx: {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "token_transfer";
                                token_transfer: {
                                    recipient_address: string;
                                    /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                    amount: string;
                                    /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                    memo: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "smart_contract";
                                smart_contract: {
                                    clarity_version: number | null;
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Clarity code of the smart contract being deployed */
                                    source_code: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "contract_call";
                                contract_call: {
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Name of the Clarity function to be invoked */
                                    function_name: string;
                                    /** @description Function definition, including function name and type as well as parameter names and types */
                                    function_signature: string;
                                    function_args?: {
                                        hex: string;
                                        repr: string;
                                        name: string;
                                        type: string;
                                    }[];
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "poison_microblock";
                                poison_microblock: {
                                    /** @description Hex encoded microblock header */
                                    microblock_header_1: string;
                                    /** @description Hex encoded microblock header */
                                    microblock_header_2: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "coinbase";
                                coinbase_payload: {
                                    /** @description Hex encoded 32-byte scratch space for block leader's use */
                                    data: string;
                                    alt_recipient?: string | null;
                                    vrf_proof?: string | null;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "tenure_change";
                                tenure_change_payload: {
                                    /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                    tenure_consensus_hash: string;
                                    /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                    prev_tenure_consensus_hash: string;
                                    /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                    burn_view_consensus_hash: string;
                                    /** @description (Hex string) Stacks Block hash */
                                    previous_tenure_end: string;
                                    /** @description The number of blocks produced in the previous tenure. */
                                    previous_tenure_blocks: number;
                                    /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                    cause: "block_found" | "extended";
                                    /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                    pubkey_hash: string;
                                };
                            };
                        })[];
                    };
                };
            };
        };
    };
    get_ft_holders: {
        parameters: {
            query?: {
                /** @description max number of holders to fetch */
                limit?: number;
                /** @description index of first holder to fetch */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description fungible token identifier */
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The total supply of the token (the sum of all balances)
                         * @example 5817609278457
                         */
                        total_supply: string;
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: {
                            /**
                             * @description Principal of the token holder
                             * @example SP3G2QZHYDZPJ2FBN2V2MB74T5ZQ6FQK2P5QJ2K6
                             */
                            address: string;
                            /**
                             * @description The balance of the token held by the address
                             * @example 174823763
                             */
                            balance: string;
                        }[];
                    };
                };
            };
        };
    };
    get_contracts_by_trait: {
        parameters: {
            query: {
                /** @description JSON abi of the trait. */
                trait_abi: string;
                /** @description max number of contracts fetch */
                limit?: number;
                /** @description index of first contract event to fetch */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description GET list of contracts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        results: {
                            tx_id: string;
                            canonical: boolean;
                            contract_id: string;
                            block_height: number;
                            clarity_version: number | null;
                            source_code: string;
                            abi: string | null;
                        }[];
                    };
                };
            };
        };
    };
    get_contract_by_id: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Contract identifier formatted as `<contract_address>.<contract_name>`
                 * @example SP6P4EJF0VG8V0RB3TQQKJBHDQKEF6NVRD1KZE3C.satoshibles
                 */
                contract_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A Smart Contract Detail */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        tx_id: string;
                        canonical: boolean;
                        contract_id: string;
                        block_height: number;
                        clarity_version: number | null;
                        source_code: string;
                        abi: string | null;
                    };
                };
            };
        };
    };
    get_contract_events_by_id: {
        parameters: {
            query?: {
                /** @description max number of events to fetch */
                limit?: number;
                /** @description Result offset */
                offset?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Contract identifier formatted as `<contract_address>.<contract_name>`
                 * @example SP6P4EJF0VG8V0RB3TQQKJBHDQKEF6NVRD1KZE3C.satoshibles
                 */
                contract_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of events */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        limit: number;
                        offset: number;
                        results: (({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "smart_contract_log";
                            tx_id: string;
                            contract_log: {
                                contract_id: string;
                                topic: string;
                                value: {
                                    hex: string;
                                    repr: string;
                                };
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "stx_lock";
                            tx_id: string;
                            stx_lock_event: {
                                locked_amount: string;
                                unlock_height: number;
                                locked_address: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "stx_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                sender: string;
                                recipient: string;
                                amount: string;
                                memo?: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "fungible_token_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                asset_id: string;
                                sender: string;
                                recipient: string;
                                amount: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "non_fungible_token_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                asset_id: string;
                                sender: string;
                                recipient: string;
                                value: {
                                    hex: string;
                                    repr: string;
                                };
                            };
                        }))[];
                    };
                };
            };
        };
    };
    fetch_fee_rate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request to fetch fee for a transaction */
        requestBody: {
            content: {
                "application/json": {
                    /** @description A serialized transaction */
                    transaction: string;
                };
            };
        };
        responses: {
            /** @description Get fee rate information. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        fee_rate: number;
                    };
                };
            };
        };
    };
    get_microblock_list: {
        parameters: {
            query?: {
                /** @description Max number of microblocks to fetch */
                limit?: number;
                /** @description Result offset */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description GET request that returns microblocks */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: {
                            /** @description Set to `true` if the microblock corresponds to the canonical chain tip. */
                            canonical: boolean;
                            /** @description Set to `true` if the microblock was not orphaned in a following anchor block. Defaults to `true` if the following anchor block has not yet been created. */
                            microblock_canonical: boolean;
                            /** @description The SHA512/256 hash of this microblock. */
                            microblock_hash: string;
                            /** @description A hint to describe how to order a set of microblocks. Starts at 0. */
                            microblock_sequence: number;
                            /** @description The SHA512/256 hash of the previous signed microblock in this stream. */
                            microblock_parent_hash: string;
                            /** @description The anchor block height that confirmed this microblock. */
                            block_height: number;
                            /** @description The height of the anchor block that preceded this microblock. */
                            parent_block_height: number;
                            /** @description The hash of the anchor block that preceded this microblock. */
                            parent_block_hash: string;
                            /** @description The hash of the Bitcoin block that preceded this microblock. */
                            parent_burn_block_hash: string;
                            /** @description The block timestamp of the Bitcoin block that preceded this microblock. */
                            parent_burn_block_time: number;
                            /** @description The ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) formatted block time of the bitcoin block that preceded this microblock. */
                            parent_burn_block_time_iso: string;
                            /** @description The height of the Bitcoin block that preceded this microblock. */
                            parent_burn_block_height: number;
                            block_hash: string | null;
                            /** @description List of transactions included in the microblock */
                            txs: string[];
                        }[];
                    };
                };
            };
        };
    };
    get_microblock_by_hash: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Hash of the microblock
                 * @example 0x3bfcdf84b3012adb544cf0f6df4835f93418c2269a3881885e27b3d58eb82d47
                 */
                hash: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A microblock */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Set to `true` if the microblock corresponds to the canonical chain tip. */
                        canonical: boolean;
                        /** @description Set to `true` if the microblock was not orphaned in a following anchor block. Defaults to `true` if the following anchor block has not yet been created. */
                        microblock_canonical: boolean;
                        /** @description The SHA512/256 hash of this microblock. */
                        microblock_hash: string;
                        /** @description A hint to describe how to order a set of microblocks. Starts at 0. */
                        microblock_sequence: number;
                        /** @description The SHA512/256 hash of the previous signed microblock in this stream. */
                        microblock_parent_hash: string;
                        /** @description The anchor block height that confirmed this microblock. */
                        block_height: number;
                        /** @description The height of the anchor block that preceded this microblock. */
                        parent_block_height: number;
                        /** @description The hash of the anchor block that preceded this microblock. */
                        parent_block_hash: string;
                        /** @description The hash of the Bitcoin block that preceded this microblock. */
                        parent_burn_block_hash: string;
                        /** @description The block timestamp of the Bitcoin block that preceded this microblock. */
                        parent_burn_block_time: number;
                        /** @description The ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) formatted block time of the bitcoin block that preceded this microblock. */
                        parent_burn_block_time_iso: string;
                        /** @description The height of the Bitcoin block that preceded this microblock. */
                        parent_burn_block_height: number;
                        block_hash: string | null;
                        /** @description List of transactions included in the microblock */
                        txs: string[];
                    };
                };
            };
        };
    };
    get_unanchored_txs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total: number;
                        results: ({
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "token_transfer";
                            token_transfer: {
                                recipient_address: string;
                                /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                amount: string;
                                /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                memo: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "smart_contract";
                            smart_contract: {
                                clarity_version: number | null;
                                /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                contract_id: string;
                                /** @description Clarity code of the smart contract being deployed */
                                source_code: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "contract_call";
                            contract_call: {
                                /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                contract_id: string;
                                /** @description Name of the Clarity function to be invoked */
                                function_name: string;
                                /** @description Function definition, including function name and type as well as parameter names and types */
                                function_signature: string;
                                function_args?: {
                                    hex: string;
                                    repr: string;
                                    name: string;
                                    type: string;
                                }[];
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "poison_microblock";
                            poison_microblock: {
                                /** @description Hex encoded microblock header */
                                microblock_header_1: string;
                                /** @description Hex encoded microblock header */
                                microblock_header_2: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "coinbase";
                            coinbase_payload: {
                                /** @description Hex encoded 32-byte scratch space for block leader's use */
                                data: string;
                                alt_recipient?: string | null;
                                vrf_proof?: string | null;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "tenure_change";
                            tenure_change_payload: {
                                /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                tenure_consensus_hash: string;
                                /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                prev_tenure_consensus_hash: string;
                                /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                burn_view_consensus_hash: string;
                                /** @description (Hex string) Stacks Block hash */
                                previous_tenure_end: string;
                                /** @description The number of blocks produced in the previous tenure. */
                                previous_tenure_blocks: number;
                                /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                cause: "block_found" | "extended";
                                /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                pubkey_hash: string;
                            };
                        })[];
                    };
                };
            };
        };
    };
    get_block_list: {
        parameters: {
            query?: {
                /** @description max number of blocks to fetch */
                limit?: number;
                /** @description Result offset */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description GET request that returns blocks */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: {
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Height of the block */
                            height: number;
                            /** @description Hash representing the block */
                            hash: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description The only hash that can uniquely identify an anchored block or an unconfirmed state trie */
                            index_block_hash: string;
                            /** @description Hash of the parent block */
                            parent_block_hash: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Hash of the anchor chain block */
                            burn_block_hash: string;
                            /** @description Height of the anchor chain block */
                            burn_block_height: number;
                            /** @description Anchor chain transaction ID */
                            miner_txid: string;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            /** @description List of transactions included in the block */
                            txs: string[];
                            /** @description The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1. */
                            parent_microblock_hash: string;
                            /** @description The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1. */
                            parent_microblock_sequence: number;
                            /** @description List of microblocks that were accepted in this anchor block. Not every anchored block will have a accepted all (or any) of the previously streamed microblocks. Microblocks that were orphaned are not included in this list. */
                            microblocks_accepted: string[];
                            /** @description List of microblocks that were streamed/produced by this anchor block's miner. This list only includes microblocks that were accepted in the following anchor block. Microblocks that were orphaned are not included in this list. */
                            microblocks_streamed: string[];
                            /** @description List of txs counts in each accepted microblock */
                            microblock_tx_count: {
                                [key: string]: number;
                            };
                        }[];
                    };
                };
            };
        };
    };
    get_block_by_height: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Height of the block
                 * @example 10000
                 */
                height: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A block */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Set to `true` if block corresponds to the canonical chain tip */
                        canonical: boolean;
                        /** @description Height of the block */
                        height: number;
                        /** @description Hash representing the block */
                        hash: string;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                        block_time_iso: string;
                        /** @description The only hash that can uniquely identify an anchored block or an unconfirmed state trie */
                        index_block_hash: string;
                        /** @description Hash of the parent block */
                        parent_block_hash: string;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        burn_block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                        burn_block_time_iso: string;
                        /** @description Hash of the anchor chain block */
                        burn_block_hash: string;
                        /** @description Height of the anchor chain block */
                        burn_block_height: number;
                        /** @description Anchor chain transaction ID */
                        miner_txid: string;
                        /** @description Execution cost read count. */
                        execution_cost_read_count: number;
                        /** @description Execution cost read length. */
                        execution_cost_read_length: number;
                        /** @description Execution cost runtime. */
                        execution_cost_runtime: number;
                        /** @description Execution cost write count. */
                        execution_cost_write_count: number;
                        /** @description Execution cost write length. */
                        execution_cost_write_length: number;
                        /** @description List of transactions included in the block */
                        txs: string[];
                        /** @description The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1. */
                        parent_microblock_hash: string;
                        /** @description The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1. */
                        parent_microblock_sequence: number;
                        /** @description List of microblocks that were accepted in this anchor block. Not every anchored block will have a accepted all (or any) of the previously streamed microblocks. Microblocks that were orphaned are not included in this list. */
                        microblocks_accepted: string[];
                        /** @description List of microblocks that were streamed/produced by this anchor block's miner. This list only includes microblocks that were accepted in the following anchor block. Microblocks that were orphaned are not included in this list. */
                        microblocks_streamed: string[];
                        /** @description List of txs counts in each accepted microblock */
                        microblock_tx_count: {
                            [key: string]: number;
                        };
                    };
                };
            };
        };
    };
    get_block_by_burn_block_height: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Height of the burn chain block
                 * @example 744603
                 */
                burn_block_height: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A block */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Set to `true` if block corresponds to the canonical chain tip */
                        canonical: boolean;
                        /** @description Height of the block */
                        height: number;
                        /** @description Hash representing the block */
                        hash: string;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                        block_time_iso: string;
                        /** @description The only hash that can uniquely identify an anchored block or an unconfirmed state trie */
                        index_block_hash: string;
                        /** @description Hash of the parent block */
                        parent_block_hash: string;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        burn_block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                        burn_block_time_iso: string;
                        /** @description Hash of the anchor chain block */
                        burn_block_hash: string;
                        /** @description Height of the anchor chain block */
                        burn_block_height: number;
                        /** @description Anchor chain transaction ID */
                        miner_txid: string;
                        /** @description Execution cost read count. */
                        execution_cost_read_count: number;
                        /** @description Execution cost read length. */
                        execution_cost_read_length: number;
                        /** @description Execution cost runtime. */
                        execution_cost_runtime: number;
                        /** @description Execution cost write count. */
                        execution_cost_write_count: number;
                        /** @description Execution cost write length. */
                        execution_cost_write_length: number;
                        /** @description List of transactions included in the block */
                        txs: string[];
                        /** @description The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1. */
                        parent_microblock_hash: string;
                        /** @description The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1. */
                        parent_microblock_sequence: number;
                        /** @description List of microblocks that were accepted in this anchor block. Not every anchored block will have a accepted all (or any) of the previously streamed microblocks. Microblocks that were orphaned are not included in this list. */
                        microblocks_accepted: string[];
                        /** @description List of microblocks that were streamed/produced by this anchor block's miner. This list only includes microblocks that were accepted in the following anchor block. Microblocks that were orphaned are not included in this list. */
                        microblocks_streamed: string[];
                        /** @description List of txs counts in each accepted microblock */
                        microblock_tx_count: {
                            [key: string]: number;
                        };
                    };
                };
            };
        };
    };
    get_block_by_hash: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Hash of the block
                 * @example 0x4839a8b01cfb39ffcc0d07d3db31e848d5adf5279d529ed5062300b9f353ff79
                 */
                hash: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A block */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Set to `true` if block corresponds to the canonical chain tip */
                        canonical: boolean;
                        /** @description Height of the block */
                        height: number;
                        /** @description Hash representing the block */
                        hash: string;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                        block_time_iso: string;
                        /** @description The only hash that can uniquely identify an anchored block or an unconfirmed state trie */
                        index_block_hash: string;
                        /** @description Hash of the parent block */
                        parent_block_hash: string;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        burn_block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                        burn_block_time_iso: string;
                        /** @description Hash of the anchor chain block */
                        burn_block_hash: string;
                        /** @description Height of the anchor chain block */
                        burn_block_height: number;
                        /** @description Anchor chain transaction ID */
                        miner_txid: string;
                        /** @description Execution cost read count. */
                        execution_cost_read_count: number;
                        /** @description Execution cost read length. */
                        execution_cost_read_length: number;
                        /** @description Execution cost runtime. */
                        execution_cost_runtime: number;
                        /** @description Execution cost write count. */
                        execution_cost_write_count: number;
                        /** @description Execution cost write length. */
                        execution_cost_write_length: number;
                        /** @description List of transactions included in the block */
                        txs: string[];
                        /** @description The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1. */
                        parent_microblock_hash: string;
                        /** @description The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1. */
                        parent_microblock_sequence: number;
                        /** @description List of microblocks that were accepted in this anchor block. Not every anchored block will have a accepted all (or any) of the previously streamed microblocks. Microblocks that were orphaned are not included in this list. */
                        microblocks_accepted: string[];
                        /** @description List of microblocks that were streamed/produced by this anchor block's miner. This list only includes microblocks that were accepted in the following anchor block. Microblocks that were orphaned are not included in this list. */
                        microblocks_streamed: string[];
                        /** @description List of txs counts in each accepted microblock */
                        microblock_tx_count: {
                            [key: string]: number;
                        };
                    };
                };
            };
        };
    };
    get_block_by_burn_block_hash: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Hash of the burnchain block
                 * @example 0x00000000000000000002bba732926cf68b6eda3e2cdbc2a85af79f10efeeeb10
                 */
                burn_block_hash: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A block */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Set to `true` if block corresponds to the canonical chain tip */
                        canonical: boolean;
                        /** @description Height of the block */
                        height: number;
                        /** @description Hash representing the block */
                        hash: string;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                        block_time_iso: string;
                        /** @description The only hash that can uniquely identify an anchored block or an unconfirmed state trie */
                        index_block_hash: string;
                        /** @description Hash of the parent block */
                        parent_block_hash: string;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        burn_block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                        burn_block_time_iso: string;
                        /** @description Hash of the anchor chain block */
                        burn_block_hash: string;
                        /** @description Height of the anchor chain block */
                        burn_block_height: number;
                        /** @description Anchor chain transaction ID */
                        miner_txid: string;
                        /** @description Execution cost read count. */
                        execution_cost_read_count: number;
                        /** @description Execution cost read length. */
                        execution_cost_read_length: number;
                        /** @description Execution cost runtime. */
                        execution_cost_runtime: number;
                        /** @description Execution cost write count. */
                        execution_cost_write_count: number;
                        /** @description Execution cost write length. */
                        execution_cost_write_length: number;
                        /** @description List of transactions included in the block */
                        txs: string[];
                        /** @description The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1. */
                        parent_microblock_hash: string;
                        /** @description The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1. */
                        parent_microblock_sequence: number;
                        /** @description List of microblocks that were accepted in this anchor block. Not every anchored block will have a accepted all (or any) of the previously streamed microblocks. Microblocks that were orphaned are not included in this list. */
                        microblocks_accepted: string[];
                        /** @description List of microblocks that were streamed/produced by this anchor block's miner. This list only includes microblocks that were accepted in the following anchor block. Microblocks that were orphaned are not included in this list. */
                        microblocks_streamed: string[];
                        /** @description List of txs counts in each accepted microblock */
                        microblock_tx_count: {
                            [key: string]: number;
                        };
                    };
                };
            };
        };
    };
    get_burnchain_reward_slot_holders: {
        parameters: {
            query?: {
                /** @description max number of items to fetch */
                limit?: number;
                /** @description Result offset */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: {
                            /** @description Set to `true` if block corresponds to the canonical burchchain tip */
                            canonical: boolean;
                            /** @description The hash representing the burnchain block */
                            burn_block_hash: string;
                            /** @description Height of the burnchain block */
                            burn_block_height: number;
                            /** @description The recipient address that validly received PoX commitments, in the format native to the burnchain (e.g. B58 encoded for Bitcoin) */
                            address: string;
                            /** @description The index position of the reward entry, useful for ordering when there's more than one slot per burnchain block */
                            slot_index: number;
                        }[];
                    };
                };
            };
        };
    };
    get_burnchain_reward_slot_holders_by_address: {
        parameters: {
            query?: {
                /** @description Results per page */
                limit?: number;
                /** @description Result offset */
                offset?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Reward slot holder recipient address. Should either be in the native burnchain's format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format
                 * @example 36hQtSEXBMevo5chpxhfAGiCTSC34QKgda
                 */
                address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of burnchain reward recipients and amounts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: {
                            /** @description Set to `true` if block corresponds to the canonical burchchain tip */
                            canonical: boolean;
                            /** @description The hash representing the burnchain block */
                            burn_block_hash: string;
                            /** @description Height of the burnchain block */
                            burn_block_height: number;
                            /** @description The recipient address that validly received PoX commitments, in the format native to the burnchain (e.g. B58 encoded for Bitcoin) */
                            address: string;
                            /** @description The index position of the reward entry, useful for ordering when there's more than one slot per burnchain block */
                            slot_index: number;
                        }[];
                    };
                };
            };
        };
    };
    get_burnchain_reward_list: {
        parameters: {
            query?: {
                /** @description Results per page */
                limit?: number;
                /** @description Result offset */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of burnchain reward recipients and amounts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        limit: number;
                        offset: number;
                        results: {
                            /** @description Set to `true` if block corresponds to the canonical burchchain tip */
                            canonical: boolean;
                            /** @description The hash representing the burnchain block */
                            burn_block_hash: string;
                            /** @description Height of the burnchain block */
                            burn_block_height: number;
                            /** @description The total amount of burnchain tokens burned for this burnchain block, in the smallest unit (e.g. satoshis for Bitcoin) */
                            burn_amount: string;
                            /** @description The recipient address that received the burnchain rewards, in the format native to the burnchain (e.g. B58 encoded for Bitcoin) */
                            reward_recipient: string;
                            /** @description The amount of burnchain tokens rewarded to the recipient, in the smallest unit (e.g. satoshis for Bitcoin) */
                            reward_amount: string;
                            /** @description The index position of the reward entry, useful for ordering when there's more than one recipient per burnchain block */
                            reward_index: number;
                        }[];
                    };
                };
            };
        };
    };
    get_burnchain_reward_list_by_address: {
        parameters: {
            query?: {
                /** @description Results per page */
                limit?: number;
                /** @description Result offset */
                offset?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Reward recipient address. Should either be in the native burnchain's format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format
                 * @example 36hQtSEXBMevo5chpxhfAGiCTSC34QKgda
                 */
                address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of burnchain reward recipients and amounts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        limit: number;
                        offset: number;
                        results: {
                            /** @description Set to `true` if block corresponds to the canonical burchchain tip */
                            canonical: boolean;
                            /** @description The hash representing the burnchain block */
                            burn_block_hash: string;
                            /** @description Height of the burnchain block */
                            burn_block_height: number;
                            /** @description The total amount of burnchain tokens burned for this burnchain block, in the smallest unit (e.g. satoshis for Bitcoin) */
                            burn_amount: string;
                            /** @description The recipient address that received the burnchain rewards, in the format native to the burnchain (e.g. B58 encoded for Bitcoin) */
                            reward_recipient: string;
                            /** @description The amount of burnchain tokens rewarded to the recipient, in the smallest unit (e.g. satoshis for Bitcoin) */
                            reward_amount: string;
                            /** @description The index position of the reward entry, useful for ordering when there's more than one recipient per burnchain block */
                            reward_index: number;
                        }[];
                    };
                };
            };
        };
    };
    get_burnchain_rewards_total_by_address: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Reward recipient address. Should either be in the native burnchain's format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format
                 * @example 36hQtSEXBMevo5chpxhfAGiCTSC34QKgda
                 */
                address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Total burnchain rewards made to a recipient */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The recipient address that received the burnchain rewards, in the format native to the burnchain (e.g. B58 encoded for Bitcoin) */
                        reward_recipient: string;
                        /** @description The total amount of burnchain tokens rewarded to the recipient, in the smallest unit (e.g. satoshis for Bitcoin) */
                        reward_amount: string;
                    };
                };
            };
        };
    };
    get_account_stx_balance: {
        parameters: {
            query?: {
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
                /** @description Block hash or block height. Return data representing the state up until that point in time, rather than the current block. Note - Use either of the query parameters but not both at a time. */
                until_block?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Stacks address or a Contract identifier
                 * @example SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0
                 */
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description GET request that returns address balances */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        balance: string;
                        total_sent: string;
                        total_received: string;
                        total_fees_sent: string;
                        total_miner_rewards_received: string;
                        /** @description The transaction where the lock event occurred. Empty if no tokens are locked. */
                        lock_tx_id: string;
                        /** @description The amount of locked STX, as string quoted micro-STX. Zero if no tokens are locked. */
                        locked: string;
                        /** @description The STX chain block height of when the lock event occurred. Zero if no tokens are locked. */
                        lock_height: number;
                        /** @description The burnchain block height of when the lock event occurred. Zero if no tokens are locked. */
                        burnchain_lock_height: number;
                        /** @description The burnchain block height of when the tokens unlock. Zero if no tokens are locked. */
                        burnchain_unlock_height: number;
                    } & {
                        /**
                         * AddressTokenOfferingLocked
                         * @description Token Offering Locked
                         */
                        token_offering_locked?: {
                            /** @description Micro-STX amount still locked at current block height. */
                            total_locked: string;
                            /** @description Micro-STX amount unlocked at current block height. */
                            total_unlocked: string;
                            unlock_schedule: {
                                /** @description Micro-STX amount locked at this block height. */
                                amount: string;
                                block_height: number;
                            }[];
                        };
                    };
                };
            };
        };
    };
    get_account_balance: {
        parameters: {
            query?: {
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
                /** @description Block hash or block height. Return data representing the state up until that point in time, rather than the current block. Note - Use either of the query parameters but not both at a time. */
                until_block?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Stacks address or a Contract identifier
                 * @example SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0
                 */
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description GET request that returns address balances */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** StxBalance */
                        stx: {
                            balance: string;
                            total_sent: string;
                            total_received: string;
                            total_fees_sent: string;
                            total_miner_rewards_received: string;
                            /** @description The transaction where the lock event occurred. Empty if no tokens are locked. */
                            lock_tx_id: string;
                            /** @description The amount of locked STX, as string quoted micro-STX. Zero if no tokens are locked. */
                            locked: string;
                            /** @description The STX chain block height of when the lock event occurred. Zero if no tokens are locked. */
                            lock_height: number;
                            /** @description The burnchain block height of when the lock event occurred. Zero if no tokens are locked. */
                            burnchain_lock_height: number;
                            /** @description The burnchain block height of when the tokens unlock. Zero if no tokens are locked. */
                            burnchain_unlock_height: number;
                        };
                        fungible_tokens: {
                            [key: string]: {
                                balance: string;
                                total_sent: string;
                                total_received: string;
                            };
                        };
                        non_fungible_tokens: {
                            [key: string]: {
                                count: string;
                                total_sent: string;
                                total_received: string;
                            };
                        };
                        /**
                         * AddressTokenOfferingLocked
                         * @description Token Offering Locked
                         */
                        token_offering_locked?: {
                            /** @description Micro-STX amount still locked at current block height. */
                            total_locked: string;
                            /** @description Micro-STX amount unlocked at current block height. */
                            total_unlocked: string;
                            unlock_schedule: {
                                /** @description Micro-STX amount locked at this block height. */
                                amount: string;
                                block_height: number;
                            }[];
                        };
                    };
                };
            };
        };
    };
    get_account_transactions: {
        parameters: {
            query?: {
                /** @description Results per page */
                limit?: number;
                /** @description Result offset */
                offset?: number;
                /** @description Filter for transactions only at this given block height */
                height?: number;
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
                /** @description Block hash or block height. Return data representing the state up until that point in time, rather than the current block. Note - Use either of the query parameters but not both at a time. */
                until_block?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Stacks address or a Contract identifier
                 * @example SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0
                 */
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description GET request that returns account transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: ({
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "token_transfer";
                            token_transfer: {
                                recipient_address: string;
                                /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                amount: string;
                                /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                memo: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "smart_contract";
                            smart_contract: {
                                clarity_version: number | null;
                                /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                contract_id: string;
                                /** @description Clarity code of the smart contract being deployed */
                                source_code: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "contract_call";
                            contract_call: {
                                /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                contract_id: string;
                                /** @description Name of the Clarity function to be invoked */
                                function_name: string;
                                /** @description Function definition, including function name and type as well as parameter names and types */
                                function_signature: string;
                                function_args?: {
                                    hex: string;
                                    repr: string;
                                    name: string;
                                    type: string;
                                }[];
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "poison_microblock";
                            poison_microblock: {
                                /** @description Hex encoded microblock header */
                                microblock_header_1: string;
                                /** @description Hex encoded microblock header */
                                microblock_header_2: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "coinbase";
                            coinbase_payload: {
                                /** @description Hex encoded 32-byte scratch space for block leader's use */
                                data: string;
                                alt_recipient?: string | null;
                                vrf_proof?: string | null;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "tenure_change";
                            tenure_change_payload: {
                                /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                tenure_consensus_hash: string;
                                /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                prev_tenure_consensus_hash: string;
                                /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                burn_view_consensus_hash: string;
                                /** @description (Hex string) Stacks Block hash */
                                previous_tenure_end: string;
                                /** @description The number of blocks produced in the previous tenure. */
                                previous_tenure_blocks: number;
                                /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                cause: "block_found" | "extended";
                                /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                pubkey_hash: string;
                            };
                        })[];
                    };
                };
            };
        };
    };
    get_single_transaction_with_transfers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Stacks address or a Contract identifier
                 * @example SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0
                 */
                principal: string;
                /**
                 * @description Transaction ID
                 * @example 0x34d79c7cfc2fe525438736733e501a4bf0308a5556e3e080d1e2c0858aad7448
                 */
                tx_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Transaction with STX transfers for a given address */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        tx: {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "token_transfer";
                            token_transfer: {
                                recipient_address: string;
                                /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                amount: string;
                                /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                memo: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "smart_contract";
                            smart_contract: {
                                clarity_version: number | null;
                                /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                contract_id: string;
                                /** @description Clarity code of the smart contract being deployed */
                                source_code: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "contract_call";
                            contract_call: {
                                /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                contract_id: string;
                                /** @description Name of the Clarity function to be invoked */
                                function_name: string;
                                /** @description Function definition, including function name and type as well as parameter names and types */
                                function_signature: string;
                                function_args?: {
                                    hex: string;
                                    repr: string;
                                    name: string;
                                    type: string;
                                }[];
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "poison_microblock";
                            poison_microblock: {
                                /** @description Hex encoded microblock header */
                                microblock_header_1: string;
                                /** @description Hex encoded microblock header */
                                microblock_header_2: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "coinbase";
                            coinbase_payload: {
                                /** @description Hex encoded 32-byte scratch space for block leader's use */
                                data: string;
                                alt_recipient?: string | null;
                                vrf_proof?: string | null;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "tenure_change";
                            tenure_change_payload: {
                                /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                tenure_consensus_hash: string;
                                /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                prev_tenure_consensus_hash: string;
                                /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                burn_view_consensus_hash: string;
                                /** @description (Hex string) Stacks Block hash */
                                previous_tenure_end: string;
                                /** @description The number of blocks produced in the previous tenure. */
                                previous_tenure_blocks: number;
                                /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                cause: "block_found" | "extended";
                                /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                pubkey_hash: string;
                            };
                        };
                        /** @description Total sent from the given address, including the tx fee, in micro-STX as an integer string. */
                        stx_sent: string;
                        /** @description Total received by the given address in micro-STX as an integer string. */
                        stx_received: string;
                        stx_transfers: {
                            /** @description Amount transferred in micro-STX as an integer string. */
                            amount: string;
                            /** @description Principal that sent STX. This is unspecified if the STX were minted. */
                            sender?: string;
                            /** @description Principal that received STX. This is unspecified if the STX were burned. */
                            recipient?: string;
                        }[];
                        ft_transfers?: {
                            /** @description Amount transferred as an integer string. This balance does not factor in possible SIP-010 decimals. */
                            amount: string;
                            /** @description Fungible Token asset identifier. */
                            asset_identifier: string;
                            /** @description Principal that sent the asset. */
                            sender?: string;
                            /** @description Principal that received the asset. */
                            recipient?: string;
                        }[];
                        nft_transfers?: {
                            /** @description Non Fungible Token asset value. */
                            value: {
                                hex: string;
                                repr: string;
                            };
                            /** @description Non Fungible Token asset identifier. */
                            asset_identifier: string;
                            /** @description Principal that sent the asset. */
                            sender?: string;
                            /** @description Principal that received the asset. */
                            recipient?: string;
                        }[];
                    };
                };
            };
        };
    };
    get_account_transactions_with_transfers: {
        parameters: {
            query?: {
                /** @description Results per page */
                limit?: number;
                /** @description Result offset */
                offset?: number;
                /** @description Filter for transactions only at this given block height */
                height?: number;
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
                /** @description Block hash or block height. Return data representing the state up until that point in time, rather than the current block. Note - Use either of the query parameters but not both at a time. */
                until_block?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Stacks address or a Contract identifier
                 * @example SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0
                 */
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: {
                            tx: {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "token_transfer";
                                token_transfer: {
                                    recipient_address: string;
                                    /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                    amount: string;
                                    /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                    memo: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "smart_contract";
                                smart_contract: {
                                    clarity_version: number | null;
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Clarity code of the smart contract being deployed */
                                    source_code: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "contract_call";
                                contract_call: {
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Name of the Clarity function to be invoked */
                                    function_name: string;
                                    /** @description Function definition, including function name and type as well as parameter names and types */
                                    function_signature: string;
                                    function_args?: {
                                        hex: string;
                                        repr: string;
                                        name: string;
                                        type: string;
                                    }[];
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "poison_microblock";
                                poison_microblock: {
                                    /** @description Hex encoded microblock header */
                                    microblock_header_1: string;
                                    /** @description Hex encoded microblock header */
                                    microblock_header_2: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "coinbase";
                                coinbase_payload: {
                                    /** @description Hex encoded 32-byte scratch space for block leader's use */
                                    data: string;
                                    alt_recipient?: string | null;
                                    vrf_proof?: string | null;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "tenure_change";
                                tenure_change_payload: {
                                    /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                    tenure_consensus_hash: string;
                                    /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                    prev_tenure_consensus_hash: string;
                                    /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                    burn_view_consensus_hash: string;
                                    /** @description (Hex string) Stacks Block hash */
                                    previous_tenure_end: string;
                                    /** @description The number of blocks produced in the previous tenure. */
                                    previous_tenure_blocks: number;
                                    /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                    cause: "block_found" | "extended";
                                    /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                    pubkey_hash: string;
                                };
                            };
                            /** @description Total sent from the given address, including the tx fee, in micro-STX as an integer string. */
                            stx_sent: string;
                            /** @description Total received by the given address in micro-STX as an integer string. */
                            stx_received: string;
                            stx_transfers: {
                                /** @description Amount transferred in micro-STX as an integer string. */
                                amount: string;
                                /** @description Principal that sent STX. This is unspecified if the STX were minted. */
                                sender?: string;
                                /** @description Principal that received STX. This is unspecified if the STX were burned. */
                                recipient?: string;
                            }[];
                            ft_transfers?: {
                                /** @description Amount transferred as an integer string. This balance does not factor in possible SIP-010 decimals. */
                                amount: string;
                                /** @description Fungible Token asset identifier. */
                                asset_identifier: string;
                                /** @description Principal that sent the asset. */
                                sender?: string;
                                /** @description Principal that received the asset. */
                                recipient?: string;
                            }[];
                            nft_transfers?: {
                                /** @description Non Fungible Token asset value. */
                                value: {
                                    hex: string;
                                    repr: string;
                                };
                                /** @description Non Fungible Token asset identifier. */
                                asset_identifier: string;
                                /** @description Principal that sent the asset. */
                                sender?: string;
                                /** @description Principal that received the asset. */
                                recipient?: string;
                            }[];
                        }[];
                    };
                };
            };
        };
    };
    get_account_assets: {
        parameters: {
            query?: {
                /** @description Results per page */
                limit?: number;
                /** @description Result offset */
                offset?: number;
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
                /** @description Block hash or block height. Return data representing the state up until that point in time, rather than the current block. Note - Use either of the query parameters but not both at a time. */
                until_block?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Stacks address or a Contract identifier
                 * @example SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0
                 */
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: (({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "smart_contract_log";
                            tx_id: string;
                            contract_log: {
                                contract_id: string;
                                topic: string;
                                value: {
                                    hex: string;
                                    repr: string;
                                };
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "stx_lock";
                            tx_id: string;
                            stx_lock_event: {
                                locked_amount: string;
                                unlock_height: number;
                                locked_address: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "stx_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                sender: string;
                                recipient: string;
                                amount: string;
                                memo?: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "fungible_token_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                asset_id: string;
                                sender: string;
                                recipient: string;
                                amount: string;
                            };
                        }) | ({
                            event_index: number;
                        } & {
                            /** @enum {string} */
                            event_type: "non_fungible_token_asset";
                            tx_id: string;
                            asset: {
                                asset_event_type: "transfer" | "mint" | "burn";
                                asset_id: string;
                                sender: string;
                                recipient: string;
                                value: {
                                    hex: string;
                                    repr: string;
                                };
                            };
                        }))[];
                    };
                };
            };
        };
    };
    get_account_inbound: {
        parameters: {
            query?: {
                /** @description Results per page */
                limit?: number;
                /** @description Result offset */
                offset?: number;
                /** @description Filter for transactions only at this given block height */
                height?: number;
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
                /** @description Block hash or block height. Return data representing the state up until that point in time, rather than the current block. Note - Use either of the query parameters but not both at a time. */
                until_block?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Stacks address or a Contract identifier
                 * @example SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0
                 */
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: {
                            /** @description Principal that sent this transfer */
                            sender: string;
                            /** @description Transfer amount in micro-STX as integer string */
                            amount: string;
                            /** @description Hex encoded memo bytes associated with the transfer */
                            memo: string;
                            /** @description Block height at which this transfer occurred */
                            block_height: number;
                            /** @description The transaction ID in which this transfer occurred */
                            tx_id: string;
                            /** @description Indicates if the transfer is from a stx-transfer transaction or a contract-call transaction */
                            transfer_type: "bulk-send" | "stx-transfer" | "stx-transfer-memo";
                            /** @description Index of the transaction within a block */
                            tx_index: number;
                        }[];
                    };
                };
            };
        };
    };
    get_address_mempool_transactions: {
        parameters: {
            query?: {
                /** @description Results per page */
                limit?: number;
                /** @description Result offset */
                offset?: number;
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description Stacks address or a Contract identifier
                 * @example SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0
                 */
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of mempool transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: ({
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Status of the transaction */
                            tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                            /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                            receipt_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                            receipt_time_iso: string;
                            /** @enum {string} */
                            tx_type: "token_transfer";
                            token_transfer: {
                                recipient_address: string;
                                /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                amount: string;
                                /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                memo: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Status of the transaction */
                            tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                            /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                            receipt_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                            receipt_time_iso: string;
                            /** @enum {string} */
                            tx_type: "smart_contract";
                            smart_contract: {
                                clarity_version: number | null;
                                /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                contract_id: string;
                                /** @description Clarity code of the smart contract being deployed */
                                source_code: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Status of the transaction */
                            tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                            /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                            receipt_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                            receipt_time_iso: string;
                            /** @enum {string} */
                            tx_type: "contract_call";
                            contract_call: {
                                /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                contract_id: string;
                                /** @description Name of the Clarity function to be invoked */
                                function_name: string;
                                /** @description Function definition, including function name and type as well as parameter names and types */
                                function_signature: string;
                                function_args?: {
                                    hex: string;
                                    repr: string;
                                    name: string;
                                    type: string;
                                }[];
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Status of the transaction */
                            tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                            /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                            receipt_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                            receipt_time_iso: string;
                            /** @enum {string} */
                            tx_type: "poison_microblock";
                            poison_microblock: {
                                /** @description Hex encoded microblock header */
                                microblock_header_1: string;
                                /** @description Hex encoded microblock header */
                                microblock_header_2: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Status of the transaction */
                            tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                            /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                            receipt_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                            receipt_time_iso: string;
                            /** @enum {string} */
                            tx_type: "coinbase";
                            coinbase_payload: {
                                /** @description Hex encoded 32-byte scratch space for block leader's use */
                                data: string;
                                alt_recipient?: string | null;
                                vrf_proof?: string | null;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Status of the transaction */
                            tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                            /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                            receipt_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                            receipt_time_iso: string;
                            /** @enum {string} */
                            tx_type: "tenure_change";
                            tenure_change_payload: {
                                /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                tenure_consensus_hash: string;
                                /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                prev_tenure_consensus_hash: string;
                                /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                burn_view_consensus_hash: string;
                                /** @description (Hex string) Stacks Block hash */
                                previous_tenure_end: string;
                                /** @description The number of blocks produced in the previous tenure. */
                                previous_tenure_blocks: number;
                                /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                cause: "block_found" | "extended";
                                /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                pubkey_hash: string;
                            };
                        })[];
                    };
                };
            };
        };
    };
    get_account_nonces: {
        parameters: {
            query?: {
                /**
                 * @description Optionally get the nonce at a given block height.
                 * @example 66119
                 */
                block_height?: number;
                /**
                 * @description Optionally get the nonce at a given block hash. Note - Use either of the query parameters but not both at a time.
                 * @example 0x72d53f3cba39e149dcd42708e535bdae03d73e60d2fe853aaf61c0b392f521e9
                 */
                block_hash?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Stacks address or a Contract identifier
                 * @example SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0
                 */
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The latest nonce values used by an account by inspecting the mempool, microblock transactions, and anchored transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        last_mempool_tx_nonce: number | null;
                        last_executed_tx_nonce: number | null;
                        /** @description The likely nonce required for creating the next transaction, based on the last nonces seen by the API. This can be incorrect if the API's mempool or transactions aren't fully synchronized, even by a small amount, or if a previous transaction is still propagating through the Stacks blockchain network when this endpoint is called. */
                        possible_next_nonce: number;
                        /** @description Nonces that appear to be missing and likely causing a mempool transaction to be stuck. */
                        detected_missing_nonces: number[];
                        /** @description Nonces currently in mempool for this address. */
                        detected_mempool_nonces: number[];
                    };
                };
            };
        };
    };
    search_by_id: {
        parameters: {
            query?: {
                /** @description This includes the detailed data for purticular hash in the response */
                include_metadata?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description The hex hash string for a block or transaction, account address, or contract address
                 * @example 0xcf8b233f19f6c07d2dc1963302d2436efd36e9afac127bf6582824a13961c06d
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        found: true;
                        result: {
                            /** @description The id used to search this query. */
                            entity_id: string;
                            /** @enum {string} */
                            entity_type: "standard_address";
                            /**
                             * AddressStxBalance
                             * @description GET request that returns address balances
                             */
                            metadata?: {
                                balance: string;
                                total_sent: string;
                                total_received: string;
                                total_fees_sent: string;
                                total_miner_rewards_received: string;
                                /** @description The transaction where the lock event occurred. Empty if no tokens are locked. */
                                lock_tx_id: string;
                                /** @description The amount of locked STX, as string quoted micro-STX. Zero if no tokens are locked. */
                                locked: string;
                                /** @description The STX chain block height of when the lock event occurred. Zero if no tokens are locked. */
                                lock_height: number;
                                /** @description The burnchain block height of when the lock event occurred. Zero if no tokens are locked. */
                                burnchain_lock_height: number;
                                /** @description The burnchain block height of when the tokens unlock. Zero if no tokens are locked. */
                                burnchain_unlock_height: number;
                            } & {
                                /**
                                 * AddressTokenOfferingLocked
                                 * @description Token Offering Locked
                                 */
                                token_offering_locked?: {
                                    /** @description Micro-STX amount still locked at current block height. */
                                    total_locked: string;
                                    /** @description Micro-STX amount unlocked at current block height. */
                                    total_unlocked: string;
                                    unlock_schedule: {
                                        /** @description Micro-STX amount locked at this block height. */
                                        amount: string;
                                        block_height: number;
                                    }[];
                                };
                            };
                        } | {
                            /** @description The id used to search this query. */
                            entity_id: string;
                            /** @enum {string} */
                            entity_type: "block_hash";
                            block_data: {
                                canonical: boolean;
                                hash: string;
                                parent_block_hash: string;
                                burn_block_time: number;
                                height: number;
                            };
                            /**
                             * Block
                             * @description A block
                             */
                            metadata?: {
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Height of the block */
                                height: number;
                                /** @description Hash representing the block */
                                hash: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description The only hash that can uniquely identify an anchored block or an unconfirmed state trie */
                                index_block_hash: string;
                                /** @description Hash of the parent block */
                                parent_block_hash: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Hash of the anchor chain block */
                                burn_block_hash: string;
                                /** @description Height of the anchor chain block */
                                burn_block_height: number;
                                /** @description Anchor chain transaction ID */
                                miner_txid: string;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                /** @description List of transactions included in the block */
                                txs: string[];
                                /** @description The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1. */
                                parent_microblock_hash: string;
                                /** @description The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1. */
                                parent_microblock_sequence: number;
                                /** @description List of microblocks that were accepted in this anchor block. Not every anchored block will have a accepted all (or any) of the previously streamed microblocks. Microblocks that were orphaned are not included in this list. */
                                microblocks_accepted: string[];
                                /** @description List of microblocks that were streamed/produced by this anchor block's miner. This list only includes microblocks that were accepted in the following anchor block. Microblocks that were orphaned are not included in this list. */
                                microblocks_streamed: string[];
                                /** @description List of txs counts in each accepted microblock */
                                microblock_tx_count: {
                                    [key: string]: number;
                                };
                            };
                        } | {
                            /** @description The id used to search this query. */
                            entity_id: string;
                            /** @enum {string} */
                            entity_type: "contract_address";
                            tx_data?: {
                                canonical?: boolean;
                                block_hash?: string;
                                burn_block_time?: number;
                                block_height?: number;
                                tx_type: string;
                                tx_id: string;
                            };
                            metadata?: ({
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "token_transfer";
                                token_transfer: {
                                    recipient_address: string;
                                    /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                    amount: string;
                                    /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                    memo: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "smart_contract";
                                smart_contract: {
                                    clarity_version: number | null;
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Clarity code of the smart contract being deployed */
                                    source_code: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "contract_call";
                                contract_call: {
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Name of the Clarity function to be invoked */
                                    function_name: string;
                                    /** @description Function definition, including function name and type as well as parameter names and types */
                                    function_signature: string;
                                    function_args?: {
                                        hex: string;
                                        repr: string;
                                        name: string;
                                        type: string;
                                    }[];
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "poison_microblock";
                                poison_microblock: {
                                    /** @description Hex encoded microblock header */
                                    microblock_header_1: string;
                                    /** @description Hex encoded microblock header */
                                    microblock_header_2: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "coinbase";
                                coinbase_payload: {
                                    /** @description Hex encoded 32-byte scratch space for block leader's use */
                                    data: string;
                                    alt_recipient?: string | null;
                                    vrf_proof?: string | null;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "tenure_change";
                                tenure_change_payload: {
                                    /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                    tenure_consensus_hash: string;
                                    /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                    prev_tenure_consensus_hash: string;
                                    /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                    burn_view_consensus_hash: string;
                                    /** @description (Hex string) Stacks Block hash */
                                    previous_tenure_end: string;
                                    /** @description The number of blocks produced in the previous tenure. */
                                    previous_tenure_blocks: number;
                                    /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                    cause: "block_found" | "extended";
                                    /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                    pubkey_hash: string;
                                };
                            }) | ({
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Status of the transaction */
                                tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                                /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                                receipt_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                                receipt_time_iso: string;
                                /** @enum {string} */
                                tx_type: "token_transfer";
                                token_transfer: {
                                    recipient_address: string;
                                    /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                    amount: string;
                                    /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                    memo: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Status of the transaction */
                                tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                                /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                                receipt_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                                receipt_time_iso: string;
                                /** @enum {string} */
                                tx_type: "smart_contract";
                                smart_contract: {
                                    clarity_version: number | null;
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Clarity code of the smart contract being deployed */
                                    source_code: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Status of the transaction */
                                tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                                /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                                receipt_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                                receipt_time_iso: string;
                                /** @enum {string} */
                                tx_type: "contract_call";
                                contract_call: {
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Name of the Clarity function to be invoked */
                                    function_name: string;
                                    /** @description Function definition, including function name and type as well as parameter names and types */
                                    function_signature: string;
                                    function_args?: {
                                        hex: string;
                                        repr: string;
                                        name: string;
                                        type: string;
                                    }[];
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Status of the transaction */
                                tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                                /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                                receipt_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                                receipt_time_iso: string;
                                /** @enum {string} */
                                tx_type: "poison_microblock";
                                poison_microblock: {
                                    /** @description Hex encoded microblock header */
                                    microblock_header_1: string;
                                    /** @description Hex encoded microblock header */
                                    microblock_header_2: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Status of the transaction */
                                tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                                /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                                receipt_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                                receipt_time_iso: string;
                                /** @enum {string} */
                                tx_type: "coinbase";
                                coinbase_payload: {
                                    /** @description Hex encoded 32-byte scratch space for block leader's use */
                                    data: string;
                                    alt_recipient?: string | null;
                                    vrf_proof?: string | null;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Status of the transaction */
                                tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                                /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                                receipt_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                                receipt_time_iso: string;
                                /** @enum {string} */
                                tx_type: "tenure_change";
                                tenure_change_payload: {
                                    /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                    tenure_consensus_hash: string;
                                    /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                    prev_tenure_consensus_hash: string;
                                    /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                    burn_view_consensus_hash: string;
                                    /** @description (Hex string) Stacks Block hash */
                                    previous_tenure_end: string;
                                    /** @description The number of blocks produced in the previous tenure. */
                                    previous_tenure_blocks: number;
                                    /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                    cause: "block_found" | "extended";
                                    /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                    pubkey_hash: string;
                                };
                            });
                        } | {
                            /** @description The id used to search this query. */
                            entity_id: string;
                            /** @enum {string} */
                            entity_type: "mempool_tx_id";
                            tx_data: {
                                tx_type: string;
                            };
                            metadata?: {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Status of the transaction */
                                tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                                /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                                receipt_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                                receipt_time_iso: string;
                                /** @enum {string} */
                                tx_type: "token_transfer";
                                token_transfer: {
                                    recipient_address: string;
                                    /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                    amount: string;
                                    /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                    memo: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Status of the transaction */
                                tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                                /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                                receipt_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                                receipt_time_iso: string;
                                /** @enum {string} */
                                tx_type: "smart_contract";
                                smart_contract: {
                                    clarity_version: number | null;
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Clarity code of the smart contract being deployed */
                                    source_code: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Status of the transaction */
                                tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                                /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                                receipt_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                                receipt_time_iso: string;
                                /** @enum {string} */
                                tx_type: "contract_call";
                                contract_call: {
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Name of the Clarity function to be invoked */
                                    function_name: string;
                                    /** @description Function definition, including function name and type as well as parameter names and types */
                                    function_signature: string;
                                    function_args?: {
                                        hex: string;
                                        repr: string;
                                        name: string;
                                        type: string;
                                    }[];
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Status of the transaction */
                                tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                                /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                                receipt_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                                receipt_time_iso: string;
                                /** @enum {string} */
                                tx_type: "poison_microblock";
                                poison_microblock: {
                                    /** @description Hex encoded microblock header */
                                    microblock_header_1: string;
                                    /** @description Hex encoded microblock header */
                                    microblock_header_2: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Status of the transaction */
                                tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                                /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                                receipt_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                                receipt_time_iso: string;
                                /** @enum {string} */
                                tx_type: "coinbase";
                                coinbase_payload: {
                                    /** @description Hex encoded 32-byte scratch space for block leader's use */
                                    data: string;
                                    alt_recipient?: string | null;
                                    vrf_proof?: string | null;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Status of the transaction */
                                tx_status: "pending" | "dropped_replace_by_fee" | "dropped_replace_across_fork" | "dropped_too_expensive" | "dropped_stale_garbage_collect" | "dropped_problematic";
                                /** @description A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node. */
                                receipt_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node. */
                                receipt_time_iso: string;
                                /** @enum {string} */
                                tx_type: "tenure_change";
                                tenure_change_payload: {
                                    /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                    tenure_consensus_hash: string;
                                    /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                    prev_tenure_consensus_hash: string;
                                    /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                    burn_view_consensus_hash: string;
                                    /** @description (Hex string) Stacks Block hash */
                                    previous_tenure_end: string;
                                    /** @description The number of blocks produced in the previous tenure. */
                                    previous_tenure_blocks: number;
                                    /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                    cause: "block_found" | "extended";
                                    /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                    pubkey_hash: string;
                                };
                            };
                        } | {
                            /** @description The id used to search this query. */
                            entity_id: string;
                            /** @enum {string} */
                            entity_type: "tx_id";
                            tx_data: {
                                canonical: boolean;
                                block_hash: string;
                                burn_block_time: number;
                                block_height: number;
                                tx_type: string;
                            };
                            metadata?: {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "token_transfer";
                                token_transfer: {
                                    recipient_address: string;
                                    /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                    amount: string;
                                    /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                    memo: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "smart_contract";
                                smart_contract: {
                                    clarity_version: number | null;
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Clarity code of the smart contract being deployed */
                                    source_code: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "contract_call";
                                contract_call: {
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Name of the Clarity function to be invoked */
                                    function_name: string;
                                    /** @description Function definition, including function name and type as well as parameter names and types */
                                    function_signature: string;
                                    function_args?: {
                                        hex: string;
                                        repr: string;
                                        name: string;
                                        type: string;
                                    }[];
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "poison_microblock";
                                poison_microblock: {
                                    /** @description Hex encoded microblock header */
                                    microblock_header_1: string;
                                    /** @description Hex encoded microblock header */
                                    microblock_header_2: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "coinbase";
                                coinbase_payload: {
                                    /** @description Hex encoded 32-byte scratch space for block leader's use */
                                    data: string;
                                    alt_recipient?: string | null;
                                    vrf_proof?: string | null;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "tenure_change";
                                tenure_change_payload: {
                                    /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                    tenure_consensus_hash: string;
                                    /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                    prev_tenure_consensus_hash: string;
                                    /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                    burn_view_consensus_hash: string;
                                    /** @description (Hex string) Stacks Block hash */
                                    previous_tenure_end: string;
                                    /** @description The number of blocks produced in the previous tenure. */
                                    previous_tenure_blocks: number;
                                    /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                    cause: "block_found" | "extended";
                                    /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                    pubkey_hash: string;
                                };
                            };
                        };
                    };
                };
            };
            /** @description Default Response */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        found: false;
                        result: {
                            entity_type: "tx_id" | "mempool_tx_id" | "block_hash" | "standard_address" | "contract_address" | "unknown_hash" | "invalid_term";
                        };
                        error: string;
                    };
                };
            };
        };
    };
    get_pool_delegations: {
        parameters: {
            query?: {
                /** @description Results per page */
                limit?: number;
                /** @description Result offset */
                offset?: number;
                /** @description If specified, only delegation events after the given block will be included */
                after_block?: number;
                height?: number;
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
            };
            header?: never;
            path: {
                pox: "pox2" | "pox3" | "pox4";
                /**
                 * @description Address principal of the stacking pool delegator
                 * @example SPSCWDV3RKV5ZRN1FQD84YE1NQFEDJ9R1F4DYQ11
                 */
                pool_principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: {
                            /** @description The principal of the pool member that issued the delegation */
                            stacker: string;
                            /** @description The pox-addr value specified by the stacker in the delegation operation */
                            pox_addr?: string;
                            /** @description The amount of uSTX delegated by the stacker */
                            amount_ustx: string;
                            /** @description The optional burnchain block unlock height that the stacker may have specified */
                            burn_block_unlock_height?: number;
                            /** @description The block height at which the stacker delegation transaction was mined at */
                            block_height: number;
                            /** @description The tx_id of the stacker delegation operation */
                            tx_id: string;
                        }[];
                    };
                };
            };
        };
    };
    run_faucet_btc: {
        parameters: {
            query?: {
                /**
                 * @description A valid testnet BTC address
                 * @example 2N4M94S1ZPt8HfxydXzL2P7qyzgVq7MHWts
                 */
                address?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A valid testnet BTC address */
                    address?: string;
                } | null;
            };
        };
        responses: {
            /** @description POST request that initiates a transfer of tokens to a specified testnet address */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Indicates if the faucet call was successful
                         * @enum {boolean}
                         */
                        success: true;
                        /** @description The transaction ID for the faucet call */
                        txid: string;
                        /** @description Raw transaction in hex string representation */
                        raw_tx: string;
                    };
                };
            };
            /** @description Default Response */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        success: false;
                        /** @description Error message */
                        error: string;
                    };
                };
            };
        };
    };
    get_btc_balance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description A valid testnet BTC address
                 * @example 2N4M94S1ZPt8HfxydXzL2P7qyzgVq7MHWts
                 */
                address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Address balance in BTC */
                        balance: number;
                    };
                };
            };
            /** @description Default Response */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        success: false;
                        /** @description Error message */
                        error: string;
                    };
                };
            };
        };
    };
    run_faucet_stx: {
        parameters: {
            query?: {
                /**
                 * @description A valid testnet STX address
                 * @example ST3M7N9Q9HDRM7RVP1Q26P0EE69358PZZAZD7KMXQ
                 */
                address?: string;
                /** @description Request the amount of STX tokens needed for individual address stacking */
                stacking?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description [Deprecated -- use query param rather than POST body] A valid testnet STX address */
                    address?: string;
                } | null;
            };
        };
        responses: {
            /** @description POST request that initiates a transfer of tokens to a specified testnet address */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Indicates if the faucet call was successful
                         * @enum {boolean}
                         */
                        success: true;
                        /** @description The transaction ID for the faucet call */
                        txId: string;
                        /** @description Raw transaction in hex string representation */
                        txRaw: string;
                    };
                };
            };
            /** @description Default Response */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Indicates if the faucet call was successful
                         * @enum {boolean}
                         */
                        success: false;
                        /** @description Error message */
                        error: string;
                        help?: string;
                    };
                };
            };
        };
    };
    get_blocks: {
        parameters: {
            query?: {
                /** @description Results per page */
                limit?: number;
                /** @description Result offset */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: {
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Height of the block */
                            height: number;
                            /** @description Hash representing the block */
                            hash: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description The only hash that can uniquely identify an anchored block or an unconfirmed state trie */
                            index_block_hash: string;
                            /** @description Hash of the parent block */
                            parent_block_hash: string;
                            /** @description Index block hash of the parent block */
                            parent_index_block_hash: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Hash of the anchor chain block */
                            burn_block_hash: string;
                            /** @description Height of the anchor chain block */
                            burn_block_height: number;
                            /** @description Anchor chain transaction ID */
                            miner_txid: string;
                            /** @description Number of transactions included in the block */
                            tx_count: number;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                        }[];
                    };
                };
            };
        };
    };
    get_average_block_times: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Average block times over the last hour (in seconds) */
                        last_1h: number;
                        /** @description Average block times over the last 24 hours (in seconds) */
                        last_24h: number;
                        /** @description Average block times over the last 7 days (in seconds) */
                        last_7d: number;
                        /** @description Average block times over the last 30 days (in seconds) */
                        last_30d: number;
                    };
                };
            };
        };
    };
    get_block: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                height_or_hash: "latest" | string | number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Set to `true` if block corresponds to the canonical chain tip */
                        canonical: boolean;
                        /** @description Height of the block */
                        height: number;
                        /** @description Hash representing the block */
                        hash: string;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                        block_time_iso: string;
                        /** @description The only hash that can uniquely identify an anchored block or an unconfirmed state trie */
                        index_block_hash: string;
                        /** @description Hash of the parent block */
                        parent_block_hash: string;
                        /** @description Index block hash of the parent block */
                        parent_index_block_hash: string;
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        burn_block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                        burn_block_time_iso: string;
                        /** @description Hash of the anchor chain block */
                        burn_block_hash: string;
                        /** @description Height of the anchor chain block */
                        burn_block_height: number;
                        /** @description Anchor chain transaction ID */
                        miner_txid: string;
                        /** @description Number of transactions included in the block */
                        tx_count: number;
                        /** @description Execution cost read count. */
                        execution_cost_read_count: number;
                        /** @description Execution cost read length. */
                        execution_cost_read_length: number;
                        /** @description Execution cost runtime. */
                        execution_cost_runtime: number;
                        /** @description Execution cost write count. */
                        execution_cost_write_count: number;
                        /** @description Execution cost write length. */
                        execution_cost_write_length: number;
                    };
                };
            };
        };
    };
    get_transactions_by_block: {
        parameters: {
            query?: {
                /** @description Results per page */
                limit?: number;
                /** @description Result offset */
                offset?: number;
            };
            header?: never;
            path: {
                height_or_hash: "latest" | string | number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: ({
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "token_transfer";
                            token_transfer: {
                                recipient_address: string;
                                /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                amount: string;
                                /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                memo: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "smart_contract";
                            smart_contract: {
                                clarity_version: number | null;
                                /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                contract_id: string;
                                /** @description Clarity code of the smart contract being deployed */
                                source_code: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "contract_call";
                            contract_call: {
                                /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                contract_id: string;
                                /** @description Name of the Clarity function to be invoked */
                                function_name: string;
                                /** @description Function definition, including function name and type as well as parameter names and types */
                                function_signature: string;
                                function_args?: {
                                    hex: string;
                                    repr: string;
                                    name: string;
                                    type: string;
                                }[];
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "poison_microblock";
                            poison_microblock: {
                                /** @description Hex encoded microblock header */
                                microblock_header_1: string;
                                /** @description Hex encoded microblock header */
                                microblock_header_2: string;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "coinbase";
                            coinbase_payload: {
                                /** @description Hex encoded 32-byte scratch space for block leader's use */
                                data: string;
                                alt_recipient?: string | null;
                                vrf_proof?: string | null;
                            };
                        } | {
                            /** @description Transaction ID */
                            tx_id: string;
                            /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                            nonce: number;
                            /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                            fee_rate: string;
                            /** @description Address of the transaction initiator */
                            sender_address: string;
                            sponsor_nonce?: number;
                            /** @description Denotes whether the originating account is the same as the paying account */
                            sponsored: boolean;
                            sponsor_address?: string;
                            post_condition_mode: "allow" | "deny";
                            post_conditions: ({
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "stx";
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                amount: string;
                                /** @enum {string} */
                                type: "fungible";
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            } | {
                                principal: {
                                    /** @enum {string} */
                                    type_id: "principal_origin";
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_standard";
                                    address: string;
                                } | {
                                    /** @enum {string} */
                                    type_id: "principal_contract";
                                    address: string;
                                    contract_name: string;
                                };
                                condition_code: "sent" | "not_sent";
                                /** @enum {string} */
                                type: "non_fungible";
                                asset_value: {
                                    hex: string;
                                    repr: string;
                                };
                                asset: {
                                    asset_name: string;
                                    contract_address: string;
                                    contract_name: string;
                                };
                            })[];
                            /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                            anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                            /** @description Hash of the blocked this transactions was associated with */
                            block_hash: string;
                            /** @description Height of the block this transactions was associated with */
                            block_height: number;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description Height of the anchor burn block. */
                            burn_block_height: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                            parent_burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                            parent_burn_block_time_iso: string;
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                            tx_index: number;
                            /** @description Status of the transaction */
                            tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                            /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                            tx_result: {
                                /** @description Hex string representing the value fo the transaction result */
                                hex: string;
                                /** @description Readable string of the transaction result */
                                repr: string;
                            };
                            /** @description Number of transaction events */
                            event_count: number;
                            /** @description Hash of the previous block. */
                            parent_block_hash: string;
                            /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                            is_unanchored: boolean;
                            /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                            microblock_hash: string;
                            /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                            microblock_sequence: number;
                            /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                            microblock_canonical: boolean;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                            events: (({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "smart_contract_log";
                                tx_id: string;
                                contract_log: {
                                    contract_id: string;
                                    topic: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_lock";
                                tx_id: string;
                                stx_lock_event: {
                                    locked_amount: string;
                                    unlock_height: number;
                                    locked_address: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "stx_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                    memo?: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    amount: string;
                                };
                            }) | ({
                                event_index: number;
                            } & {
                                /** @enum {string} */
                                event_type: "non_fungible_token_asset";
                                tx_id: string;
                                asset: {
                                    asset_event_type: "transfer" | "mint" | "burn";
                                    asset_id: string;
                                    sender: string;
                                    recipient: string;
                                    value: {
                                        hex: string;
                                        repr: string;
                                    };
                                };
                            }))[];
                            /** @enum {string} */
                            tx_type: "tenure_change";
                            tenure_change_payload: {
                                /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                tenure_consensus_hash: string;
                                /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                prev_tenure_consensus_hash: string;
                                /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                burn_view_consensus_hash: string;
                                /** @description (Hex string) Stacks Block hash */
                                previous_tenure_end: string;
                                /** @description The number of blocks produced in the previous tenure. */
                                previous_tenure_blocks: number;
                                /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                cause: "block_found" | "extended";
                                /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                pubkey_hash: string;
                            };
                        })[];
                    };
                };
            };
        };
    };
    get_burn_blocks: {
        parameters: {
            query?: {
                /** @description Results per page */
                limit?: number;
                /** @description Result offset */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: {
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Hash of the anchor chain block */
                            burn_block_hash: string;
                            /** @description Height of the anchor chain block */
                            burn_block_height: number;
                            /** @description Hashes of the Stacks blocks included in the burn block */
                            stacks_blocks: string[];
                            /** @description Average time between blocks in seconds. Returns 0 if there is only one block in the burn block. */
                            avg_block_time: number;
                            /** @description Total number of transactions in the Stacks blocks associated with this burn block */
                            total_tx_count: number;
                        }[];
                    };
                };
            };
        };
    };
    get_burn_block: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                height_or_hash: "latest" | string | number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                        burn_block_time: number;
                        /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                        burn_block_time_iso: string;
                        /** @description Hash of the anchor chain block */
                        burn_block_hash: string;
                        /** @description Height of the anchor chain block */
                        burn_block_height: number;
                        /** @description Hashes of the Stacks blocks included in the burn block */
                        stacks_blocks: string[];
                        /** @description Average time between blocks in seconds. Returns 0 if there is only one block in the burn block. */
                        avg_block_time: number;
                        /** @description Total number of transactions in the Stacks blocks associated with this burn block */
                        total_tx_count: number;
                    };
                };
            };
        };
    };
    get_blocks_by_burn_block: {
        parameters: {
            query?: {
                /** @description Results per page */
                limit?: number;
                /** @description Result offset */
                offset?: number;
            };
            header?: never;
            path: {
                height_or_hash: "latest" | string | number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: {
                            /** @description Set to `true` if block corresponds to the canonical chain tip */
                            canonical: boolean;
                            /** @description Height of the block */
                            height: number;
                            /** @description Hash representing the block */
                            hash: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            block_time_iso: string;
                            /** @description The only hash that can uniquely identify an anchored block or an unconfirmed state trie */
                            index_block_hash: string;
                            /** @description Hash of the parent block */
                            parent_block_hash: string;
                            /** @description Index block hash of the parent block */
                            parent_index_block_hash: string;
                            /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                            burn_block_time: number;
                            /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                            burn_block_time_iso: string;
                            /** @description Hash of the anchor chain block */
                            burn_block_hash: string;
                            /** @description Height of the anchor chain block */
                            burn_block_height: number;
                            /** @description Anchor chain transaction ID */
                            miner_txid: string;
                            /** @description Number of transactions included in the block */
                            tx_count: number;
                            /** @description Execution cost read count. */
                            execution_cost_read_count: number;
                            /** @description Execution cost read length. */
                            execution_cost_read_length: number;
                            /** @description Execution cost runtime. */
                            execution_cost_runtime: number;
                            /** @description Execution cost write count. */
                            execution_cost_write_count: number;
                            /** @description Execution cost write length. */
                            execution_cost_write_length: number;
                        }[];
                    };
                };
            };
        };
    };
    get_smart_contracts_status: {
        parameters: {
            query: {
                contract_id: string[] | string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: {
                            /** @constant */
                            found: true;
                            result: {
                                /** @description Smart contract deployment transaction status */
                                status: string;
                                /** @description Deployment transaction ID */
                                tx_id: string;
                                /** @description Smart contract ID */
                                contract_id: string;
                                /** @description Height of the transaction confirmation block */
                                block_height?: number;
                            };
                        } | {
                            /** @constant */
                            found: false;
                        };
                    };
                };
            };
        };
    };
    get_mempool_fee_priorities: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        all: {
                            no_priority: number;
                            low_priority: number;
                            medium_priority: number;
                            high_priority: number;
                        };
                        token_transfer?: {
                            no_priority: number;
                            low_priority: number;
                            medium_priority: number;
                            high_priority: number;
                        };
                        contract_call?: {
                            no_priority: number;
                            low_priority: number;
                            medium_priority: number;
                            high_priority: number;
                        };
                        smart_contract?: {
                            no_priority: number;
                            low_priority: number;
                            medium_priority: number;
                            high_priority: number;
                        };
                    };
                };
            };
        };
    };
    get_pox_cycles: {
        parameters: {
            query?: {
                /** @description Results per page */
                limit?: number;
                /** @description Result offset */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: {
                            block_height: number;
                            index_block_hash: string;
                            cycle_number: number;
                            total_weight: number;
                            total_stacked_amount: string;
                            total_signers: number;
                        }[];
                    };
                };
            };
        };
    };
    get_pox_cycle: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description PoX cycle number */
                cycle_number: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        block_height: number;
                        index_block_hash: string;
                        cycle_number: number;
                        total_weight: number;
                        total_stacked_amount: string;
                        total_signers: number;
                    };
                };
            };
        };
    };
    get_pox_cycle_signers: {
        parameters: {
            query?: {
                /** @description Results per page */
                limit?: number;
                /** @description Result offset */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description PoX cycle number */
                cycle_number: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: {
                            signing_key: string;
                            /** @description The Stacks address derived from the signing_key. */
                            signer_address: string;
                            weight: number;
                            stacked_amount: string;
                            weight_percent: number;
                            stacked_amount_percent: number;
                            /** @description The number of solo stackers associated with this signer. */
                            solo_stacker_count: number;
                            /** @description The number of pooled stackers associated with this signer. */
                            pooled_stacker_count: number;
                        }[];
                    };
                };
            };
        };
    };
    get_pox_cycle_signer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description PoX cycle number */
                cycle_number: number;
                /**
                 * @description Signer key
                 * @example 0x038e3c4529395611be9abf6fa3b6987e81d402385e3d605a073f42f407565a4a3d
                 */
                signer_key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        signing_key: string;
                        /** @description The Stacks address derived from the signing_key. */
                        signer_address: string;
                        weight: number;
                        stacked_amount: string;
                        weight_percent: number;
                        stacked_amount_percent: number;
                        /** @description The number of solo stackers associated with this signer. */
                        solo_stacker_count: number;
                        /** @description The number of pooled stackers associated with this signer. */
                        pooled_stacker_count: number;
                    };
                };
            };
        };
    };
    get_pox_cycle_signer_stackers: {
        parameters: {
            query?: {
                /** @description Results per page */
                limit?: number;
                /** @description Result offset */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description PoX cycle number */
                cycle_number: number;
                /**
                 * @description Signer key
                 * @example 0x038e3c4529395611be9abf6fa3b6987e81d402385e3d605a073f42f407565a4a3d
                 */
                signer_key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: {
                            stacker_address: string;
                            stacked_amount: string;
                            pox_address: string;
                            stacker_type: "solo" | "pooled";
                        }[];
                    };
                };
            };
        };
    };
    get_address_transactions: {
        parameters: {
            query?: {
                /** @description Results per page */
                limit?: number;
                /** @description Result offset */
                offset?: number;
            };
            header?: never;
            path: {
                address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: {
                            tx: {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "token_transfer";
                                token_transfer: {
                                    recipient_address: string;
                                    /** @description Transfer amount as Integer string (64-bit unsigned integer) */
                                    amount: string;
                                    /** @description Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string) */
                                    memo: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "smart_contract";
                                smart_contract: {
                                    clarity_version: number | null;
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Clarity code of the smart contract being deployed */
                                    source_code: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "contract_call";
                                contract_call: {
                                    /** @description Contract identifier formatted as `<principaladdress>.<contract_name>` */
                                    contract_id: string;
                                    /** @description Name of the Clarity function to be invoked */
                                    function_name: string;
                                    /** @description Function definition, including function name and type as well as parameter names and types */
                                    function_signature: string;
                                    function_args?: {
                                        hex: string;
                                        repr: string;
                                        name: string;
                                        type: string;
                                    }[];
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "poison_microblock";
                                poison_microblock: {
                                    /** @description Hex encoded microblock header */
                                    microblock_header_1: string;
                                    /** @description Hex encoded microblock header */
                                    microblock_header_2: string;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "coinbase";
                                coinbase_payload: {
                                    /** @description Hex encoded 32-byte scratch space for block leader's use */
                                    data: string;
                                    alt_recipient?: string | null;
                                    vrf_proof?: string | null;
                                };
                            } | {
                                /** @description Transaction ID */
                                tx_id: string;
                                /** @description Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on. */
                                nonce: number;
                                /** @description Transaction fee as Integer string (64-bit unsigned integer). */
                                fee_rate: string;
                                /** @description Address of the transaction initiator */
                                sender_address: string;
                                sponsor_nonce?: number;
                                /** @description Denotes whether the originating account is the same as the paying account */
                                sponsored: boolean;
                                sponsor_address?: string;
                                post_condition_mode: "allow" | "deny";
                                post_conditions: ({
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "stx";
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent_equal_to" | "sent_greater_than" | "sent_greater_than_or_equal_to" | "sent_less_than" | "sent_less_than_or_equal_to";
                                    amount: string;
                                    /** @enum {string} */
                                    type: "fungible";
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                } | {
                                    principal: {
                                        /** @enum {string} */
                                        type_id: "principal_origin";
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_standard";
                                        address: string;
                                    } | {
                                        /** @enum {string} */
                                        type_id: "principal_contract";
                                        address: string;
                                        contract_name: string;
                                    };
                                    condition_code: "sent" | "not_sent";
                                    /** @enum {string} */
                                    type: "non_fungible";
                                    asset_value: {
                                        hex: string;
                                        repr: string;
                                    };
                                    asset: {
                                        asset_name: string;
                                        contract_address: string;
                                        contract_name: string;
                                    };
                                })[];
                                /** @description `on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction. */
                                anchor_mode: "on_chain_only" | "off_chain_only" | "any";
                                /** @description Hash of the blocked this transactions was associated with */
                                block_hash: string;
                                /** @description Height of the block this transactions was associated with */
                                block_height: number;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
                                block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this block was mined. */
                                burn_block_time: number;
                                /** @description Height of the anchor burn block. */
                                burn_block_height: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined. */
                                burn_block_time_iso: string;
                                /** @description Unix timestamp (in seconds) indicating when this parent block was mined */
                                parent_burn_block_time: number;
                                /** @description An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined. */
                                parent_burn_block_time_iso: string;
                                /** @description Set to `true` if block corresponds to the canonical chain tip */
                                canonical: boolean;
                                /** @description Index of the transaction, indicating the order. Starts at `0` and increases with each transaction */
                                tx_index: number;
                                /** @description Status of the transaction */
                                tx_status: "success" | "abort_by_response" | "abort_by_post_condition";
                                /** @description Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction. */
                                tx_result: {
                                    /** @description Hex string representing the value fo the transaction result */
                                    hex: string;
                                    /** @description Readable string of the transaction result */
                                    repr: string;
                                };
                                /** @description Number of transaction events */
                                event_count: number;
                                /** @description Hash of the previous block. */
                                parent_block_hash: string;
                                /** @description True if the transaction is included in a microblock that has not been confirmed by an anchor block. */
                                is_unanchored: boolean;
                                /** @description The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string. */
                                microblock_hash: string;
                                /** @description The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index). */
                                microblock_sequence: number;
                                /** @description Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork. */
                                microblock_canonical: boolean;
                                /** @description Execution cost read count. */
                                execution_cost_read_count: number;
                                /** @description Execution cost read length. */
                                execution_cost_read_length: number;
                                /** @description Execution cost runtime. */
                                execution_cost_runtime: number;
                                /** @description Execution cost write count. */
                                execution_cost_write_count: number;
                                /** @description Execution cost write length. */
                                execution_cost_write_length: number;
                                events: (({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "smart_contract_log";
                                    tx_id: string;
                                    contract_log: {
                                        contract_id: string;
                                        topic: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_lock";
                                    tx_id: string;
                                    stx_lock_event: {
                                        locked_amount: string;
                                        unlock_height: number;
                                        locked_address: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "stx_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                        memo?: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        amount: string;
                                    };
                                }) | ({
                                    event_index: number;
                                } & {
                                    /** @enum {string} */
                                    event_type: "non_fungible_token_asset";
                                    tx_id: string;
                                    asset: {
                                        asset_event_type: "transfer" | "mint" | "burn";
                                        asset_id: string;
                                        sender: string;
                                        recipient: string;
                                        value: {
                                            hex: string;
                                            repr: string;
                                        };
                                    };
                                }))[];
                                /** @enum {string} */
                                tx_type: "tenure_change";
                                tenure_change_payload: {
                                    /** @description Consensus hash of this tenure. Corresponds to the sortition in which the miner of this block was chosen. */
                                    tenure_consensus_hash: string;
                                    /** @description Consensus hash of the previous tenure. Corresponds to the sortition of the previous winning block-commit. */
                                    prev_tenure_consensus_hash: string;
                                    /** @description Current consensus hash on the underlying burnchain. Corresponds to the last-seen sortition. */
                                    burn_view_consensus_hash: string;
                                    /** @description (Hex string) Stacks Block hash */
                                    previous_tenure_end: string;
                                    /** @description The number of blocks produced in the previous tenure. */
                                    previous_tenure_blocks: number;
                                    /** @description Cause of change in mining tenure. Depending on cause, tenure can be ended or extended. */
                                    cause: "block_found" | "extended";
                                    /** @description (Hex string) The ECDSA public key hash of the current tenure. */
                                    pubkey_hash: string;
                                };
                            };
                            /** @description Total sent from the given address, including the tx fee, in micro-STX as an integer string. */
                            stx_sent: string;
                            /** @description Total received by the given address in micro-STX as an integer string. */
                            stx_received: string;
                            events: {
                                stx: {
                                    transfer: number;
                                    mint: number;
                                    burn: number;
                                };
                                ft: {
                                    transfer: number;
                                    mint: number;
                                    burn: number;
                                };
                                nft: {
                                    transfer: number;
                                    mint: number;
                                    burn: number;
                                };
                            };
                        }[];
                    };
                };
            };
        };
    };
    get_address_transaction_events: {
        parameters: {
            query?: {
                /** @description Results per page */
                limit?: number;
                /** @description Result offset */
                offset?: number;
            };
            header?: never;
            path: {
                address: string;
                /**
                 * @description Transaction ID
                 * @example 0xf6bd5f4a7b26184a3466340b2e99fd003b4962c0e382a7e4b6a13df3dd7a91c6
                 */
                tx_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 20 */
                        limit: number;
                        /** @example 0 */
                        offset: number;
                        /** @example 1 */
                        total: number;
                        results: ({
                            /** @enum {string} */
                            type: "stx";
                            event_index: number;
                            data: {
                                type: "transfer" | "mint" | "burn";
                                /** @description Amount transferred in micro-STX as an integer string. */
                                amount: string;
                                /** @description Principal that sent STX. This is unspecified if the STX were minted. */
                                sender?: string;
                                /** @description Principal that received STX. This is unspecified if the STX were burned. */
                                recipient?: string;
                            };
                        } | {
                            /** @enum {string} */
                            type: "ft";
                            event_index: number;
                            data: {
                                type: "transfer" | "mint" | "burn";
                                /** @description Amount transferred as an integer string. This balance does not factor in possible SIP-010 decimals. */
                                amount: string;
                                /** @description Fungible Token asset identifier. */
                                asset_identifier: string;
                                /** @description Principal that sent the asset. */
                                sender?: string;
                                /** @description Principal that received the asset. */
                                recipient?: string;
                            };
                        } | {
                            /** @enum {string} */
                            type: "nft";
                            event_index: number;
                            data: {
                                type: "transfer" | "mint" | "burn";
                                /** @description Non Fungible Token asset identifier. */
                                asset_identifier: string;
                                value: {
                                    hex: string;
                                    repr: string;
                                };
                                /** @description Principal that sent the asset. */
                                sender?: string;
                                /** @description Principal that received the asset. */
                                recipient?: string;
                            };
                        })[];
                    };
                };
            };
        };
    };
    get_historical_zone_file: {
        parameters: {
            query?: {
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description fully-qualified name
                 * @example muneeb.id
                 */
                name: string;
                /**
                 * @description zone file hash
                 * @example b100a68235244b012854a95f9114695679002af9
                 */
                zoneFileHash: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetches the historical zonefile specified by the username and zone hash. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        zonefile: string;
                    };
                };
            };
            /** @description Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
        };
    };
    fetch_subdomains_list_for_name: {
        parameters: {
            query?: {
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description fully-qualified name
                 * @example id.blockstack
                 */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetch a list of subdomains in a name. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    fetch_zone_file: {
        parameters: {
            query?: {
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description fully-qualified name
                 * @example bar.test
                 */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetch a user's raw zone file. This only works for RFC-compliant zone files. This method returns an error for names that have non-standard zone files. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example $ORIGIN bar.test
                         *     $TTL 3600
                         *     _https._tcp URI 10 1 "https://gaia.blockstack.org/hub/17Zijx61Sp7SbVfRTdETo7PhizJHYEUxbY/profile.json"
                         *      */
                        zonefile: string;
                    };
                };
            };
            /** @description Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Invalid name or subdomain */
                        error: string;
                    };
                };
            };
        };
    };
    get_all_names: {
        parameters: {
            query?: {
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
                /** @description names are defaulted to page 1 with 100 results. You can query specific page results by using the 'page' query parameter. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetch a list of all names known to the node. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
        };
    };
    get_name_info: {
        parameters: {
            query?: {
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description fully-qualified name
                 * @example muneeb.id
                 */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get name details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        address: string;
                        /** @example stacks */
                        blockchain: string;
                        expire_block?: number;
                        grace_period?: number;
                        last_txid: string;
                        resolver?: string;
                        status: string;
                        zonefile?: string;
                        zonefile_hash: string;
                    };
                };
            };
        };
    };
    get_all_namespaces: {
        parameters: {
            query?: {
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * BnsGetAllNamespacesResponse
                         * @description Fetch a list of all namespaces known to the node.
                         */
                        namespaces: string[];
                    };
                };
            };
        };
    };
    get_namespace_names: {
        parameters: {
            query?: {
                /**
                 * @description namespace values are defaulted to page 1 with 100 results. You can query specific page results by using the 'page' query parameter.
                 * @example 22
                 */
                page?: number;
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description the namespace to fetch names from.
                 * @example id
                 */
                tld: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetch a list of names from the namespace. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    get_names_owned_by_address: {
        parameters: {
            query?: {
                /**
                 * @description Include data from unanchored (i.e. unconfirmed) microblocks
                 * @example true
                 */
                unanchored?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description the layer-1 blockchain for the address
                 * @example stacks
                 */
                blockchain: string;
                /**
                 * @description the address to lookup
                 * @example SP2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKNRV9EJ7
                 */
                address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieves a list of names owned by the address provided. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        names: string[];
                    };
                };
            };
        };
    };
    get_namespace_price: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the namespace to fetch price for
                 * @example id
                 */
                tld: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetch price for namespace. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        units: string;
                        amount: string;
                    };
                };
            };
            /** @description Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
        };
    };
    get_name_price: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the name to query price information for
                 * @example muneeb.id
                 */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetch price for name. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        units: string;
                        amount: string;
                    };
                };
            };
            /** @description Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
        };
    };
}
